{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./app/src/js/distance.js","webpack:///./app/test/distance.test.js","webpack:///./node_modules/assertion-error/index.js","webpack:///./node_modules/chai/index.js","webpack:///./node_modules/chai/lib/chai.js","webpack:///./node_modules/chai/lib/chai/assertion.js","webpack:///./node_modules/chai/lib/chai/config.js","webpack:///./node_modules/chai/lib/chai/core/assertions.js","webpack:///./node_modules/chai/lib/chai/interface/assert.js","webpack:///./node_modules/chai/lib/chai/interface/expect.js","webpack:///./node_modules/chai/lib/chai/interface/should.js","webpack:///./node_modules/chai/lib/chai/utils/addChainableMethod.js","webpack:///./node_modules/chai/lib/chai/utils/addLengthGuard.js","webpack:///./node_modules/chai/lib/chai/utils/addMethod.js","webpack:///./node_modules/chai/lib/chai/utils/addProperty.js","webpack:///./node_modules/chai/lib/chai/utils/compareByInspect.js","webpack:///./node_modules/chai/lib/chai/utils/expectTypes.js","webpack:///./node_modules/chai/lib/chai/utils/flag.js","webpack:///./node_modules/chai/lib/chai/utils/getActual.js","webpack:///./node_modules/chai/lib/chai/utils/getEnumerableProperties.js","webpack:///./node_modules/chai/lib/chai/utils/getMessage.js","webpack:///./node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js","webpack:///./node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js","webpack:///./node_modules/chai/lib/chai/utils/getProperties.js","webpack:///./node_modules/chai/lib/chai/utils/index.js","webpack:///./node_modules/chai/lib/chai/utils/inspect.js","webpack:///./node_modules/chai/lib/chai/utils/isNaN.js","webpack:///./node_modules/chai/lib/chai/utils/isProxyEnabled.js","webpack:///./node_modules/chai/lib/chai/utils/objDisplay.js","webpack:///./node_modules/chai/lib/chai/utils/overwriteChainableMethod.js","webpack:///./node_modules/chai/lib/chai/utils/overwriteMethod.js","webpack:///./node_modules/chai/lib/chai/utils/overwriteProperty.js","webpack:///./node_modules/chai/lib/chai/utils/proxify.js","webpack:///./node_modules/chai/lib/chai/utils/test.js","webpack:///./node_modules/chai/lib/chai/utils/transferFlags.js","webpack:///./node_modules/check-error/index.js","webpack:///./node_modules/deep-eql/index.js","webpack:///./node_modules/get-func-name/index.js","webpack:///./node_modules/pathval/index.js","webpack:///./node_modules/type-detect/type-detect.js","webpack:///(webpack)/buildin/global.js"],"names":["distance","p2","p1","yDist","y","xDist","x","Math","sqrt","pow","sortByDistance","myPt","points","sort","pt1","pt2","module","exports","chai","require","expect","distancefunc","describe","it","origin","point","to","equal","places","name","sorted","exclude","excludes","slice","call","arguments","excludeProps","res","obj","Object","keys","forEach","key","indexOf","extendExclude","args","i","length","AssertionError","message","_props","ssf","extend","props","showDiff","Error","captureStackTrace","e","stack","prototype","create","constructor","toJSON","used","version","util","use","fn","push","config","assertion","core","should","assert","_chai","flag","Assertion","msg","ssfi","lockSsfi","proxify","defineProperty","get","console","warn","includeStack","set","value","addProperty","addMethod","addChainableMethod","chainingBehavior","overwriteProperty","overwriteMethod","overwriteChainableMethod","expr","negateMsg","expected","_actual","ok","test","undefined","getMessage","actual","getActual","val","truncateThreshold","useProxy","proxyExcludedKeys","_","chain","an","type","toLowerCase","article","charAt","SameValueZero","a","b","isNaN","includeChainingBehavior","include","objType","flagMsg","negate","isDeep","descriptor","included","has","isEql","eql","item","some","firstErr","numErrs","prop","propAssertion","transferFlags","property","err","checkError","compatibleConstructor","inspect","itemsCount","size","getName","trim","checkArguments","assertEqual","prevLockSsfi","_obj","assertEql","assertAbove","n","doLength","msgPrefix","nType","errorMessage","shouldThrow","have","printObj","assertLeast","assertBelow","assertMost","start","finish","startType","finishType","range","toUTCString","assertInstanceOf","target","isInstanceOf","TypeError","assertProperty","isNested","isOwn","nameType","pathInfo","getPathInfo","hasProperty","hasOwnProperty","exists","assertOwnProperty","apply","assertOwnPropertyDescriptor","actualDescriptor","getOwnPropertyDescriptor","assertLengthChain","assertLength","assertMatch","re","exec","str","is","assertKeys","keysType","deepStr","mixedArgsMsg","Array","getOwnEnumerableProperties","map","String","len","any","all","expectedKey","actualKey","every","last","pop","join","compareByInspect","assertThrows","errorLike","errMsgMatcher","RegExp","caughtErr","everyArgIsUndefined","everyArgIsDefined","Boolean","errorLikeFail","errMsgMatcherFail","errorLikeString","getConstructorName","toString","isCompatibleInstance","compatibleInstance","isCompatibleConstructor","placeholder","isCompatibleMessage","compatibleMessage","respondTo","method","itself","context","satisfy","matcher","result","objDisplay","closeTo","delta","abs","isSubsetOf","subset","superset","cmp","contains","ordered","elem","idx","matchIdx","splice","elem2","be","subject","failMsg","failNegateMsg","oneOf","list","assertChanges","initial","final","msgObj","assertIncreases","assertDecreases","assertDelta","behavior","realDelta","expression","isExtensible","isSealed","isFrozen","isFinite","express","errmsg","fail","operator","isOk","isNotOk","not","act","exp","notEqual","strictEqual","notStrictEqual","deepEqual","deepStrictEqual","notDeepEqual","isAbove","abv","above","isAtLeast","atlst","least","isBelow","blw","below","isAtMost","atmst","most","isTrue","isNotTrue","isFalse","isNotFalse","isNull","isNotNull","NaN","isNotNaN","exist","notExists","isUndefined","isDefined","isFunction","isNotFunction","isObject","isNotObject","isArray","isNotArray","isString","isNotString","isNumber","isNotNumber","finite","isBoolean","isNotBoolean","typeOf","notTypeOf","instanceOf","notInstanceOf","inc","notInclude","deepInclude","deep","notDeepInclude","nestedInclude","nested","notNestedInclude","deepNestedInclude","notDeepNestedInclude","ownInclude","own","notOwnInclude","deepOwnInclude","notDeepOwnInclude","match","notMatch","notProperty","propertyVal","notPropertyVal","deepPropertyVal","notDeepPropertyVal","ownProperty","notOwnProperty","ownPropertyVal","notOwnPropertyVal","deepOwnPropertyVal","notDeepOwnPropertyVal","nestedProperty","notNestedProperty","nestedPropertyVal","notNestedPropertyVal","deepNestedPropertyVal","notDeepNestedPropertyVal","lengthOf","hasAnyKeys","hasAllKeys","containsAllKeys","contain","doesNotHaveAnyKeys","doesNotHaveAllKeys","hasAnyDeepKeys","hasAllDeepKeys","containsAllDeepKeys","doesNotHaveAnyDeepKeys","doesNotHaveAllDeepKeys","throws","assertErr","throw","doesNotThrow","val2","approximately","sameMembers","set1","set2","same","members","notSameMembers","sameDeepMembers","notSameDeepMembers","sameOrderedMembers","notSameOrderedMembers","sameDeepOrderedMembers","notSameDeepOrderedMembers","includeMembers","notIncludeMembers","includeDeepMembers","notIncludeDeepMembers","includeOrderedMembers","notIncludeOrderedMembers","includeDeepOrderedMembers","notIncludeDeepOrderedMembers","inList","changes","change","changesBy","tmpMsg","by","doesNotChange","changesButNotBy","but","increases","increase","increasesBy","doesNotIncrease","increasesButNotBy","decreases","decrease","decreasesBy","doesNotDecrease","doesNotDecreaseBy","decreasesButNotBy","ifError","extensible","isNotExtensible","sealed","isNotSealed","frozen","isNotFrozen","isEmpty","empty","isNotEmpty","alias","as","loadShould","shouldGetter","Number","Symbol","valueOf","shouldSetter","enumerable","configurable","writable","val1","Throw","errt","errs","Should","addLengthGuard","canSetPrototype","setPrototypeOf","testFn","excludeNames","getOwnPropertyNames","filter","propDesc","Function","ctx","chainableBehavior","__methods","chainableMethodGetter","chainableMethodWrapper","newAssertion","asserterNames","asserterName","pd","fnLengthDesc","assertionName","isChainable","methodWrapper","isProxyEnabled","getter","propertyGetter","expectTypes","types","t","index","art","or","flags","__flags","getEnumerableProperties","object","replace","getOwnEnumerablePropertySymbols","concat","getOwnPropertySymbols","sym","getProperties","proto","getPrototypeOf","pathval","showHidden","depth","colors","seen","stylize","formatValue","isDOMElement","HTMLElement","nodeType","nodeName","recurseTimes","ret","primitive","formatPrimitive","outerHTML","document","xmlVersion","xmlSerializer","XMLSerializer","serializeToString","ns","container","createElementNS","appendChild","cloneNode","html","innerHTML","visibleKeys","nameSuffix","isError","isRegExp","isDate","Date","formatError","base","array","typedArray","braces","isTypedArray","output","formatArray","formatTypedArray","formatProperty","reduceToSingleString","simple","JSON","stringify","Infinity","l","propDescriptor","split","line","substr","reduce","prev","cur","ar","objectToString","d","o","Proxy","Reflect","kstr","_chainingBehavior","overwritingChainableMethodGetter","_method","overwritingChainableMethodWrapper","_super","overwritingMethodWrapper","origLockSsfi","_get","overwritingPropertyGetter","builtins","nonChainableMethodName","proxyGetter","suggestion","suggestionDistance","dist","stringDistanceCapped","strA","strB","cap","memo","fill","j","ch","charCodeAt","min","includeAll","thrown","errMatcher","comparisonString","functionNameMatch","getFunctionName","constructorFn","constructorName","FakeMap","_key","random","now","getMap","setMap","MemoizeMap","WeakMap","memoizeCompare","leftHandOperand","rightHandOperand","memoizeMap","isPrimitive","leftHandMap","memoizeSet","options","comparator","extensiveDeepEqual","simpleResult","simpleEqual","memoize","memoizeResultLeft","memoizeResultRight","comparatorResult","leftHandType","extensiveDeepEqualByType","iterableEqual","regexpEqual","generatorEqual","Uint8Array","buffer","entriesEqual","objectEqual","leftHandItems","rightHandItems","gatherEntries","getGeneratorEntries","hasIteratorFunction","iterator","getIteratorEntries","iteratorError","generator","generatorResult","next","accumulator","done","getEnumerableKeys","keysEqual","leftHandKeys","rightHandKeys","leftHandEntries","rightHandEntries","getFuncName","aFunc","parsePath","path","parts","mapMatches","regexp","mArr","parsed","parseFloat","p","internalGetPathValue","pathDepth","temporaryValue","part","internalSetPathValue","tempObj","propName","propVal","info","parent","getPathValue","setPathValue","global","factory","define","promiseExists","Promise","globalObject","self","symbolExists","mapExists","Map","setExists","Set","weakMapExists","weakSetExists","WeakSet","dataViewExists","DataView","symbolIteratorExists","symbolToStringTagExists","toStringTag","setEntriesExists","entries","mapEntriesExists","setIteratorPrototype","mapIteratorPrototype","arrayIteratorExists","arrayIteratorPrototype","stringIteratorExists","stringIteratorPrototype","toStringLeftSliceLength","toStringRightSliceLength","typeDetect","typeofObj","window","location","navigator","mimeTypes","plugins","tagName","stringTag","objPrototype","g"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","// Функция distance() принимает 2 значения, представленных\r\n// числами x и y, и возвращает расстояние между ними\r\n//\r\n// [TODO] Используйте ортодому\r\nfunction distance(p2, p1) {\r\n    let yDist = p2.y - p1.y;\r\n    let xDist = p2.x - p1.x;\r\n    return Math.sqrt(Math.pow(yDist, 2) + Math.pow(xDist, 2));\r\n}\r\n   // sortByDistance принимает ваше местоположение и массив точек\r\n   // и возвращает отсортированный массив точек\r\nfunction sortByDistance(myPt, points) {\r\n    return points.sort(\r\n        (pt1, pt2) => distance(pt1, myPt) - distance(pt2, myPt));\r\n}\r\n\r\nmodule.exports = {distance, sortByDistance};","const chai = require('chai'); // require chai \r\nconst expect = chai.expect;\r\n\r\nconst distancefunc = require('../src/js/distance');\r\nconst distance = distancefunc.distance;\r\nconst sortByDistance = distancefunc.sortByDistance;\r\n\r\n\r\ndescribe(\"distance\", function() {\r\n    it(\"calculates distance with the good ol' Pythagorean Theorem\", function() {\r\n        let origin = {x: 0.0, y: 0.0};\r\n        let point = {x: 3.0, y: 4.0};\r\n      expect(distance(point, origin)).to.equal(5555);\r\n    });\r\n});\r\n\r\ndescribe(\"sortByDistance\", function() {\r\n    it(\"sortsByDistance\", function() {\r\n        let places = [\r\n            {name: \"Far away\", x: 100, y: 50},\r\n            {name: \"Nearby\", x: 20, y: 10},\r\n        ];\r\n        let origin = {name: \"Origin\", x: 0, y: 0};\r\n        let sorted = sortByDistance(origin, places);\r\n        expect(sorted[0].name).to.equal(\"Nearby\");\r\n        expect(sorted[1].name).to.equal(\"Far away\");\r\n    });\r\n});","/*!\n * assertion-error\n * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>\n * MIT Licensed\n */\n\n/*!\n * Return a function that will copy properties from\n * one object to another excluding any originally\n * listed. Returned function will create a new `{}`.\n *\n * @param {String} excluded properties ...\n * @return {Function}\n */\n\nfunction exclude () {\n  var excludes = [].slice.call(arguments);\n\n  function excludeProps (res, obj) {\n    Object.keys(obj).forEach(function (key) {\n      if (!~excludes.indexOf(key)) res[key] = obj[key];\n    });\n  }\n\n  return function extendExclude () {\n    var args = [].slice.call(arguments)\n      , i = 0\n      , res = {};\n\n    for (; i < args.length; i++) {\n      excludeProps(res, args[i]);\n    }\n\n    return res;\n  };\n};\n\n/*!\n * Primary Exports\n */\n\nmodule.exports = AssertionError;\n\n/**\n * ### AssertionError\n *\n * An extension of the JavaScript `Error` constructor for\n * assertion and validation scenarios.\n *\n * @param {String} message\n * @param {Object} properties to include (optional)\n * @param {callee} start stack function (optional)\n */\n\nfunction AssertionError (message, _props, ssf) {\n  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')\n    , props = extend(_props || {});\n\n  // default values\n  this.message = message || 'Unspecified AssertionError';\n  this.showDiff = false;\n\n  // copy from properties\n  for (var key in props) {\n    this[key] = props[key];\n  }\n\n  // capture stack trace\n  ssf = ssf || AssertionError;\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, ssf);\n  } else {\n    try {\n      throw new Error();\n    } catch(e) {\n      this.stack = e.stack;\n    }\n  }\n}\n\n/*!\n * Inherit from Error.prototype\n */\n\nAssertionError.prototype = Object.create(Error.prototype);\n\n/*!\n * Statically set name\n */\n\nAssertionError.prototype.name = 'AssertionError';\n\n/*!\n * Ensure correct constructor\n */\n\nAssertionError.prototype.constructor = AssertionError;\n\n/**\n * Allow errors to be converted to JSON for static transfer.\n *\n * @param {Boolean} include stack (default: `true`)\n * @return {Object} object that can be `JSON.stringify`\n */\n\nAssertionError.prototype.toJSON = function (stack) {\n  var extend = exclude('constructor', 'toJSON', 'stack')\n    , props = extend({ name: this.name }, this);\n\n  // include stack if exists and not turned off\n  if (false !== stack && this.stack) {\n    props.stack = this.stack;\n  }\n\n  return props;\n};\n","module.exports = require('./lib/chai');\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar used = [];\n\n/*!\n * Chai version\n */\n\nexports.version = '4.2.0';\n\n/*!\n * Assertion Error\n */\n\nexports.AssertionError = require('assertion-error');\n\n/*!\n * Utils for plugins (not exported)\n */\n\nvar util = require('./chai/utils');\n\n/**\n * # .use(function)\n *\n * Provides a way to extend the internals of Chai.\n *\n * @param {Function}\n * @returns {this} for chaining\n * @api public\n */\n\nexports.use = function (fn) {\n  if (!~used.indexOf(fn)) {\n    fn(exports, util);\n    used.push(fn);\n  }\n\n  return exports;\n};\n\n/*!\n * Utility Functions\n */\n\nexports.util = util;\n\n/*!\n * Configuration\n */\n\nvar config = require('./chai/config');\nexports.config = config;\n\n/*!\n * Primary `Assertion` prototype\n */\n\nvar assertion = require('./chai/assertion');\nexports.use(assertion);\n\n/*!\n * Core Assertions\n */\n\nvar core = require('./chai/core/assertions');\nexports.use(core);\n\n/*!\n * Expect interface\n */\n\nvar expect = require('./chai/interface/expect');\nexports.use(expect);\n\n/*!\n * Should interface\n */\n\nvar should = require('./chai/interface/should');\nexports.use(should);\n\n/*!\n * Assert interface\n */\n\nvar assert = require('./chai/interface/assert');\nexports.use(assert);\n","/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = require('./config');\n\nmodule.exports = function (_chai, util) {\n  /*!\n   * Module dependencies.\n   */\n\n  var AssertionError = _chai.AssertionError\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  _chai.Assertion = Assertion;\n\n  /*!\n   * Assertion Constructor\n   *\n   * Creates object for chaining.\n   *\n   * `Assertion` objects contain metadata in the form of flags. Three flags can\n   * be assigned during instantiation by passing arguments to this constructor:\n   *\n   * - `object`: This flag contains the target of the assertion. For example, in\n   *   the assertion `expect(numKittens).to.equal(7);`, the `object` flag will\n   *   contain `numKittens` so that the `equal` assertion can reference it when\n   *   needed.\n   *\n   * - `message`: This flag contains an optional custom error message to be\n   *   prepended to the error message that's generated by the assertion when it\n   *   fails.\n   *\n   * - `ssfi`: This flag stands for \"start stack function indicator\". It\n   *   contains a function reference that serves as the starting point for\n   *   removing frames from the stack trace of the error that's created by the\n   *   assertion when it fails. The goal is to provide a cleaner stack trace to\n   *   end users by removing Chai's internal functions. Note that it only works\n   *   in environments that support `Error.captureStackTrace`, and only when\n   *   `Chai.config.includeStack` hasn't been set to `false`.\n   *\n   * - `lockSsfi`: This flag controls whether or not the given `ssfi` flag\n   *   should retain its current value, even as assertions are chained off of\n   *   this object. This is usually set to `true` when creating a new assertion\n   *   from within another assertion. It's also temporarily set to `true` before\n   *   an overwritten assertion gets called by the overwriting assertion.\n   *\n   * @param {Mixed} obj target of the assertion\n   * @param {String} msg (optional) custom error message\n   * @param {Function} ssfi (optional) starting point for removing stack frames\n   * @param {Boolean} lockSsfi (optional) whether or not the ssfi flag is locked\n   * @api private\n   */\n\n  function Assertion (obj, msg, ssfi, lockSsfi) {\n    flag(this, 'ssfi', ssfi || Assertion);\n    flag(this, 'lockSsfi', lockSsfi);\n    flag(this, 'object', obj);\n    flag(this, 'message', msg);\n\n    return util.proxify(this);\n  }\n\n  Object.defineProperty(Assertion, 'includeStack', {\n    get: function() {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      return config.includeStack;\n    },\n    set: function(value) {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      config.includeStack = value;\n    }\n  });\n\n  Object.defineProperty(Assertion, 'showDiff', {\n    get: function() {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      return config.showDiff;\n    },\n    set: function(value) {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      config.showDiff = value;\n    }\n  });\n\n  Assertion.addProperty = function (name, fn) {\n    util.addProperty(this.prototype, name, fn);\n  };\n\n  Assertion.addMethod = function (name, fn) {\n    util.addMethod(this.prototype, name, fn);\n  };\n\n  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {\n    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  Assertion.overwriteProperty = function (name, fn) {\n    util.overwriteProperty(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteMethod = function (name, fn) {\n    util.overwriteMethod(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {\n    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  /**\n   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)\n   *\n   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.\n   *\n   * @name assert\n   * @param {Philosophical} expression to be tested\n   * @param {String|Function} message or function that returns message to display if expression fails\n   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails\n   * @param {Mixed} expected value (remember to check for negation)\n   * @param {Mixed} actual (optional) will default to `this.obj`\n   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails\n   * @api private\n   */\n\n  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {\n    var ok = util.test(this, arguments);\n    if (false !== showDiff) showDiff = true;\n    if (undefined === expected && undefined === _actual) showDiff = false;\n    if (true !== config.showDiff) showDiff = false;\n\n    if (!ok) {\n      msg = util.getMessage(this, arguments);\n      var actual = util.getActual(this, arguments);\n      throw new AssertionError(msg, {\n          actual: actual\n        , expected: expected\n        , showDiff: showDiff\n      }, (config.includeStack) ? this.assert : flag(this, 'ssfi'));\n    }\n  };\n\n  /*!\n   * ### ._obj\n   *\n   * Quick reference to stored `actual` value for plugin developers.\n   *\n   * @api private\n   */\n\n  Object.defineProperty(Assertion.prototype, '_obj',\n    { get: function () {\n        return flag(this, 'object');\n      }\n    , set: function (val) {\n        flag(this, 'object', val);\n      }\n  });\n};\n","module.exports = {\n\n  /**\n   * ### config.includeStack\n   *\n   * User configurable property, influences whether stack trace\n   * is included in Assertion error message. Default of false\n   * suppresses stack trace in the error message.\n   *\n   *     chai.config.includeStack = true;  // enable stack on error\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  includeStack: false,\n\n  /**\n   * ### config.showDiff\n   *\n   * User configurable property, influences whether or not\n   * the `showDiff` flag should be included in the thrown\n   * AssertionErrors. `false` will always be `false`; `true`\n   * will be true when the assertion has requested a diff\n   * be shown.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  showDiff: true,\n\n  /**\n   * ### config.truncateThreshold\n   *\n   * User configurable property, sets length threshold for actual and\n   * expected values in assertion errors. If this threshold is exceeded, for\n   * example for large data structures, the value is replaced with something\n   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.\n   *\n   * Set it to zero if you want to disable truncating altogether.\n   *\n   * This is especially userful when doing assertions on arrays: having this\n   * set to a reasonable large value makes the failure messages readily\n   * inspectable.\n   *\n   *     chai.config.truncateThreshold = 0;  // disable truncating\n   *\n   * @param {Number}\n   * @api public\n   */\n\n  truncateThreshold: 40,\n\n  /**\n   * ### config.useProxy\n   *\n   * User configurable property, defines if chai will use a Proxy to throw\n   * an error when a non-existent property is read, which protects users\n   * from typos when using property-based assertions.\n   *\n   * Set it to false if you want to disable this feature.\n   *\n   *     chai.config.useProxy = false;  // disable use of Proxy\n   *\n   * This feature is automatically disabled regardless of this config value\n   * in environments that don't support proxies.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  useProxy: true,\n\n  /**\n   * ### config.proxyExcludedKeys\n   *\n   * User configurable property, defines which properties should be ignored\n   * instead of throwing an error if they do not exist on the assertion.\n   * This is only applied if the environment Chai is running in supports proxies and\n   * if the `useProxy` configuration setting is enabled.\n   * By default, `then` and `inspect` will not throw an error if they do not exist on the\n   * assertion object because the `.inspect` property is read by `util.inspect` (for example, when\n   * using `console.log` on the assertion object) and `.then` is necessary for promise type-checking.\n   *\n   *     // By default these keys will not throw an error if they do not exist on the assertion object\n   *     chai.config.proxyExcludedKeys = ['then', 'inspect'];\n   *\n   * @param {Array}\n   * @api public\n   */\n\n  proxyExcludedKeys: ['then', 'catch', 'inspect', 'toJSON']\n};\n","/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, _) {\n  var Assertion = chai.Assertion\n    , AssertionError = chai.AssertionError\n    , flag = _.flag;\n\n  /**\n   * ### Language Chains\n   *\n   * The following are provided as chainable getters to improve the readability\n   * of your assertions.\n   *\n   * **Chains**\n   *\n   * - to\n   * - be\n   * - been\n   * - is\n   * - that\n   * - which\n   * - and\n   * - has\n   * - have\n   * - with\n   * - at\n   * - of\n   * - same\n   * - but\n   * - does\n   * - still\n   *\n   * @name language chains\n   * @namespace BDD\n   * @api public\n   */\n\n  [ 'to', 'be', 'been', 'is'\n  , 'and', 'has', 'have', 'with'\n  , 'that', 'which', 'at', 'of'\n  , 'same', 'but', 'does', 'still' ].forEach(function (chain) {\n    Assertion.addProperty(chain);\n  });\n\n  /**\n   * ### .not\n   *\n   * Negates all assertions that follow in the chain.\n   *\n   *     expect(function () {}).to.not.throw();\n   *     expect({a: 1}).to.not.have.property('b');\n   *     expect([1, 2]).to.be.an('array').that.does.not.include(3);\n   *\n   * Just because you can negate any assertion with `.not` doesn't mean you\n   * should. With great power comes great responsibility. It's often best to\n   * assert that the one expected output was produced, rather than asserting\n   * that one of countless unexpected outputs wasn't produced. See individual\n   * assertions for specific guidance.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.equal(1); // Not recommended\n   *\n   * @name not\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('not', function () {\n    flag(this, 'negate', true);\n  });\n\n  /**\n   * ### .deep\n   *\n   * Causes all `.equal`, `.include`, `.members`, `.keys`, and `.property`\n   * assertions that follow in the chain to use deep equality instead of strict\n   * (`===`) equality. See the `deep-eql` project page for info on the deep\n   * equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) equals `{a: 1}`\n   *     expect({a: 1}).to.deep.equal({a: 1});\n   *     expect({a: 1}).to.not.equal({a: 1});\n   *\n   *     // Target array deeply (but not strictly) includes `{a: 1}`\n   *     expect([{a: 1}]).to.deep.include({a: 1});\n   *     expect([{a: 1}]).to.not.include({a: 1});\n   *\n   *     // Target object deeply (but not strictly) includes `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n   *\n   *     // Target array deeply (but not strictly) has member `{a: 1}`\n   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);\n   *\n   *     // Target set deeply (but not strictly) has key `{a: 1}`\n   *     expect(new Set([{a: 1}])).to.have.deep.keys([{a: 1}]);\n   *     expect(new Set([{a: 1}])).to.not.have.keys([{a: 1}]);\n   *\n   *     // Target object deeply (but not strictly) has property `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n   *\n   * @name deep\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('deep', function () {\n    flag(this, 'deep', true);\n  });\n\n  /**\n   * ### .nested\n   *\n   * Enables dot- and bracket-notation in all `.property` and `.include`\n   * assertions that follow in the chain.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n   *     expect({'.a': {'[b]': 'x'}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 'x'});\n   *\n   * `.nested` cannot be combined with `.own`.\n   *\n   * @name nested\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('nested', function () {\n    flag(this, 'nested', true);\n  });\n\n  /**\n   * ### .own\n   *\n   * Causes all `.property` and `.include` assertions that follow in the chain\n   * to ignore inherited properties.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.have.own.property('a');\n   *     expect({a: 1}).to.have.property('b');\n   *     expect({a: 1}).to.not.have.own.property('b');\n   *\n   *     expect({a: 1}).to.own.include({a: 1});\n   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n   *\n   * `.own` cannot be combined with `.nested`.\n   *\n   * @name own\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('own', function () {\n    flag(this, 'own', true);\n  });\n\n  /**\n   * ### .ordered\n   *\n   * Causes all `.members` assertions that follow in the chain to require that\n   * members be in the same order.\n   *\n   *     expect([1, 2]).to.have.ordered.members([1, 2])\n   *       .but.not.have.ordered.members([2, 1]);\n   *\n   * When `.include` and `.ordered` are combined, the ordering begins at the\n   * start of both arrays.\n   *\n   *     expect([1, 2, 3]).to.include.ordered.members([1, 2])\n   *       .but.not.include.ordered.members([2, 3]);\n   *\n   * @name ordered\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ordered', function () {\n    flag(this, 'ordered', true);\n  });\n\n  /**\n   * ### .any\n   *\n   * Causes all `.keys` assertions that follow in the chain to only require that\n   * the target have at least one of the given keys. This is the opposite of\n   * `.all`, which requires that the target have all of the given keys.\n   *\n   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n   *\n   * See the `.keys` doc for guidance on when to use `.any` or `.all`.\n   *\n   * @name any\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('any', function () {\n    flag(this, 'any', true);\n    flag(this, 'all', false);\n  });\n\n  /**\n   * ### .all\n   *\n   * Causes all `.keys` assertions that follow in the chain to require that the\n   * target have all of the given keys. This is the opposite of `.any`, which\n   * only requires that the target have at least one of the given keys.\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *\n   * Note that `.all` is used by default when neither `.all` nor `.any` are\n   * added earlier in the chain. However, it's often best to add `.all` anyway\n   * because it improves readability.\n   *\n   * See the `.keys` doc for guidance on when to use `.any` or `.all`.\n   *\n   * @name all\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('all', function () {\n    flag(this, 'all', true);\n    flag(this, 'any', false);\n  });\n\n  /**\n   * ### .a(type[, msg])\n   *\n   * Asserts that the target's type is equal to the given string `type`. Types\n   * are case insensitive. See the `type-detect` project page for info on the\n   * type detection algorithm: https://github.com/chaijs/type-detect.\n   *\n   *     expect('foo').to.be.a('string');\n   *     expect({a: 1}).to.be.an('object');\n   *     expect(null).to.be.a('null');\n   *     expect(undefined).to.be.an('undefined');\n   *     expect(new Error).to.be.an('error');\n   *     expect(Promise.resolve()).to.be.a('promise');\n   *     expect(new Float32Array).to.be.a('float32array');\n   *     expect(Symbol()).to.be.a('symbol');\n   *\n   * `.a` supports objects that have a custom type set via `Symbol.toStringTag`.\n   *\n   *     var myObj = {\n   *       [Symbol.toStringTag]: 'myCustomType'\n   *     };\n   *\n   *     expect(myObj).to.be.a('myCustomType').but.not.an('object');\n   *\n   * It's often best to use `.a` to check a target's type before making more\n   * assertions on the same target. That way, you avoid unexpected behavior from\n   * any assertion that does different things based on the target's type.\n   *\n   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);\n   *     expect([]).to.be.an('array').that.is.empty;\n   *\n   * Add `.not` earlier in the chain to negate `.a`. However, it's often best to\n   * assert that the target is the expected type, rather than asserting that it\n   * isn't one of many unexpected types.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.an('array'); // Not recommended\n   *\n   * `.a` accepts an optional `msg` argument which is a custom error message to\n   * show when the assertion fails. The message can also be given as the second\n   * argument to `expect`.\n   *\n   *     expect(1).to.be.a('string', 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.a('string');\n   *\n   * `.a` can also be used as a language chain to improve the readability of\n   * your assertions.\n   *\n   *     expect({b: 2}).to.have.a.property('b');\n   *\n   * The alias `.an` can be used interchangeably with `.a`.\n   *\n   * @name a\n   * @alias an\n   * @param {String} type\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function an (type, msg) {\n    if (msg) flag(this, 'message', msg);\n    type = type.toLowerCase();\n    var obj = flag(this, 'object')\n      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';\n\n    this.assert(\n        type === _.type(obj).toLowerCase()\n      , 'expected #{this} to be ' + article + type\n      , 'expected #{this} not to be ' + article + type\n    );\n  }\n\n  Assertion.addChainableMethod('an', an);\n  Assertion.addChainableMethod('a', an);\n\n  /**\n   * ### .include(val[, msg])\n   *\n   * When the target is a string, `.include` asserts that the given string `val`\n   * is a substring of the target.\n   *\n   *     expect('foobar').to.include('foo');\n   *\n   * When the target is an array, `.include` asserts that the given `val` is a\n   * member of the target.\n   *\n   *     expect([1, 2, 3]).to.include(2);\n   *\n   * When the target is an object, `.include` asserts that the given object\n   * `val`'s properties are a subset of the target's properties.\n   *\n   *     expect({a: 1, b: 2, c: 3}).to.include({a: 1, b: 2});\n   *\n   * When the target is a Set or WeakSet, `.include` asserts that the given `val` is a\n   * member of the target. SameValueZero equality algorithm is used.\n   *\n   *     expect(new Set([1, 2])).to.include(2);\n   *\n   * When the target is a Map, `.include` asserts that the given `val` is one of\n   * the values of the target. SameValueZero equality algorithm is used.\n   *\n   *     expect(new Map([['a', 1], ['b', 2]])).to.include(2);\n   *\n   * Because `.include` does different things based on the target's type, it's\n   * important to check the target's type before using `.include`. See the `.a`\n   * doc for info on testing a target's type.\n   *\n   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);\n   *\n   * By default, strict (`===`) equality is used to compare array members and\n   * object properties. Add `.deep` earlier in the chain to use deep equality\n   * instead (WeakSet targets are not supported). See the `deep-eql` project\n   * page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target array deeply (but not strictly) includes `{a: 1}`\n   *     expect([{a: 1}]).to.deep.include({a: 1});\n   *     expect([{a: 1}]).to.not.include({a: 1});\n   *\n   *     // Target object deeply (but not strictly) includes `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n   *\n   * By default, all of the target's properties are searched when working with\n   * objects. This includes properties that are inherited and/or non-enumerable.\n   * Add `.own` earlier in the chain to exclude the target's inherited\n   * properties from the search.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.own.include({a: 1});\n   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n   *\n   * Note that a target object is always only searched for `val`'s own\n   * enumerable properties.\n   *\n   * `.deep` and `.own` can be combined.\n   *\n   *     expect({a: {b: 2}}).to.deep.own.include({a: {b: 2}});\n   *\n   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when\n   * referencing nested properties.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 2}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 2});\n   *\n   * `.deep` and `.nested` can be combined.\n   *\n   *     expect({a: {b: [{c: 3}]}}).to.deep.nested.include({'a.b[0]': {c: 3}});\n   *\n   * `.own` and `.nested` cannot be combined.\n   *\n   * Add `.not` earlier in the chain to negate `.include`.\n   *\n   *     expect('foobar').to.not.include('taco');\n   *     expect([1, 2, 3]).to.not.include(4);\n   *\n   * However, it's dangerous to negate `.include` when the target is an object.\n   * The problem is that it creates uncertain expectations by asserting that the\n   * target object doesn't have all of `val`'s key/value pairs but may or may\n   * not have some of them. It's often best to identify the exact output that's\n   * expected, and then write an assertion that only accepts that exact output.\n   *\n   * When the target object isn't even expected to have `val`'s keys, it's\n   * often best to assert exactly that.\n   *\n   *     expect({c: 3}).to.not.have.any.keys('a', 'b'); // Recommended\n   *     expect({c: 3}).to.not.include({a: 1, b: 2}); // Not recommended\n   *\n   * When the target object is expected to have `val`'s keys, it's often best to\n   * assert that each of the properties has its expected value, rather than\n   * asserting that each property doesn't have one of many unexpected values.\n   *\n   *     expect({a: 3, b: 4}).to.include({a: 3, b: 4}); // Recommended\n   *     expect({a: 3, b: 4}).to.not.include({a: 1, b: 2}); // Not recommended\n   *\n   * `.include` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2, 3]).to.include(4, 'nooo why fail??');\n   *     expect([1, 2, 3], 'nooo why fail??').to.include(4);\n   *\n   * `.include` can also be used as a language chain, causing all `.members` and\n   * `.keys` assertions that follow in the chain to require the target to be a\n   * superset of the expected set, rather than an identical set. Note that\n   * `.members` ignores duplicates in the subset when `.include` is added.\n   *\n   *     // Target object's keys are a superset of ['a', 'b'] but not identical\n   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n   *\n   *     // Target array is a superset of [1, 2] but not identical\n   *     expect([1, 2, 3]).to.include.members([1, 2]);\n   *     expect([1, 2, 3]).to.not.have.members([1, 2]);\n   *\n   *     // Duplicates in the subset are ignored\n   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n   *\n   * Note that adding `.any` earlier in the chain causes the `.keys` assertion\n   * to ignore `.include`.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1}).to.include.any.keys('a', 'b');\n   *     expect({a: 1}).to.have.any.keys('a', 'b');\n   *\n   * The aliases `.includes`, `.contain`, and `.contains` can be used\n   * interchangeably with `.include`.\n   *\n   * @name include\n   * @alias contain\n   * @alias includes\n   * @alias contains\n   * @param {Mixed} val\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function SameValueZero(a, b) {\n    return (_.isNaN(a) && _.isNaN(b)) || a === b;\n  }\n\n  function includeChainingBehavior () {\n    flag(this, 'contains', true);\n  }\n\n  function include (val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var obj = flag(this, 'object')\n      , objType = _.type(obj).toLowerCase()\n      , flagMsg = flag(this, 'message')\n      , negate = flag(this, 'negate')\n      , ssfi = flag(this, 'ssfi')\n      , isDeep = flag(this, 'deep')\n      , descriptor = isDeep ? 'deep ' : '';\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    var included = false;\n\n    switch (objType) {\n      case 'string':\n        included = obj.indexOf(val) !== -1;\n        break;\n\n      case 'weakset':\n        if (isDeep) {\n          throw new AssertionError(\n            flagMsg + 'unable to use .deep.include with WeakSet',\n            undefined,\n            ssfi\n          );\n        }\n\n        included = obj.has(val);\n        break;\n\n      case 'map':\n        var isEql = isDeep ? _.eql : SameValueZero;\n        obj.forEach(function (item) {\n          included = included || isEql(item, val);\n        });\n        break;\n\n      case 'set':\n        if (isDeep) {\n          obj.forEach(function (item) {\n            included = included || _.eql(item, val);\n          });\n        } else {\n          included = obj.has(val);\n        }\n        break;\n\n      case 'array':\n        if (isDeep) {\n          included = obj.some(function (item) {\n            return _.eql(item, val);\n          })\n        } else {\n          included = obj.indexOf(val) !== -1;\n        }\n        break;\n\n      default:\n        // This block is for asserting a subset of properties in an object.\n        // `_.expectTypes` isn't used here because `.include` should work with\n        // objects with a custom `@@toStringTag`.\n        if (val !== Object(val)) {\n          throw new AssertionError(\n            flagMsg + 'object tested must be an array, a map, an object,'\n              + ' a set, a string, or a weakset, but ' + objType + ' given',\n            undefined,\n            ssfi\n          );\n        }\n\n        var props = Object.keys(val)\n          , firstErr = null\n          , numErrs = 0;\n\n        props.forEach(function (prop) {\n          var propAssertion = new Assertion(obj);\n          _.transferFlags(this, propAssertion, true);\n          flag(propAssertion, 'lockSsfi', true);\n\n          if (!negate || props.length === 1) {\n            propAssertion.property(prop, val[prop]);\n            return;\n          }\n\n          try {\n            propAssertion.property(prop, val[prop]);\n          } catch (err) {\n            if (!_.checkError.compatibleConstructor(err, AssertionError)) {\n              throw err;\n            }\n            if (firstErr === null) firstErr = err;\n            numErrs++;\n          }\n        }, this);\n\n        // When validating .not.include with multiple properties, we only want\n        // to throw an assertion error if all of the properties are included,\n        // in which case we throw the first property assertion error that we\n        // encountered.\n        if (negate && props.length > 1 && numErrs === props.length) {\n          throw firstErr;\n        }\n        return;\n    }\n\n    // Assert inclusion in collection or substring in a string.\n    this.assert(\n      included\n      , 'expected #{this} to ' + descriptor + 'include ' + _.inspect(val)\n      , 'expected #{this} to not ' + descriptor + 'include ' + _.inspect(val));\n  }\n\n  Assertion.addChainableMethod('include', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contain', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contains', include, includeChainingBehavior);\n  Assertion.addChainableMethod('includes', include, includeChainingBehavior);\n\n  /**\n   * ### .ok\n   *\n   * Asserts that the target is a truthy value (considered `true` in boolean context).\n   * However, it's often best to assert that the target is strictly (`===`) or\n   * deeply equal to its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.ok; // Not recommended\n   *\n   *     expect(true).to.be.true; // Recommended\n   *     expect(true).to.be.ok; // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.ok`.\n   *\n   *     expect(0).to.equal(0); // Recommended\n   *     expect(0).to.not.be.ok; // Not recommended\n   *\n   *     expect(false).to.be.false; // Recommended\n   *     expect(false).to.not.be.ok; // Not recommended\n   *\n   *     expect(null).to.be.null; // Recommended\n   *     expect(null).to.not.be.ok; // Not recommended\n   *\n   *     expect(undefined).to.be.undefined; // Recommended\n   *     expect(undefined).to.not.be.ok; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(false, 'nooo why fail??').to.be.ok;\n   *\n   * @name ok\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ok', function () {\n    this.assert(\n        flag(this, 'object')\n      , 'expected #{this} to be truthy'\n      , 'expected #{this} to be falsy');\n  });\n\n  /**\n   * ### .true\n   *\n   * Asserts that the target is strictly (`===`) equal to `true`.\n   *\n   *     expect(true).to.be.true;\n   *\n   * Add `.not` earlier in the chain to negate `.true`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `true`.\n   *\n   *     expect(false).to.be.false; // Recommended\n   *     expect(false).to.not.be.true; // Not recommended\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.true; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(false, 'nooo why fail??').to.be.true;\n   *\n   * @name true\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('true', function () {\n    this.assert(\n        true === flag(this, 'object')\n      , 'expected #{this} to be true'\n      , 'expected #{this} to be false'\n      , flag(this, 'negate') ? false : true\n    );\n  });\n\n  /**\n   * ### .false\n   *\n   * Asserts that the target is strictly (`===`) equal to `false`.\n   *\n   *     expect(false).to.be.false;\n   *\n   * Add `.not` earlier in the chain to negate `.false`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to `false`.\n   *\n   *     expect(true).to.be.true; // Recommended\n   *     expect(true).to.not.be.false; // Not recommended\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.false; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(true, 'nooo why fail??').to.be.false;\n   *\n   * @name false\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('false', function () {\n    this.assert(\n        false === flag(this, 'object')\n      , 'expected #{this} to be false'\n      , 'expected #{this} to be true'\n      , flag(this, 'negate') ? true : false\n    );\n  });\n\n  /**\n   * ### .null\n   *\n   * Asserts that the target is strictly (`===`) equal to `null`.\n   *\n   *     expect(null).to.be.null;\n   *\n   * Add `.not` earlier in the chain to negate `.null`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `null`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.null; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.null;\n   *\n   * @name null\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('null', function () {\n    this.assert(\n        null === flag(this, 'object')\n      , 'expected #{this} to be null'\n      , 'expected #{this} not to be null'\n    );\n  });\n\n  /**\n   * ### .undefined\n   *\n   * Asserts that the target is strictly (`===`) equal to `undefined`.\n   *\n   *     expect(undefined).to.be.undefined;\n   *\n   * Add `.not` earlier in the chain to negate `.undefined`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to `undefined`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.undefined; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.undefined;\n   *\n   * @name undefined\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('undefined', function () {\n    this.assert(\n        undefined === flag(this, 'object')\n      , 'expected #{this} to be undefined'\n      , 'expected #{this} not to be undefined'\n    );\n  });\n\n  /**\n   * ### .NaN\n   *\n   * Asserts that the target is exactly `NaN`.\n   *\n   *     expect(NaN).to.be.NaN;\n   *\n   * Add `.not` earlier in the chain to negate `.NaN`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `NaN`.\n   *\n   *     expect('foo').to.equal('foo'); // Recommended\n   *     expect('foo').to.not.be.NaN; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.NaN;\n   *\n   * @name NaN\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('NaN', function () {\n    this.assert(\n        _.isNaN(flag(this, 'object'))\n        , 'expected #{this} to be NaN'\n        , 'expected #{this} not to be NaN'\n    );\n  });\n\n  /**\n   * ### .exist\n   *\n   * Asserts that the target is not strictly (`===`) equal to either `null` or\n   * `undefined`. However, it's often best to assert that the target is equal to\n   * its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.exist; // Not recommended\n   *\n   *     expect(0).to.equal(0); // Recommended\n   *     expect(0).to.exist; // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.exist`.\n   *\n   *     expect(null).to.be.null; // Recommended\n   *     expect(null).to.not.exist; // Not recommended\n   *\n   *     expect(undefined).to.be.undefined; // Recommended\n   *     expect(undefined).to.not.exist; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(null, 'nooo why fail??').to.exist;\n   *\n   * @name exist\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('exist', function () {\n    var val = flag(this, 'object');\n    this.assert(\n        val !== null && val !== undefined\n      , 'expected #{this} to exist'\n      , 'expected #{this} to not exist'\n    );\n  });\n\n  /**\n   * ### .empty\n   *\n   * When the target is a string or array, `.empty` asserts that the target's\n   * `length` property is strictly (`===`) equal to `0`.\n   *\n   *     expect([]).to.be.empty;\n   *     expect('').to.be.empty;\n   *\n   * When the target is a map or set, `.empty` asserts that the target's `size`\n   * property is strictly equal to `0`.\n   *\n   *     expect(new Set()).to.be.empty;\n   *     expect(new Map()).to.be.empty;\n   *\n   * When the target is a non-function object, `.empty` asserts that the target\n   * doesn't have any own enumerable properties. Properties with Symbol-based\n   * keys are excluded from the count.\n   *\n   *     expect({}).to.be.empty;\n   *\n   * Because `.empty` does different things based on the target's type, it's\n   * important to check the target's type before using `.empty`. See the `.a`\n   * doc for info on testing a target's type.\n   *\n   *     expect([]).to.be.an('array').that.is.empty;\n   *\n   * Add `.not` earlier in the chain to negate `.empty`. However, it's often\n   * best to assert that the target contains its expected number of values,\n   * rather than asserting that it's not empty.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.not.be.empty; // Not recommended\n   *\n   *     expect(new Set([1, 2, 3])).to.have.property('size', 3); // Recommended\n   *     expect(new Set([1, 2, 3])).to.not.be.empty; // Not recommended\n   *\n   *     expect(Object.keys({a: 1})).to.have.lengthOf(1); // Recommended\n   *     expect({a: 1}).to.not.be.empty; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect([1, 2, 3], 'nooo why fail??').to.be.empty;\n   *\n   * @name empty\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('empty', function () {\n    var val = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , flagMsg = flag(this, 'message')\n      , itemsCount;\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    switch (_.type(val).toLowerCase()) {\n      case 'array':\n      case 'string':\n        itemsCount = val.length;\n        break;\n      case 'map':\n      case 'set':\n        itemsCount = val.size;\n        break;\n      case 'weakmap':\n      case 'weakset':\n        throw new AssertionError(\n          flagMsg + '.empty was passed a weak collection',\n          undefined,\n          ssfi\n        );\n      case 'function':\n        var msg = flagMsg + '.empty was passed a function ' + _.getName(val);\n        throw new AssertionError(msg.trim(), undefined, ssfi);\n      default:\n        if (val !== Object(val)) {\n          throw new AssertionError(\n            flagMsg + '.empty was passed non-string primitive ' + _.inspect(val),\n            undefined,\n            ssfi\n          );\n        }\n        itemsCount = Object.keys(val).length;\n    }\n\n    this.assert(\n        0 === itemsCount\n      , 'expected #{this} to be empty'\n      , 'expected #{this} not to be empty'\n    );\n  });\n\n  /**\n   * ### .arguments\n   *\n   * Asserts that the target is an `arguments` object.\n   *\n   *     function test () {\n   *       expect(arguments).to.be.arguments;\n   *     }\n   *\n   *     test();\n   *\n   * Add `.not` earlier in the chain to negate `.arguments`. However, it's often\n   * best to assert which type the target is expected to be, rather than\n   * asserting that its not an `arguments` object.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.arguments; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({}, 'nooo why fail??').to.be.arguments;\n   *\n   * The alias `.Arguments` can be used interchangeably with `.arguments`.\n   *\n   * @name arguments\n   * @alias Arguments\n   * @namespace BDD\n   * @api public\n   */\n\n  function checkArguments () {\n    var obj = flag(this, 'object')\n      , type = _.type(obj);\n    this.assert(\n        'Arguments' === type\n      , 'expected #{this} to be arguments but got ' + type\n      , 'expected #{this} to not be arguments'\n    );\n  }\n\n  Assertion.addProperty('arguments', checkArguments);\n  Assertion.addProperty('Arguments', checkArguments);\n\n  /**\n   * ### .equal(val[, msg])\n   *\n   * Asserts that the target is strictly (`===`) equal to the given `val`.\n   *\n   *     expect(1).to.equal(1);\n   *     expect('foo').to.equal('foo');\n   *\n   * Add `.deep` earlier in the chain to use deep equality instead. See the\n   * `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) equals `{a: 1}`\n   *     expect({a: 1}).to.deep.equal({a: 1});\n   *     expect({a: 1}).to.not.equal({a: 1});\n   *\n   *     // Target array deeply (but not strictly) equals `[1, 2]`\n   *     expect([1, 2]).to.deep.equal([1, 2]);\n   *     expect([1, 2]).to.not.equal([1, 2]);\n   *\n   * Add `.not` earlier in the chain to negate `.equal`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to one of countless unexpected values.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.equal(2); // Not recommended\n   *\n   * `.equal` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.equal(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.equal(2);\n   *\n   * The aliases `.equals` and `eq` can be used interchangeably with `.equal`.\n   *\n   * @name equal\n   * @alias equals\n   * @alias eq\n   * @param {Mixed} val\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEqual (val, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'deep')) {\n      var prevLockSsfi = flag(this, 'lockSsfi');\n      flag(this, 'lockSsfi', true);\n      this.eql(val);\n      flag(this, 'lockSsfi', prevLockSsfi);\n    } else {\n      this.assert(\n          val === obj\n        , 'expected #{this} to equal #{exp}'\n        , 'expected #{this} to not equal #{exp}'\n        , val\n        , this._obj\n        , true\n      );\n    }\n  }\n\n  Assertion.addMethod('equal', assertEqual);\n  Assertion.addMethod('equals', assertEqual);\n  Assertion.addMethod('eq', assertEqual);\n\n  /**\n   * ### .eql(obj[, msg])\n   *\n   * Asserts that the target is deeply equal to the given `obj`. See the\n   * `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object is deeply (but not strictly) equal to {a: 1}\n   *     expect({a: 1}).to.eql({a: 1}).but.not.equal({a: 1});\n   *\n   *     // Target array is deeply (but not strictly) equal to [1, 2]\n   *     expect([1, 2]).to.eql([1, 2]).but.not.equal([1, 2]);\n   *\n   * Add `.not` earlier in the chain to negate `.eql`. However, it's often best\n   * to assert that the target is deeply equal to its expected value, rather\n   * than not deeply equal to one of countless unexpected values.\n   *\n   *     expect({a: 1}).to.eql({a: 1}); // Recommended\n   *     expect({a: 1}).to.not.eql({b: 2}); // Not recommended\n   *\n   * `.eql` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect({a: 1}).to.eql({b: 2}, 'nooo why fail??');\n   *     expect({a: 1}, 'nooo why fail??').to.eql({b: 2});\n   *\n   * The alias `.eqls` can be used interchangeably with `.eql`.\n   *\n   * The `.deep.equal` assertion is almost identical to `.eql` but with one\n   * difference: `.deep.equal` causes deep equality comparisons to also be used\n   * for any other assertions that follow in the chain.\n   *\n   * @name eql\n   * @alias eqls\n   * @param {Mixed} obj\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEql(obj, msg) {\n    if (msg) flag(this, 'message', msg);\n    this.assert(\n        _.eql(obj, flag(this, 'object'))\n      , 'expected #{this} to deeply equal #{exp}'\n      , 'expected #{this} to not deeply equal #{exp}'\n      , obj\n      , this._obj\n      , true\n    );\n  }\n\n  Assertion.addMethod('eql', assertEql);\n  Assertion.addMethod('eqls', assertEql);\n\n  /**\n   * ### .above(n[, msg])\n   *\n   * Asserts that the target is a number or a date greater than the given number or date `n` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.above(1); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.above(2); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.above(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.above`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(1).to.not.be.above(2); // Not recommended\n   *\n   * `.above` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.above(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.above(2);\n   *\n   * The aliases `.gt` and `.greaterThan` can be used interchangeably with\n   * `.above`.\n   *\n   * @name above\n   * @alias gt\n   * @alias greaterThan\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertAbove (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to above must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to above must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount > n\n        , 'expected #{this} to have a ' + descriptor + ' above #{exp} but got #{act}'\n        , 'expected #{this} to not have a ' + descriptor + ' above #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj > n\n        , 'expected #{this} to be above #{exp}'\n        , 'expected #{this} to be at most #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('above', assertAbove);\n  Assertion.addMethod('gt', assertAbove);\n  Assertion.addMethod('greaterThan', assertAbove);\n\n  /**\n   * ### .least(n[, msg])\n   *\n   * Asserts that the target is a number or a date greater than or equal to the given\n   * number or date `n` respectively. However, it's often best to assert that the target is equal to\n   * its expected value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.at.least(1); // Not recommended\n   *     expect(2).to.be.at.least(2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than or equal to the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.at.least(2); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.at.least(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.least`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.at.least(2); // Not recommended\n   *\n   * `.least` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.at.least(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.at.least(2);\n   *\n   * The alias `.gte` can be used interchangeably with `.least`.\n   *\n   * @name least\n   * @alias gte\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLeast (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to least must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to least must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount >= n\n        , 'expected #{this} to have a ' + descriptor + ' at least #{exp} but got #{act}'\n        , 'expected #{this} to have a ' + descriptor + ' below #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj >= n\n        , 'expected #{this} to be at least #{exp}'\n        , 'expected #{this} to be below #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('least', assertLeast);\n  Assertion.addMethod('gte', assertLeast);\n\n  /**\n   * ### .below(n[, msg])\n   *\n   * Asserts that the target is a number or a date less than the given number or date `n` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.below(2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is less than the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.below(4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.length(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.below(4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.below`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.be.below(1); // Not recommended\n   *\n   * `.below` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(2).to.be.below(1, 'nooo why fail??');\n   *     expect(2, 'nooo why fail??').to.be.below(1);\n   *\n   * The aliases `.lt` and `.lessThan` can be used interchangeably with\n   * `.below`.\n   *\n   * @name below\n   * @alias lt\n   * @alias lessThan\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertBelow (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to below must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to below must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount < n\n        , 'expected #{this} to have a ' + descriptor + ' below #{exp} but got #{act}'\n        , 'expected #{this} to not have a ' + descriptor + ' below #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj < n\n        , 'expected #{this} to be below #{exp}'\n        , 'expected #{this} to be at least #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('below', assertBelow);\n  Assertion.addMethod('lt', assertBelow);\n  Assertion.addMethod('lessThan', assertBelow);\n\n  /**\n   * ### .most(n[, msg])\n   *\n   * Asserts that the target is a number or a date less than or equal to the given number\n   * or date `n` respectively. However, it's often best to assert that the target is equal to its\n   * expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.at.most(2); // Not recommended\n   *     expect(1).to.be.at.most(1); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is less than or equal to the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.at.most(4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.at.most(4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.most`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.be.at.most(1); // Not recommended\n   *\n   * `.most` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(2).to.be.at.most(1, 'nooo why fail??');\n   *     expect(2, 'nooo why fail??').to.be.at.most(1);\n   *\n   * The alias `.lte` can be used interchangeably with `.most`.\n   *\n   * @name most\n   * @alias lte\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertMost (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to most must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to most must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount <= n\n        , 'expected #{this} to have a ' + descriptor + ' at most #{exp} but got #{act}'\n        , 'expected #{this} to have a ' + descriptor + ' above #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj <= n\n        , 'expected #{this} to be at most #{exp}'\n        , 'expected #{this} to be above #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('most', assertMost);\n  Assertion.addMethod('lte', assertMost);\n\n  /**\n   * ### .within(start, finish[, msg])\n   *\n   * Asserts that the target is a number or a date greater than or equal to the given\n   * number or date `start`, and less than or equal to the given number or date `finish` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.within(1, 3); // Not recommended\n   *     expect(2).to.be.within(2, 3); // Not recommended\n   *     expect(2).to.be.within(1, 2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than or equal to the given number `start`, and less\n   * than or equal to the given number `finish`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.within(2, 4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.within(2, 4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.within`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.within(2, 4); // Not recommended\n   *\n   * `.within` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(4).to.be.within(1, 3, 'nooo why fail??');\n   *     expect(4, 'nooo why fail??').to.be.within(1, 3);\n   *\n   * @name within\n   * @param {Number} start lower bound inclusive\n   * @param {Number} finish upper bound inclusive\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('within', function (start, finish, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , startType = _.type(start).toLowerCase()\n      , finishType = _.type(finish).toLowerCase()\n      , errorMessage\n      , shouldThrow = true\n      , range = (startType === 'date' && finishType === 'date')\n          ? start.toUTCString() + '..' + finish.toUTCString()\n          : start + '..' + finish;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && (startType !== 'date' || finishType !== 'date'))) {\n      errorMessage = msgPrefix + 'the arguments to within must be dates';\n    } else if ((startType !== 'number' || finishType !== 'number') && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the arguments to within must be numbers';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount >= start && itemsCount <= finish\n        , 'expected #{this} to have a ' + descriptor + ' within ' + range\n        , 'expected #{this} to not have a ' + descriptor + ' within ' + range\n      );\n    } else {\n      this.assert(\n          obj >= start && obj <= finish\n        , 'expected #{this} to be within ' + range\n        , 'expected #{this} to not be within ' + range\n      );\n    }\n  });\n\n  /**\n   * ### .instanceof(constructor[, msg])\n   *\n   * Asserts that the target is an instance of the given `constructor`.\n   *\n   *     function Cat () { }\n   *\n   *     expect(new Cat()).to.be.an.instanceof(Cat);\n   *     expect([1, 2]).to.be.an.instanceof(Array);\n   *\n   * Add `.not` earlier in the chain to negate `.instanceof`.\n   *\n   *     expect({a: 1}).to.not.be.an.instanceof(Array);\n   *\n   * `.instanceof` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1).to.be.an.instanceof(Array, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.an.instanceof(Array);\n   *\n   * Due to limitations in ES5, `.instanceof` may not always work as expected\n   * when using a transpiler such as Babel or TypeScript. In particular, it may\n   * produce unexpected results when subclassing built-in object such as\n   * `Array`, `Error`, and `Map`. See your transpiler's docs for details:\n   *\n   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n   *\n   * The alias `.instanceOf` can be used interchangeably with `.instanceof`.\n   *\n   * @name instanceof\n   * @param {Constructor} constructor\n   * @param {String} msg _optional_\n   * @alias instanceOf\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertInstanceOf (constructor, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var target = flag(this, 'object')\n    var ssfi = flag(this, 'ssfi');\n    var flagMsg = flag(this, 'message');\n\n    try {\n      var isInstanceOf = target instanceof constructor;\n    } catch (err) {\n      if (err instanceof TypeError) {\n        flagMsg = flagMsg ? flagMsg + ': ' : '';\n        throw new AssertionError(\n          flagMsg + 'The instanceof assertion needs a constructor but '\n            + _.type(constructor) + ' was given.',\n          undefined,\n          ssfi\n        );\n      }\n      throw err;\n    }\n\n    var name = _.getName(constructor);\n    if (name === null) {\n      name = 'an unnamed constructor';\n    }\n\n    this.assert(\n        isInstanceOf\n      , 'expected #{this} to be an instance of ' + name\n      , 'expected #{this} to not be an instance of ' + name\n    );\n  };\n\n  Assertion.addMethod('instanceof', assertInstanceOf);\n  Assertion.addMethod('instanceOf', assertInstanceOf);\n\n  /**\n   * ### .property(name[, val[, msg]])\n   *\n   * Asserts that the target has a property with the given key `name`.\n   *\n   *     expect({a: 1}).to.have.property('a');\n   *\n   * When `val` is provided, `.property` also asserts that the property's value\n   * is equal to the given `val`.\n   *\n   *     expect({a: 1}).to.have.property('a', 1);\n   *\n   * By default, strict (`===`) equality is used. Add `.deep` earlier in the\n   * chain to use deep equality instead. See the `deep-eql` project page for\n   * info on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) has property `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n   *\n   * The target's enumerable and non-enumerable properties are always included\n   * in the search. By default, both own and inherited properties are included.\n   * Add `.own` earlier in the chain to exclude inherited properties from the\n   * search.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.have.own.property('a');\n   *     expect({a: 1}).to.have.own.property('a', 1);\n   *     expect({a: 1}).to.have.property('b');\n   *     expect({a: 1}).to.not.have.own.property('b');\n   *\n   * `.deep` and `.own` can be combined.\n   *\n   *     expect({x: {a: 1}}).to.have.deep.own.property('x', {a: 1});\n   *\n   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when\n   * referencing nested properties.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]', 'y');\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n   *\n   * `.deep` and `.nested` can be combined.\n   *\n   *     expect({a: {b: [{c: 3}]}})\n   *       .to.have.deep.nested.property('a.b[0]', {c: 3});\n   *\n   * `.own` and `.nested` cannot be combined.\n   *\n   * Add `.not` earlier in the chain to negate `.property`.\n   *\n   *     expect({a: 1}).to.not.have.property('b');\n   *\n   * However, it's dangerous to negate `.property` when providing `val`. The\n   * problem is that it creates uncertain expectations by asserting that the\n   * target either doesn't have a property with the given key `name`, or that it\n   * does have a property with the given key `name` but its value isn't equal to\n   * the given `val`. It's often best to identify the exact output that's\n   * expected, and then write an assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to have a property with the given key\n   * `name`, it's often best to assert exactly that.\n   *\n   *     expect({b: 2}).to.not.have.property('a'); // Recommended\n   *     expect({b: 2}).to.not.have.property('a', 1); // Not recommended\n   *\n   * When the target is expected to have a property with the given key `name`,\n   * it's often best to assert that the property has its expected value, rather\n   * than asserting that it doesn't have one of many unexpected values.\n   *\n   *     expect({a: 3}).to.have.property('a', 3); // Recommended\n   *     expect({a: 3}).to.not.have.property('a', 1); // Not recommended\n   *\n   * `.property` changes the target of any assertions that follow in the chain\n   * to be the value of the property from the original target object.\n   *\n   *     expect({a: 1}).to.have.property('a').that.is.a('number');\n   *\n   * `.property` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing `val`, only use the\n   * second form.\n   *\n   *     // Recommended\n   *     expect({a: 1}).to.have.property('a', 2, 'nooo why fail??');\n   *     expect({a: 1}, 'nooo why fail??').to.have.property('a', 2);\n   *     expect({a: 1}, 'nooo why fail??').to.have.property('b');\n   *\n   *     // Not recommended\n   *     expect({a: 1}).to.have.property('b', undefined, 'nooo why fail??');\n   *\n   * The above assertion isn't the same thing as not providing `val`. Instead,\n   * it's asserting that the target object has a `b` property that's equal to\n   * `undefined`.\n   *\n   * The assertions `.ownProperty` and `.haveOwnProperty` can be used\n   * interchangeably with `.own.property`.\n   *\n   * @name property\n   * @param {String} name\n   * @param {Mixed} val (optional)\n   * @param {String} msg _optional_\n   * @returns value of property for chaining\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertProperty (name, val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var isNested = flag(this, 'nested')\n      , isOwn = flag(this, 'own')\n      , flagMsg = flag(this, 'message')\n      , obj = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , nameType = typeof name;\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    if (isNested) {\n      if (nameType !== 'string') {\n        throw new AssertionError(\n          flagMsg + 'the argument to property must be a string when using nested syntax',\n          undefined,\n          ssfi\n        );\n      }\n    } else {\n      if (nameType !== 'string' && nameType !== 'number' && nameType !== 'symbol') {\n        throw new AssertionError(\n          flagMsg + 'the argument to property must be a string, number, or symbol',\n          undefined,\n          ssfi\n        );\n      }\n    }\n\n    if (isNested && isOwn) {\n      throw new AssertionError(\n        flagMsg + 'The \"nested\" and \"own\" flags cannot be combined.',\n        undefined,\n        ssfi\n      );\n    }\n\n    if (obj === null || obj === undefined) {\n      throw new AssertionError(\n        flagMsg + 'Target cannot be null or undefined.',\n        undefined,\n        ssfi\n      );\n    }\n\n    var isDeep = flag(this, 'deep')\n      , negate = flag(this, 'negate')\n      , pathInfo = isNested ? _.getPathInfo(obj, name) : null\n      , value = isNested ? pathInfo.value : obj[name];\n\n    var descriptor = '';\n    if (isDeep) descriptor += 'deep ';\n    if (isOwn) descriptor += 'own ';\n    if (isNested) descriptor += 'nested ';\n    descriptor += 'property ';\n\n    var hasProperty;\n    if (isOwn) hasProperty = Object.prototype.hasOwnProperty.call(obj, name);\n    else if (isNested) hasProperty = pathInfo.exists;\n    else hasProperty = _.hasProperty(obj, name);\n\n    // When performing a negated assertion for both name and val, merely having\n    // a property with the given name isn't enough to cause the assertion to\n    // fail. It must both have a property with the given name, and the value of\n    // that property must equal the given val. Therefore, skip this assertion in\n    // favor of the next.\n    if (!negate || arguments.length === 1) {\n      this.assert(\n          hasProperty\n        , 'expected #{this} to have ' + descriptor + _.inspect(name)\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name));\n    }\n\n    if (arguments.length > 1) {\n      this.assert(\n          hasProperty && (isDeep ? _.eql(val, value) : val === value)\n        , 'expected #{this} to have ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name) + ' of #{act}'\n        , val\n        , value\n      );\n    }\n\n    flag(this, 'object', value);\n  }\n\n  Assertion.addMethod('property', assertProperty);\n\n  function assertOwnProperty (name, value, msg) {\n    flag(this, 'own', true);\n    assertProperty.apply(this, arguments);\n  }\n\n  Assertion.addMethod('ownProperty', assertOwnProperty);\n  Assertion.addMethod('haveOwnProperty', assertOwnProperty);\n\n  /**\n   * ### .ownPropertyDescriptor(name[, descriptor[, msg]])\n   *\n   * Asserts that the target has its own property descriptor with the given key\n   * `name`. Enumerable and non-enumerable properties are included in the\n   * search.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a');\n   *\n   * When `descriptor` is provided, `.ownPropertyDescriptor` also asserts that\n   * the property's descriptor is deeply equal to the given `descriptor`. See\n   * the `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * Add `.not` earlier in the chain to negate `.ownPropertyDescriptor`.\n   *\n   *     expect({a: 1}).to.not.have.ownPropertyDescriptor('b');\n   *\n   * However, it's dangerous to negate `.ownPropertyDescriptor` when providing\n   * a `descriptor`. The problem is that it creates uncertain expectations by\n   * asserting that the target either doesn't have a property descriptor with\n   * the given key `name`, or that it does have a property descriptor with the\n   * given key `name` but its not deeply equal to the given `descriptor`. It's\n   * often best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to have a property descriptor with the given\n   * key `name`, it's often best to assert exactly that.\n   *\n   *     // Recommended\n   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a');\n   *\n   *     // Not recommended\n   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * When the target is expected to have a property descriptor with the given\n   * key `name`, it's often best to assert that the property has its expected\n   * descriptor, rather than asserting that it doesn't have one of many\n   * unexpected descriptors.\n   *\n   *     // Recommended\n   *     expect({a: 3}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 3,\n   *     });\n   *\n   *     // Not recommended\n   *     expect({a: 3}).to.not.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * `.ownPropertyDescriptor` changes the target of any assertions that follow\n   * in the chain to be the value of the property descriptor from the original\n   * target object.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a')\n   *       .that.has.property('enumerable', true);\n   *\n   * `.ownPropertyDescriptor` accepts an optional `msg` argument which is a\n   * custom error message to show when the assertion fails. The message can also\n   * be given as the second argument to `expect`. When not providing\n   * `descriptor`, only use the second form.\n   *\n   *     // Recommended\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 2,\n   *     }, 'nooo why fail??');\n   *\n   *     // Recommended\n   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 2,\n   *     });\n   *\n   *     // Recommended\n   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('b');\n   *\n   *     // Not recommended\n   *     expect({a: 1})\n   *       .to.have.ownPropertyDescriptor('b', undefined, 'nooo why fail??');\n   *\n   * The above assertion isn't the same thing as not providing `descriptor`.\n   * Instead, it's asserting that the target object has a `b` property\n   * descriptor that's deeply equal to `undefined`.\n   *\n   * The alias `.haveOwnPropertyDescriptor` can be used interchangeably with\n   * `.ownPropertyDescriptor`.\n   *\n   * @name ownPropertyDescriptor\n   * @alias haveOwnPropertyDescriptor\n   * @param {String} name\n   * @param {Object} descriptor _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertOwnPropertyDescriptor (name, descriptor, msg) {\n    if (typeof descriptor === 'string') {\n      msg = descriptor;\n      descriptor = null;\n    }\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);\n    if (actualDescriptor && descriptor) {\n      this.assert(\n          _.eql(descriptor, actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor)\n        , descriptor\n        , actualDescriptor\n        , true\n      );\n    } else {\n      this.assert(\n          actualDescriptor\n        , 'expected #{this} to have an own property descriptor for ' + _.inspect(name)\n        , 'expected #{this} to not have an own property descriptor for ' + _.inspect(name)\n      );\n    }\n    flag(this, 'object', actualDescriptor);\n  }\n\n  Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);\n  Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);\n\n  /**\n   * ### .lengthOf(n[, msg])\n   *\n   * Asserts that the target's `length` or `size` is equal to the given number\n   * `n`.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3);\n   *     expect('foo').to.have.lengthOf(3);\n   *     expect(new Set([1, 2, 3])).to.have.lengthOf(3);\n   *     expect(new Map([['a', 1], ['b', 2], ['c', 3]])).to.have.lengthOf(3);\n   *\n   * Add `.not` earlier in the chain to negate `.lengthOf`. However, it's often\n   * best to assert that the target's `length` property is equal to its expected\n   * value, rather than not equal to one of many unexpected values.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.not.have.lengthOf(4); // Not recommended\n   *\n   * `.lengthOf` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(2, 'nooo why fail??');\n   *     expect([1, 2, 3], 'nooo why fail??').to.have.lengthOf(2);\n   *\n   * `.lengthOf` can also be used as a language chain, causing all `.above`,\n   * `.below`, `.least`, `.most`, and `.within` assertions that follow in the\n   * chain to use the target's `length` property as the target. However, it's\n   * often best to assert that the target's `length` property is equal to its\n   * expected length, rather than asserting that its `length` property falls\n   * within some range of values.\n   *\n   *     // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf(3);\n   *\n   *     // Not recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.above(2);\n   *     expect([1, 2, 3]).to.have.lengthOf.below(4);\n   *     expect([1, 2, 3]).to.have.lengthOf.at.least(3);\n   *     expect([1, 2, 3]).to.have.lengthOf.at.most(3);\n   *     expect([1, 2, 3]).to.have.lengthOf.within(2,4);\n   *\n   * Due to a compatibility issue, the alias `.length` can't be chained directly\n   * off of an uninvoked method such as `.a`. Therefore, `.length` can't be used\n   * interchangeably with `.lengthOf` in every situation. It's recommended to\n   * always use `.lengthOf` instead of `.length`.\n   *\n   *     expect([1, 2, 3]).to.have.a.length(3); // incompatible; throws error\n   *     expect([1, 2, 3]).to.have.a.lengthOf(3);  // passes as expected\n   *\n   * @name lengthOf\n   * @alias length\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLengthChain () {\n    flag(this, 'doLength', true);\n  }\n\n  function assertLength (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , objType = _.type(obj).toLowerCase()\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi')\n      , descriptor = 'length'\n      , itemsCount;\n\n    switch (objType) {\n      case 'map':\n      case 'set':\n        descriptor = 'size';\n        itemsCount = obj.size;\n        break;\n      default:\n        new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n        itemsCount = obj.length;\n    }\n\n    this.assert(\n        itemsCount == n\n      , 'expected #{this} to have a ' + descriptor + ' of #{exp} but got #{act}'\n      , 'expected #{this} to not have a ' + descriptor + ' of #{act}'\n      , n\n      , itemsCount\n    );\n  }\n\n  Assertion.addChainableMethod('length', assertLength, assertLengthChain);\n  Assertion.addChainableMethod('lengthOf', assertLength, assertLengthChain);\n\n  /**\n   * ### .match(re[, msg])\n   *\n   * Asserts that the target matches the given regular expression `re`.\n   *\n   *     expect('foobar').to.match(/^foo/);\n   *\n   * Add `.not` earlier in the chain to negate `.match`.\n   *\n   *     expect('foobar').to.not.match(/taco/);\n   *\n   * `.match` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect('foobar').to.match(/taco/, 'nooo why fail??');\n   *     expect('foobar', 'nooo why fail??').to.match(/taco/);\n   *\n   * The alias `.matches` can be used interchangeably with `.match`.\n   *\n   * @name match\n   * @alias matches\n   * @param {RegExp} re\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n  function assertMatch(re, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    this.assert(\n        re.exec(obj)\n      , 'expected #{this} to match ' + re\n      , 'expected #{this} not to match ' + re\n    );\n  }\n\n  Assertion.addMethod('match', assertMatch);\n  Assertion.addMethod('matches', assertMatch);\n\n  /**\n   * ### .string(str[, msg])\n   *\n   * Asserts that the target string contains the given substring `str`.\n   *\n   *     expect('foobar').to.have.string('bar');\n   *\n   * Add `.not` earlier in the chain to negate `.string`.\n   *\n   *     expect('foobar').to.not.have.string('taco');\n   *\n   * `.string` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect('foobar').to.have.string('taco', 'nooo why fail??');\n   *     expect('foobar', 'nooo why fail??').to.have.string('taco');\n   *\n   * @name string\n   * @param {String} str\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('string', function (str, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(obj, flagMsg, ssfi, true).is.a('string');\n\n    this.assert(\n        ~obj.indexOf(str)\n      , 'expected #{this} to contain ' + _.inspect(str)\n      , 'expected #{this} to not contain ' + _.inspect(str)\n    );\n  });\n\n  /**\n   * ### .keys(key1[, key2[, ...]])\n   *\n   * Asserts that the target object, array, map, or set has the given keys. Only\n   * the target's own inherited properties are included in the search.\n   *\n   * When the target is an object or array, keys can be provided as one or more\n   * string arguments, a single array argument, or a single object argument. In\n   * the latter case, only the keys in the given object matter; the values are\n   * ignored.\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *     expect(['x', 'y']).to.have.all.keys(0, 1);\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys(['a', 'b']);\n   *     expect(['x', 'y']).to.have.all.keys([0, 1]);\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys({a: 4, b: 5}); // ignore 4 and 5\n   *     expect(['x', 'y']).to.have.all.keys({0: 4, 1: 5}); // ignore 4 and 5\n   *\n   * When the target is a map or set, each key must be provided as a separate\n   * argument.\n   *\n   *     expect(new Map([['a', 1], ['b', 2]])).to.have.all.keys('a', 'b');\n   *     expect(new Set(['a', 'b'])).to.have.all.keys('a', 'b');\n   *\n   * Because `.keys` does different things based on the target's type, it's\n   * important to check the target's type before using `.keys`. See the `.a` doc\n   * for info on testing a target's type.\n   *\n   *     expect({a: 1, b: 2}).to.be.an('object').that.has.all.keys('a', 'b');\n   *\n   * By default, strict (`===`) equality is used to compare keys of maps and\n   * sets. Add `.deep` earlier in the chain to use deep equality instead. See\n   * the `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target set deeply (but not strictly) has key `{a: 1}`\n   *     expect(new Set([{a: 1}])).to.have.all.deep.keys([{a: 1}]);\n   *     expect(new Set([{a: 1}])).to.not.have.all.keys([{a: 1}]);\n   *\n   * By default, the target must have all of the given keys and no more. Add\n   * `.any` earlier in the chain to only require that the target have at least\n   * one of the given keys. Also, add `.not` earlier in the chain to negate\n   * `.keys`. It's often best to add `.any` when negating `.keys`, and to use\n   * `.all` when asserting `.keys` without negation.\n   *\n   * When negating `.keys`, `.any` is preferred because `.not.any.keys` asserts\n   * exactly what's expected of the output, whereas `.not.all.keys` creates\n   * uncertain expectations.\n   *\n   *     // Recommended; asserts that target doesn't have any of the given keys\n   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n   *\n   *     // Not recommended; asserts that target doesn't have all of the given\n   *     // keys but may or may not have some of them\n   *     expect({a: 1, b: 2}).to.not.have.all.keys('c', 'd');\n   *\n   * When asserting `.keys` without negation, `.all` is preferred because\n   * `.all.keys` asserts exactly what's expected of the output, whereas\n   * `.any.keys` creates uncertain expectations.\n   *\n   *     // Recommended; asserts that target has all the given keys\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *\n   *     // Not recommended; asserts that target has at least one of the given\n   *     // keys but may or may not have more of them\n   *     expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\n   *\n   * Note that `.all` is used by default when neither `.all` nor `.any` appear\n   * earlier in the chain. However, it's often best to add `.all` anyway because\n   * it improves readability.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b'); // Recommended\n   *     expect({a: 1, b: 2}).to.have.keys('a', 'b'); // Not recommended\n   *\n   * Add `.include` earlier in the chain to require that the target's keys be a\n   * superset of the expected keys, rather than identical sets.\n   *\n   *     // Target object's keys are a superset of ['a', 'b'] but not identical\n   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n   *\n   * However, if `.any` and `.include` are combined, only the `.any` takes\n   * effect. The `.include` is ignored in this case.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1}).to.have.any.keys('a', 'b');\n   *     expect({a: 1}).to.include.any.keys('a', 'b');\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.have.key('b');\n   *\n   * The alias `.key` can be used interchangeably with `.keys`.\n   *\n   * @name keys\n   * @alias key\n   * @param {...String|Array|Object} keys\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertKeys (keys) {\n    var obj = flag(this, 'object')\n      , objType = _.type(obj)\n      , keysType = _.type(keys)\n      , ssfi = flag(this, 'ssfi')\n      , isDeep = flag(this, 'deep')\n      , str\n      , deepStr = ''\n      , actual\n      , ok = true\n      , flagMsg = flag(this, 'message');\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n    var mixedArgsMsg = flagMsg + 'when testing keys against an object or an array you must give a single Array|Object|String argument or multiple String arguments';\n\n    if (objType === 'Map' || objType === 'Set') {\n      deepStr = isDeep ? 'deeply ' : '';\n      actual = [];\n\n      // Map and Set '.keys' aren't supported in IE 11. Therefore, use .forEach.\n      obj.forEach(function (val, key) { actual.push(key) });\n\n      if (keysType !== 'Array') {\n        keys = Array.prototype.slice.call(arguments);\n      }\n    } else {\n      actual = _.getOwnEnumerableProperties(obj);\n\n      switch (keysType) {\n        case 'Array':\n          if (arguments.length > 1) {\n            throw new AssertionError(mixedArgsMsg, undefined, ssfi);\n          }\n          break;\n        case 'Object':\n          if (arguments.length > 1) {\n            throw new AssertionError(mixedArgsMsg, undefined, ssfi);\n          }\n          keys = Object.keys(keys);\n          break;\n        default:\n          keys = Array.prototype.slice.call(arguments);\n      }\n\n      // Only stringify non-Symbols because Symbols would become \"Symbol()\"\n      keys = keys.map(function (val) {\n        return typeof val === 'symbol' ? val : String(val);\n      });\n    }\n\n    if (!keys.length) {\n      throw new AssertionError(flagMsg + 'keys required', undefined, ssfi);\n    }\n\n    var len = keys.length\n      , any = flag(this, 'any')\n      , all = flag(this, 'all')\n      , expected = keys;\n\n    if (!any && !all) {\n      all = true;\n    }\n\n    // Has any\n    if (any) {\n      ok = expected.some(function(expectedKey) {\n        return actual.some(function(actualKey) {\n          if (isDeep) {\n            return _.eql(expectedKey, actualKey);\n          } else {\n            return expectedKey === actualKey;\n          }\n        });\n      });\n    }\n\n    // Has all\n    if (all) {\n      ok = expected.every(function(expectedKey) {\n        return actual.some(function(actualKey) {\n          if (isDeep) {\n            return _.eql(expectedKey, actualKey);\n          } else {\n            return expectedKey === actualKey;\n          }\n        });\n      });\n\n      if (!flag(this, 'contains')) {\n        ok = ok && keys.length == actual.length;\n      }\n    }\n\n    // Key string\n    if (len > 1) {\n      keys = keys.map(function(key) {\n        return _.inspect(key);\n      });\n      var last = keys.pop();\n      if (all) {\n        str = keys.join(', ') + ', and ' + last;\n      }\n      if (any) {\n        str = keys.join(', ') + ', or ' + last;\n      }\n    } else {\n      str = _.inspect(keys[0]);\n    }\n\n    // Form\n    str = (len > 1 ? 'keys ' : 'key ') + str;\n\n    // Have / include\n    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;\n\n    // Assertion\n    this.assert(\n        ok\n      , 'expected #{this} to ' + deepStr + str\n      , 'expected #{this} to not ' + deepStr + str\n      , expected.slice(0).sort(_.compareByInspect)\n      , actual.sort(_.compareByInspect)\n      , true\n    );\n  }\n\n  Assertion.addMethod('keys', assertKeys);\n  Assertion.addMethod('key', assertKeys);\n\n  /**\n   * ### .throw([errorLike], [errMsgMatcher], [msg])\n   *\n   * When no arguments are provided, `.throw` invokes the target function and\n   * asserts that an error is thrown.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw();\n   *\n   * When one argument is provided, and it's an error constructor, `.throw`\n   * invokes the target function and asserts that an error is thrown that's an\n   * instance of that error constructor.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(TypeError);\n   *\n   * When one argument is provided, and it's an error instance, `.throw` invokes\n   * the target function and asserts that an error is thrown that's strictly\n   * (`===`) equal to that error instance.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(err);\n   *\n   * When one argument is provided, and it's a string, `.throw` invokes the\n   * target function and asserts that an error is thrown with a message that\n   * contains that string.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw('salmon');\n   *\n   * When one argument is provided, and it's a regular expression, `.throw`\n   * invokes the target function and asserts that an error is thrown with a\n   * message that matches that regular expression.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(/salmon/);\n   *\n   * When two arguments are provided, and the first is an error instance or\n   * constructor, and the second is a string or regular expression, `.throw`\n   * invokes the function and asserts that an error is thrown that fulfills both\n   * conditions as described above.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(TypeError, 'salmon');\n   *     expect(badFn).to.throw(TypeError, /salmon/);\n   *     expect(badFn).to.throw(err, 'salmon');\n   *     expect(badFn).to.throw(err, /salmon/);\n   *\n   * Add `.not` earlier in the chain to negate `.throw`.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.not.throw();\n   *\n   * However, it's dangerous to negate `.throw` when providing any arguments.\n   * The problem is that it creates uncertain expectations by asserting that the\n   * target either doesn't throw an error, or that it throws an error but of a\n   * different type than the given type, or that it throws an error of the given\n   * type but with a message that doesn't include the given string. It's often\n   * best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to throw an error, it's often best to assert\n   * exactly that.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.not.throw(); // Recommended\n   *     expect(goodFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n   *\n   * When the target is expected to throw an error, it's often best to assert\n   * that the error is of its expected type, and has a message that includes an\n   * expected string, rather than asserting that it doesn't have one of many\n   * unexpected types, and doesn't have a message that includes some string.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(TypeError, 'salmon'); // Recommended\n   *     expect(badFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n   *\n   * `.throw` changes the target of any assertions that follow in the chain to\n   * be the error object that's thrown.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     err.code = 42;\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(TypeError).with.property('code', 42);\n   *\n   * `.throw` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`. When not providing two arguments, always use\n   * the second form.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.throw(TypeError, 'x', 'nooo why fail??');\n   *     expect(goodFn, 'nooo why fail??').to.throw();\n   *\n   * Due to limitations in ES5, `.throw` may not always work as expected when\n   * using a transpiler such as Babel or TypeScript. In particular, it may\n   * produce unexpected results when subclassing the built-in `Error` object and\n   * then passing the subclassed constructor to `.throw`. See your transpiler's\n   * docs for details:\n   *\n   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n   *\n   * Beware of some common mistakes when using the `throw` assertion. One common\n   * mistake is to accidentally invoke the function yourself instead of letting\n   * the `throw` assertion invoke the function for you. For example, when\n   * testing if a function named `fn` throws, provide `fn` instead of `fn()` as\n   * the target for the assertion.\n   *\n   *     expect(fn).to.throw();     // Good! Tests `fn` as desired\n   *     expect(fn()).to.throw();   // Bad! Tests result of `fn()`, not `fn`\n   *\n   * If you need to assert that your function `fn` throws when passed certain\n   * arguments, then wrap a call to `fn` inside of another function.\n   *\n   *     expect(function () { fn(42); }).to.throw();  // Function expression\n   *     expect(() => fn(42)).to.throw();             // ES6 arrow function\n   *\n   * Another common mistake is to provide an object method (or any stand-alone\n   * function that relies on `this`) as the target of the assertion. Doing so is\n   * problematic because the `this` context will be lost when the function is\n   * invoked by `.throw`; there's no way for it to know what `this` is supposed\n   * to be. There are two ways around this problem. One solution is to wrap the\n   * method or function call inside of another function. Another solution is to\n   * use `bind`.\n   *\n   *     expect(function () { cat.meow(); }).to.throw();  // Function expression\n   *     expect(() => cat.meow()).to.throw();             // ES6 arrow function\n   *     expect(cat.meow.bind(cat)).to.throw();           // Bind\n   *\n   * Finally, it's worth mentioning that it's a best practice in JavaScript to\n   * only throw `Error` and derivatives of `Error` such as `ReferenceError`,\n   * `TypeError`, and user-defined objects that extend `Error`. No other type of\n   * value will generate a stack trace when initialized. With that said, the\n   * `throw` assertion does technically support any type of value being thrown,\n   * not just `Error` and its derivatives.\n   *\n   * The aliases `.throws` and `.Throw` can be used interchangeably with\n   * `.throw`.\n   *\n   * @name throw\n   * @alias throws\n   * @alias Throw\n   * @param {Error|ErrorConstructor} errorLike\n   * @param {String|RegExp} errMsgMatcher error message\n   * @param {String} msg _optional_\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @returns error for chaining (null if no error)\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertThrows (errorLike, errMsgMatcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , flagMsg = flag(this, 'message')\n      , negate = flag(this, 'negate') || false;\n    new Assertion(obj, flagMsg, ssfi, true).is.a('function');\n\n    if (errorLike instanceof RegExp || typeof errorLike === 'string') {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    var caughtErr;\n    try {\n      obj();\n    } catch (err) {\n      caughtErr = err;\n    }\n\n    // If we have the negate flag enabled and at least one valid argument it means we do expect an error\n    // but we want it to match a given set of criteria\n    var everyArgIsUndefined = errorLike === undefined && errMsgMatcher === undefined;\n\n    // If we've got the negate flag enabled and both args, we should only fail if both aren't compatible\n    // See Issue #551 and PR #683@GitHub\n    var everyArgIsDefined = Boolean(errorLike && errMsgMatcher);\n    var errorLikeFail = false;\n    var errMsgMatcherFail = false;\n\n    // Checking if error was thrown\n    if (everyArgIsUndefined || !everyArgIsUndefined && !negate) {\n      // We need this to display results correctly according to their types\n      var errorLikeString = 'an error';\n      if (errorLike instanceof Error) {\n        errorLikeString = '#{exp}';\n      } else if (errorLike) {\n        errorLikeString = _.checkError.getConstructorName(errorLike);\n      }\n\n      this.assert(\n          caughtErr\n        , 'expected #{this} to throw ' + errorLikeString\n        , 'expected #{this} to not throw an error but #{act} was thrown'\n        , errorLike && errorLike.toString()\n        , (caughtErr instanceof Error ?\n            caughtErr.toString() : (typeof caughtErr === 'string' ? caughtErr : caughtErr &&\n                                    _.checkError.getConstructorName(caughtErr)))\n      );\n    }\n\n    if (errorLike && caughtErr) {\n      // We should compare instances only if `errorLike` is an instance of `Error`\n      if (errorLike instanceof Error) {\n        var isCompatibleInstance = _.checkError.compatibleInstance(caughtErr, errorLike);\n\n        if (isCompatibleInstance === negate) {\n          // These checks were created to ensure we won't fail too soon when we've got both args and a negate\n          // See Issue #551 and PR #683@GitHub\n          if (everyArgIsDefined && negate) {\n            errorLikeFail = true;\n          } else {\n            this.assert(\n                negate\n              , 'expected #{this} to throw #{exp} but #{act} was thrown'\n              , 'expected #{this} to not throw #{exp}' + (caughtErr && !negate ? ' but #{act} was thrown' : '')\n              , errorLike.toString()\n              , caughtErr.toString()\n            );\n          }\n        }\n      }\n\n      var isCompatibleConstructor = _.checkError.compatibleConstructor(caughtErr, errorLike);\n      if (isCompatibleConstructor === negate) {\n        if (everyArgIsDefined && negate) {\n            errorLikeFail = true;\n        } else {\n          this.assert(\n              negate\n            , 'expected #{this} to throw #{exp} but #{act} was thrown'\n            , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')\n            , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))\n            , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))\n          );\n        }\n      }\n    }\n\n    if (caughtErr && errMsgMatcher !== undefined && errMsgMatcher !== null) {\n      // Here we check compatible messages\n      var placeholder = 'including';\n      if (errMsgMatcher instanceof RegExp) {\n        placeholder = 'matching'\n      }\n\n      var isCompatibleMessage = _.checkError.compatibleMessage(caughtErr, errMsgMatcher);\n      if (isCompatibleMessage === negate) {\n        if (everyArgIsDefined && negate) {\n            errMsgMatcherFail = true;\n        } else {\n          this.assert(\n            negate\n            , 'expected #{this} to throw error ' + placeholder + ' #{exp} but got #{act}'\n            , 'expected #{this} to throw error not ' + placeholder + ' #{exp}'\n            ,  errMsgMatcher\n            ,  _.checkError.getMessage(caughtErr)\n          );\n        }\n      }\n    }\n\n    // If both assertions failed and both should've matched we throw an error\n    if (errorLikeFail && errMsgMatcherFail) {\n      this.assert(\n        negate\n        , 'expected #{this} to throw #{exp} but #{act} was thrown'\n        , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')\n        , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))\n        , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))\n      );\n    }\n\n    flag(this, 'object', caughtErr);\n  };\n\n  Assertion.addMethod('throw', assertThrows);\n  Assertion.addMethod('throws', assertThrows);\n  Assertion.addMethod('Throw', assertThrows);\n\n  /**\n   * ### .respondTo(method[, msg])\n   *\n   * When the target is a non-function object, `.respondTo` asserts that the\n   * target has a method with the given name `method`. The method can be own or\n   * inherited, and it can be enumerable or non-enumerable.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(new Cat()).to.respondTo('meow');\n   *\n   * When the target is a function, `.respondTo` asserts that the target's\n   * `prototype` property has a method with the given name `method`. Again, the\n   * method can be own or inherited, and it can be enumerable or non-enumerable.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(Cat).to.respondTo('meow');\n   *\n   * Add `.itself` earlier in the chain to force `.respondTo` to treat the\n   * target as a non-function object, even if it's a function. Thus, it asserts\n   * that the target has a method with the given name `method`, rather than\n   * asserting that the target's `prototype` property has a method with the\n   * given name `method`.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *     Cat.hiss = function () {};\n   *\n   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n   *\n   * When not adding `.itself`, it's important to check the target's type before\n   * using `.respondTo`. See the `.a` doc for info on checking a target's type.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(new Cat()).to.be.an('object').that.respondsTo('meow');\n   *\n   * Add `.not` earlier in the chain to negate `.respondTo`.\n   *\n   *     function Dog () {}\n   *     Dog.prototype.bark = function () {};\n   *\n   *     expect(new Dog()).to.not.respondTo('meow');\n   *\n   * `.respondTo` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect({}).to.respondTo('meow', 'nooo why fail??');\n   *     expect({}, 'nooo why fail??').to.respondTo('meow');\n   *\n   * The alias `.respondsTo` can be used interchangeably with `.respondTo`.\n   *\n   * @name respondTo\n   * @alias respondsTo\n   * @param {String} method\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function respondTo (method, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , itself = flag(this, 'itself')\n      , context = ('function' === typeof obj && !itself)\n        ? obj.prototype[method]\n        : obj[method];\n\n    this.assert(\n        'function' === typeof context\n      , 'expected #{this} to respond to ' + _.inspect(method)\n      , 'expected #{this} to not respond to ' + _.inspect(method)\n    );\n  }\n\n  Assertion.addMethod('respondTo', respondTo);\n  Assertion.addMethod('respondsTo', respondTo);\n\n  /**\n   * ### .itself\n   *\n   * Forces all `.respondTo` assertions that follow in the chain to behave as if\n   * the target is a non-function object, even if it's a function. Thus, it\n   * causes `.respondTo` to assert that the target has a method with the given\n   * name, rather than asserting that the target's `prototype` property has a\n   * method with the given name.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *     Cat.hiss = function () {};\n   *\n   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n   *\n   * @name itself\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('itself', function () {\n    flag(this, 'itself', true);\n  });\n\n  /**\n   * ### .satisfy(matcher[, msg])\n   *\n   * Invokes the given `matcher` function with the target being passed as the\n   * first argument, and asserts that the value returned is truthy.\n   *\n   *     expect(1).to.satisfy(function(num) {\n   *       return num > 0;\n   *     });\n   *\n   * Add `.not` earlier in the chain to negate `.satisfy`.\n   *\n   *     expect(1).to.not.satisfy(function(num) {\n   *       return num > 2;\n   *     });\n   *\n   * `.satisfy` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1).to.satisfy(function(num) {\n   *       return num > 2;\n   *     }, 'nooo why fail??');\n   *\n   *     expect(1, 'nooo why fail??').to.satisfy(function(num) {\n   *       return num > 2;\n   *     });\n   *\n   * The alias `.satisfies` can be used interchangeably with `.satisfy`.\n   *\n   * @name satisfy\n   * @alias satisfies\n   * @param {Function} matcher\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function satisfy (matcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var result = matcher(obj);\n    this.assert(\n        result\n      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)\n      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)\n      , flag(this, 'negate') ? false : true\n      , result\n    );\n  }\n\n  Assertion.addMethod('satisfy', satisfy);\n  Assertion.addMethod('satisfies', satisfy);\n\n  /**\n   * ### .closeTo(expected, delta[, msg])\n   *\n   * Asserts that the target is a number that's within a given +/- `delta` range\n   * of the given number `expected`. However, it's often best to assert that the\n   * target is equal to its expected value.\n   *\n   *     // Recommended\n   *     expect(1.5).to.equal(1.5);\n   *\n   *     // Not recommended\n   *     expect(1.5).to.be.closeTo(1, 0.5);\n   *     expect(1.5).to.be.closeTo(2, 0.5);\n   *     expect(1.5).to.be.closeTo(1, 1);\n   *\n   * Add `.not` earlier in the chain to negate `.closeTo`.\n   *\n   *     expect(1.5).to.equal(1.5); // Recommended\n   *     expect(1.5).to.not.be.closeTo(3, 1); // Not recommended\n   *\n   * `.closeTo` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1.5).to.be.closeTo(3, 1, 'nooo why fail??');\n   *     expect(1.5, 'nooo why fail??').to.be.closeTo(3, 1);\n   *\n   * The alias `.approximately` can be used interchangeably with `.closeTo`.\n   *\n   * @name closeTo\n   * @alias approximately\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function closeTo(expected, delta, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n\n    new Assertion(obj, flagMsg, ssfi, true).is.a('number');\n    if (typeof expected !== 'number' || typeof delta !== 'number') {\n      flagMsg = flagMsg ? flagMsg + ': ' : '';\n      throw new AssertionError(\n          flagMsg + 'the arguments to closeTo or approximately must be numbers',\n          undefined,\n          ssfi\n      );\n    }\n\n    this.assert(\n        Math.abs(obj - expected) <= delta\n      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta\n      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta\n    );\n  }\n\n  Assertion.addMethod('closeTo', closeTo);\n  Assertion.addMethod('approximately', closeTo);\n\n  // Note: Duplicates are ignored if testing for inclusion instead of sameness.\n  function isSubsetOf(subset, superset, cmp, contains, ordered) {\n    if (!contains) {\n      if (subset.length !== superset.length) return false;\n      superset = superset.slice();\n    }\n\n    return subset.every(function(elem, idx) {\n      if (ordered) return cmp ? cmp(elem, superset[idx]) : elem === superset[idx];\n\n      if (!cmp) {\n        var matchIdx = superset.indexOf(elem);\n        if (matchIdx === -1) return false;\n\n        // Remove match from superset so not counted twice if duplicate in subset.\n        if (!contains) superset.splice(matchIdx, 1);\n        return true;\n      }\n\n      return superset.some(function(elem2, matchIdx) {\n        if (!cmp(elem, elem2)) return false;\n\n        // Remove match from superset so not counted twice if duplicate in subset.\n        if (!contains) superset.splice(matchIdx, 1);\n        return true;\n      });\n    });\n  }\n\n  /**\n   * ### .members(set[, msg])\n   *\n   * Asserts that the target array has the same members as the given array\n   * `set`.\n   *\n   *     expect([1, 2, 3]).to.have.members([2, 1, 3]);\n   *     expect([1, 2, 2]).to.have.members([2, 1, 2]);\n   *\n   * By default, members are compared using strict (`===`) equality. Add `.deep`\n   * earlier in the chain to use deep equality instead. See the `deep-eql`\n   * project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target array deeply (but not strictly) has member `{a: 1}`\n   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);\n   *\n   * By default, order doesn't matter. Add `.ordered` earlier in the chain to\n   * require that members appear in the same order.\n   *\n   *     expect([1, 2, 3]).to.have.ordered.members([1, 2, 3]);\n   *     expect([1, 2, 3]).to.have.members([2, 1, 3])\n   *       .but.not.ordered.members([2, 1, 3]);\n   *\n   * By default, both arrays must be the same size. Add `.include` earlier in\n   * the chain to require that the target's members be a superset of the\n   * expected members. Note that duplicates are ignored in the subset when\n   * `.include` is added.\n   *\n   *     // Target array is a superset of [1, 2] but not identical\n   *     expect([1, 2, 3]).to.include.members([1, 2]);\n   *     expect([1, 2, 3]).to.not.have.members([1, 2]);\n   *\n   *     // Duplicates in the subset are ignored\n   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n   *\n   * `.deep`, `.ordered`, and `.include` can all be combined. However, if\n   * `.include` and `.ordered` are combined, the ordering begins at the start of\n   * both arrays.\n   *\n   *     expect([{a: 1}, {b: 2}, {c: 3}])\n   *       .to.include.deep.ordered.members([{a: 1}, {b: 2}])\n   *       .but.not.include.deep.ordered.members([{b: 2}, {c: 3}]);\n   *\n   * Add `.not` earlier in the chain to negate `.members`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the target array doesn't have all of the same members as\n   * the given array `set` but may or may not have some of them. It's often best\n   * to identify the exact output that's expected, and then write an assertion\n   * that only accepts that exact output.\n   *\n   *     expect([1, 2]).to.not.include(3).and.not.include(4); // Recommended\n   *     expect([1, 2]).to.not.have.members([3, 4]); // Not recommended\n   *\n   * `.members` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2]).to.have.members([1, 2, 3], 'nooo why fail??');\n   *     expect([1, 2], 'nooo why fail??').to.have.members([1, 2, 3]);\n   *\n   * @name members\n   * @param {Array} set\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('members', function (subset, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n\n    new Assertion(obj, flagMsg, ssfi, true).to.be.an('array');\n    new Assertion(subset, flagMsg, ssfi, true).to.be.an('array');\n\n    var contains = flag(this, 'contains');\n    var ordered = flag(this, 'ordered');\n\n    var subject, failMsg, failNegateMsg;\n\n    if (contains) {\n      subject = ordered ? 'an ordered superset' : 'a superset';\n      failMsg = 'expected #{this} to be ' + subject + ' of #{exp}';\n      failNegateMsg = 'expected #{this} to not be ' + subject + ' of #{exp}';\n    } else {\n      subject = ordered ? 'ordered members' : 'members';\n      failMsg = 'expected #{this} to have the same ' + subject + ' as #{exp}';\n      failNegateMsg = 'expected #{this} to not have the same ' + subject + ' as #{exp}';\n    }\n\n    var cmp = flag(this, 'deep') ? _.eql : undefined;\n\n    this.assert(\n        isSubsetOf(subset, obj, cmp, contains, ordered)\n      , failMsg\n      , failNegateMsg\n      , subset\n      , obj\n      , true\n    );\n  });\n\n  /**\n   * ### .oneOf(list[, msg])\n   *\n   * Asserts that the target is a member of the given array `list`. However,\n   * it's often best to assert that the target is equal to its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.oneOf([1, 2, 3]); // Not recommended\n   *\n   * Comparisons are performed using strict (`===`) equality.\n   *\n   * Add `.not` earlier in the chain to negate `.oneOf`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.oneOf([2, 3, 4]); // Not recommended\n   *\n   * `.oneOf` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.oneOf([2, 3, 4], 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.oneOf([2, 3, 4]);\n   *\n   * @name oneOf\n   * @param {Array<*>} list\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function oneOf (list, msg) {\n    if (msg) flag(this, 'message', msg);\n    var expected = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(list, flagMsg, ssfi, true).to.be.an('array');\n\n    this.assert(\n        list.indexOf(expected) > -1\n      , 'expected #{this} to be one of #{exp}'\n      , 'expected #{this} to not be one of #{exp}'\n      , list\n      , expected\n    );\n  }\n\n  Assertion.addMethod('oneOf', oneOf);\n\n  /**\n   * ### .change(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.change` asserts that the given function\n   * `subject` returns a different value when it's invoked before the target\n   * function compared to when it's invoked afterward. However, it's often best\n   * to assert that `subject` is equal to its expected value.\n   *\n   *     var dots = ''\n   *       , addDot = function () { dots += '.'; }\n   *       , getDots = function () { return dots; };\n   *\n   *     // Recommended\n   *     expect(getDots()).to.equal('');\n   *     addDot();\n   *     expect(getDots()).to.equal('.');\n   *\n   *     // Not recommended\n   *     expect(addDot).to.change(getDots);\n   *\n   * When two arguments are provided, `.change` asserts that the value of the\n   * given object `subject`'s `prop` property is different before invoking the\n   * target function compared to afterward.\n   *\n   *     var myObj = {dots: ''}\n   *       , addDot = function () { myObj.dots += '.'; };\n   *\n   *     // Recommended\n   *     expect(myObj).to.have.property('dots', '');\n   *     addDot();\n   *     expect(myObj).to.have.property('dots', '.');\n   *\n   *     // Not recommended\n   *     expect(addDot).to.change(myObj, 'dots');\n   *\n   * Strict (`===`) equality is used to compare before and after values.\n   *\n   * Add `.not` earlier in the chain to negate `.change`.\n   *\n   *     var dots = ''\n   *       , noop = function () {}\n   *       , getDots = function () { return dots; };\n   *\n   *     expect(noop).to.not.change(getDots);\n   *\n   *     var myObj = {dots: ''}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'dots');\n   *\n   * `.change` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {dots: ''}\n   *       , addDot = function () { myObj.dots += '.'; };\n   *\n   *     expect(addDot).to.not.change(myObj, 'dots', 'nooo why fail??');\n   *\n   *     var dots = ''\n   *       , addDot = function () { dots += '.'; }\n   *       , getDots = function () { return dots; };\n   *\n   *     expect(addDot, 'nooo why fail??').to.not.change(getDots);\n   *\n   * `.change` also causes all `.by` assertions that follow in the chain to\n   * assert how much a numeric subject was increased or decreased by. However,\n   * it's dangerous to use `.change.by`. The problem is that it creates\n   * uncertain expectations by asserting that the subject either increases by\n   * the given delta, or that it decreases by the given delta. It's often best\n   * to identify the exact output that's expected, and then write an assertion\n   * that only accepts that exact output.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; }\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   * The alias `.changes` can be used interchangeably with `.change`.\n   *\n   * @name change\n   * @alias changes\n   * @param {String} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertChanges (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    // This gets flagged because of the .by(delta) assertion\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'change');\n    flag(this, 'realDelta', final !== initial);\n\n    this.assert(\n      initial !== final\n      , 'expected ' + msgObj + ' to change'\n      , 'expected ' + msgObj + ' to not change'\n    );\n  }\n\n  Assertion.addMethod('change', assertChanges);\n  Assertion.addMethod('changes', assertChanges);\n\n  /**\n   * ### .increase(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.increase` asserts that the given function\n   * `subject` returns a greater number when it's invoked after invoking the\n   * target function compared to when it's invoked beforehand. `.increase` also\n   * causes all `.by` assertions that follow in the chain to assert how much\n   * greater of a number is returned. It's often best to assert that the return\n   * value increased by the expected amount, rather than asserting it increased\n   * by any amount.\n   *\n   *     var val = 1\n   *       , addTwo = function () { val += 2; }\n   *       , getVal = function () { return val; };\n   *\n   *     expect(addTwo).to.increase(getVal).by(2); // Recommended\n   *     expect(addTwo).to.increase(getVal); // Not recommended\n   *\n   * When two arguments are provided, `.increase` asserts that the value of the\n   * given object `subject`'s `prop` property is greater after invoking the\n   * target function compared to beforehand.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.increase(myObj, 'val'); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.increase`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either decreases, or that it stays the same.\n   * It's often best to identify the exact output that's expected, and then\n   * write an assertion that only accepts that exact output.\n   *\n   * When the subject is expected to decrease, it's often best to assert that it\n   * decreased by the expected amount.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.not.increase(myObj, 'val'); // Not recommended\n   *\n   * When the subject is expected to stay the same, it's often best to assert\n   * exactly that.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'val'); // Recommended\n   *     expect(noop).to.not.increase(myObj, 'val'); // Not recommended\n   *\n   * `.increase` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.increase(myObj, 'val', 'nooo why fail??');\n   *\n   *     var val = 1\n   *       , noop = function () {}\n   *       , getVal = function () { return val; };\n   *\n   *     expect(noop, 'nooo why fail??').to.increase(getVal);\n   *\n   * The alias `.increases` can be used interchangeably with `.increase`.\n   *\n   * @name increase\n   * @alias increases\n   * @param {String|Function} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertIncreases (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    // Make sure that the target is a number\n    new Assertion(initial, flagMsg, ssfi, true).is.a('number');\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'increase');\n    flag(this, 'realDelta', final - initial);\n\n    this.assert(\n      final - initial > 0\n      , 'expected ' + msgObj + ' to increase'\n      , 'expected ' + msgObj + ' to not increase'\n    );\n  }\n\n  Assertion.addMethod('increase', assertIncreases);\n  Assertion.addMethod('increases', assertIncreases);\n\n  /**\n   * ### .decrease(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.decrease` asserts that the given function\n   * `subject` returns a lesser number when it's invoked after invoking the\n   * target function compared to when it's invoked beforehand. `.decrease` also\n   * causes all `.by` assertions that follow in the chain to assert how much\n   * lesser of a number is returned. It's often best to assert that the return\n   * value decreased by the expected amount, rather than asserting it decreased\n   * by any amount.\n   *\n   *     var val = 1\n   *       , subtractTwo = function () { val -= 2; }\n   *       , getVal = function () { return val; };\n   *\n   *     expect(subtractTwo).to.decrease(getVal).by(2); // Recommended\n   *     expect(subtractTwo).to.decrease(getVal); // Not recommended\n   *\n   * When two arguments are provided, `.decrease` asserts that the value of the\n   * given object `subject`'s `prop` property is lesser after invoking the\n   * target function compared to beforehand.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.decrease(myObj, 'val'); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.decrease`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either increases, or that it stays the same.\n   * It's often best to identify the exact output that's expected, and then\n   * write an assertion that only accepts that exact output.\n   *\n   * When the subject is expected to increase, it's often best to assert that it\n   * increased by the expected amount.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.not.decrease(myObj, 'val'); // Not recommended\n   *\n   * When the subject is expected to stay the same, it's often best to assert\n   * exactly that.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'val'); // Recommended\n   *     expect(noop).to.not.decrease(myObj, 'val'); // Not recommended\n   *\n   * `.decrease` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.decrease(myObj, 'val', 'nooo why fail??');\n   *\n   *     var val = 1\n   *       , noop = function () {}\n   *       , getVal = function () { return val; };\n   *\n   *     expect(noop, 'nooo why fail??').to.decrease(getVal);\n   *\n   * The alias `.decreases` can be used interchangeably with `.decrease`.\n   *\n   * @name decrease\n   * @alias decreases\n   * @param {String|Function} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDecreases (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    // Make sure that the target is a number\n    new Assertion(initial, flagMsg, ssfi, true).is.a('number');\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'decrease');\n    flag(this, 'realDelta', initial - final);\n\n    this.assert(\n      final - initial < 0\n      , 'expected ' + msgObj + ' to decrease'\n      , 'expected ' + msgObj + ' to not decrease'\n    );\n  }\n\n  Assertion.addMethod('decrease', assertDecreases);\n  Assertion.addMethod('decreases', assertDecreases);\n\n  /**\n   * ### .by(delta[, msg])\n   *\n   * When following an `.increase` assertion in the chain, `.by` asserts that\n   * the subject of the `.increase` assertion increased by the given `delta`.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2);\n   *\n   * When following a `.decrease` assertion in the chain, `.by` asserts that the\n   * subject of the `.decrease` assertion decreased by the given `delta`.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2);\n   *\n   * When following a `.change` assertion in the chain, `.by` asserts that the\n   * subject of the `.change` assertion either increased or decreased by the\n   * given `delta`. However, it's dangerous to use `.change.by`. The problem is\n   * that it creates uncertain expectations. It's often best to identify the\n   * exact output that's expected, and then write an assertion that only accepts\n   * that exact output.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; }\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.by`. However, it's often best\n   * to assert that the subject changed by its expected delta, rather than\n   * asserting that it didn't change by one of countless unexpected deltas.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     // Recommended\n   *     expect(addTwo).to.increase(myObj, 'val').by(2);\n   *\n   *     // Not recommended\n   *     expect(addTwo).to.increase(myObj, 'val').but.not.by(3);\n   *\n   * `.by` accepts an optional `msg` argument which is a custom error message to\n   * show when the assertion fails. The message can also be given as the second\n   * argument to `expect`.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(3, 'nooo why fail??');\n   *     expect(addTwo, 'nooo why fail??').to.increase(myObj, 'val').by(3);\n   *\n   * @name by\n   * @param {Number} delta\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDelta(delta, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var msgObj = flag(this, 'deltaMsgObj');\n    var initial = flag(this, 'initialDeltaValue');\n    var final = flag(this, 'finalDeltaValue');\n    var behavior = flag(this, 'deltaBehavior');\n    var realDelta = flag(this, 'realDelta');\n\n    var expression;\n    if (behavior === 'change') {\n      expression = Math.abs(final - initial) === Math.abs(delta);\n    } else {\n      expression = realDelta === Math.abs(delta);\n    }\n\n    this.assert(\n      expression\n      , 'expected ' + msgObj + ' to ' + behavior + ' by ' + delta\n      , 'expected ' + msgObj + ' to not ' + behavior + ' by ' + delta\n    );\n  }\n\n  Assertion.addMethod('by', assertDelta);\n\n  /**\n   * ### .extensible\n   *\n   * Asserts that the target is extensible, which means that new properties can\n   * be added to it. Primitives are never extensible.\n   *\n   *     expect({a: 1}).to.be.extensible;\n   *\n   * Add `.not` earlier in the chain to negate `.extensible`.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({})\n   *       , sealedObject = Object.seal({})\n   *       , frozenObject = Object.freeze({});\n   *\n   *     expect(nonExtensibleObject).to.not.be.extensible;\n   *     expect(sealedObject).to.not.be.extensible;\n   *     expect(frozenObject).to.not.be.extensible;\n   *     expect(1).to.not.be.extensible;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(1, 'nooo why fail??').to.be.extensible;\n   *\n   * @name extensible\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('extensible', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isExtensible = obj === Object(obj) && Object.isExtensible(obj);\n\n    this.assert(\n      isExtensible\n      , 'expected #{this} to be extensible'\n      , 'expected #{this} to not be extensible'\n    );\n  });\n\n  /**\n   * ### .sealed\n   *\n   * Asserts that the target is sealed, which means that new properties can't be\n   * added to it, and its existing properties can't be reconfigured or deleted.\n   * However, it's possible that its existing properties can still be reassigned\n   * to different values. Primitives are always sealed.\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(sealedObject).to.be.sealed;\n   *     expect(frozenObject).to.be.sealed;\n   *     expect(1).to.be.sealed;\n   *\n   * Add `.not` earlier in the chain to negate `.sealed`.\n   *\n   *     expect({a: 1}).to.not.be.sealed;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.be.sealed;\n   *\n   * @name sealed\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('sealed', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isSealed = obj === Object(obj) ? Object.isSealed(obj) : true;\n\n    this.assert(\n      isSealed\n      , 'expected #{this} to be sealed'\n      , 'expected #{this} to not be sealed'\n    );\n  });\n\n  /**\n   * ### .frozen\n   *\n   * Asserts that the target is frozen, which means that new properties can't be\n   * added to it, and its existing properties can't be reassigned to different\n   * values, reconfigured, or deleted. Primitives are always frozen.\n   *\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(frozenObject).to.be.frozen;\n   *     expect(1).to.be.frozen;\n   *\n   * Add `.not` earlier in the chain to negate `.frozen`.\n   *\n   *     expect({a: 1}).to.not.be.frozen;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.be.frozen;\n   *\n   * @name frozen\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('frozen', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isFrozen = obj === Object(obj) ? Object.isFrozen(obj) : true;\n\n    this.assert(\n      isFrozen\n      , 'expected #{this} to be frozen'\n      , 'expected #{this} to not be frozen'\n    );\n  });\n\n  /**\n   * ### .finite\n   *\n   * Asserts that the target is a number, and isn't `NaN` or positive/negative\n   * `Infinity`.\n   *\n   *     expect(1).to.be.finite;\n   *\n   * Add `.not` earlier in the chain to negate `.finite`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either isn't a number, or that it's `NaN`, or\n   * that it's positive `Infinity`, or that it's negative `Infinity`. It's often\n   * best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to be a number, it's often best to assert\n   * that it's the expected type, rather than asserting that it isn't one of\n   * many unexpected types.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be `NaN`, it's often best to assert exactly\n   * that.\n   *\n   *     expect(NaN).to.be.NaN; // Recommended\n   *     expect(NaN).to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be positive infinity, it's often best to\n   * assert exactly that.\n   *\n   *     expect(Infinity).to.equal(Infinity); // Recommended\n   *     expect(Infinity).to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be negative infinity, it's often best to\n   * assert exactly that.\n   *\n   *     expect(-Infinity).to.equal(-Infinity); // Recommended\n   *     expect(-Infinity).to.not.be.finite; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect('foo', 'nooo why fail??').to.be.finite;\n   *\n   * @name finite\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('finite', function(msg) {\n    var obj = flag(this, 'object');\n\n    this.assert(\n        typeof obj === 'number' && isFinite(obj)\n      , 'expected #{this} to be a finite number'\n      , 'expected #{this} to not be a finite number'\n    );\n  });\n};\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  /*!\n   * Chai dependencies.\n   */\n\n  var Assertion = chai.Assertion\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  /**\n   * ### assert(expression, message)\n   *\n   * Write your own test expressions.\n   *\n   *     assert('foo' !== 'bar', 'foo is not bar');\n   *     assert(Array.isArray([]), 'empty arrays are arrays');\n   *\n   * @param {Mixed} expression to test for truthiness\n   * @param {String} message to display on error\n   * @name assert\n   * @namespace Assert\n   * @api public\n   */\n\n  var assert = chai.assert = function (express, errmsg) {\n    var test = new Assertion(null, null, chai.assert, true);\n    test.assert(\n        express\n      , errmsg\n      , '[ negation message unavailable ]'\n    );\n  };\n\n  /**\n   * ### .fail([message])\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure. Node.js `assert` module-compatible.\n   *\n   *     assert.fail();\n   *     assert.fail(\"custom error message\");\n   *     assert.fail(1, 2);\n   *     assert.fail(1, 2, \"custom error message\");\n   *     assert.fail(1, 2, \"custom error message\", \">\");\n   *     assert.fail(1, 2, undefined, \">\");\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.fail = function (actual, expected, message, operator) {\n    if (arguments.length < 2) {\n        // Comply with Node's fail([message]) interface\n\n        message = actual;\n        actual = undefined;\n    }\n\n    message = message || 'assert.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, assert.fail);\n  };\n\n  /**\n   * ### .isOk(object, [message])\n   *\n   * Asserts that `object` is truthy.\n   *\n   *     assert.isOk('everything', 'everything is ok');\n   *     assert.isOk(false, 'this will fail');\n   *\n   * @name isOk\n   * @alias ok\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isOk = function (val, msg) {\n    new Assertion(val, msg, assert.isOk, true).is.ok;\n  };\n\n  /**\n   * ### .isNotOk(object, [message])\n   *\n   * Asserts that `object` is falsy.\n   *\n   *     assert.isNotOk('everything', 'this will fail');\n   *     assert.isNotOk(false, 'this will pass');\n   *\n   * @name isNotOk\n   * @alias notOk\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotOk = function (val, msg) {\n    new Assertion(val, msg, assert.isNotOk, true).is.not.ok;\n  };\n\n  /**\n   * ### .equal(actual, expected, [message])\n   *\n   * Asserts non-strict equality (`==`) of `actual` and `expected`.\n   *\n   *     assert.equal(3, '3', '== coerces values to strings');\n   *\n   * @name equal\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.equal = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.equal, true);\n\n    test.assert(\n        exp == flag(test, 'object')\n      , 'expected #{this} to equal #{exp}'\n      , 'expected #{this} to not equal #{act}'\n      , exp\n      , act\n      , true\n    );\n  };\n\n  /**\n   * ### .notEqual(actual, expected, [message])\n   *\n   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n   *\n   *     assert.notEqual(3, 4, 'these numbers are not equal');\n   *\n   * @name notEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notEqual = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.notEqual, true);\n\n    test.assert(\n        exp != flag(test, 'object')\n      , 'expected #{this} to not equal #{exp}'\n      , 'expected #{this} to equal #{act}'\n      , exp\n      , act\n      , true\n    );\n  };\n\n  /**\n   * ### .strictEqual(actual, expected, [message])\n   *\n   * Asserts strict equality (`===`) of `actual` and `expected`.\n   *\n   *     assert.strictEqual(true, true, 'these booleans are strictly equal');\n   *\n   * @name strictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.strictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.strictEqual, true).to.equal(exp);\n  };\n\n  /**\n   * ### .notStrictEqual(actual, expected, [message])\n   *\n   * Asserts strict inequality (`!==`) of `actual` and `expected`.\n   *\n   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');\n   *\n   * @name notStrictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.notStrictEqual, true).to.not.equal(exp);\n  };\n\n  /**\n   * ### .deepEqual(actual, expected, [message])\n   *\n   * Asserts that `actual` is deeply equal to `expected`.\n   *\n   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });\n   *\n   * @name deepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @alias deepStrictEqual\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepEqual = assert.deepStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.deepEqual, true).to.eql(exp);\n  };\n\n  /**\n   * ### .notDeepEqual(actual, expected, [message])\n   *\n   * Assert that `actual` is not deeply equal to `expected`.\n   *\n   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });\n   *\n   * @name notDeepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.notDeepEqual, true).to.not.eql(exp);\n  };\n\n   /**\n   * ### .isAbove(valueToCheck, valueToBeAbove, [message])\n   *\n   * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`.\n   *\n   *     assert.isAbove(5, 2, '5 is strictly greater than 2');\n   *\n   * @name isAbove\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAbove\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAbove = function (val, abv, msg) {\n    new Assertion(val, msg, assert.isAbove, true).to.be.above(abv);\n  };\n\n   /**\n   * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])\n   *\n   * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`.\n   *\n   *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');\n   *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');\n   *\n   * @name isAtLeast\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtLeast\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtLeast = function (val, atlst, msg) {\n    new Assertion(val, msg, assert.isAtLeast, true).to.be.least(atlst);\n  };\n\n   /**\n   * ### .isBelow(valueToCheck, valueToBeBelow, [message])\n   *\n   * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`.\n   *\n   *     assert.isBelow(3, 6, '3 is strictly less than 6');\n   *\n   * @name isBelow\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeBelow\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBelow = function (val, blw, msg) {\n    new Assertion(val, msg, assert.isBelow, true).to.be.below(blw);\n  };\n\n   /**\n   * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])\n   *\n   * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`.\n   *\n   *     assert.isAtMost(3, 6, '3 is less than or equal to 6');\n   *     assert.isAtMost(4, 4, '4 is less than or equal to 4');\n   *\n   * @name isAtMost\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtMost\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtMost = function (val, atmst, msg) {\n    new Assertion(val, msg, assert.isAtMost, true).to.be.most(atmst);\n  };\n\n  /**\n   * ### .isTrue(value, [message])\n   *\n   * Asserts that `value` is true.\n   *\n   *     var teaServed = true;\n   *     assert.isTrue(teaServed, 'the tea has been served');\n   *\n   * @name isTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isTrue = function (val, msg) {\n    new Assertion(val, msg, assert.isTrue, true).is['true'];\n  };\n\n  /**\n   * ### .isNotTrue(value, [message])\n   *\n   * Asserts that `value` is not true.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotTrue(tea, 'great, time for tea!');\n   *\n   * @name isNotTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotTrue = function (val, msg) {\n    new Assertion(val, msg, assert.isNotTrue, true).to.not.equal(true);\n  };\n\n  /**\n   * ### .isFalse(value, [message])\n   *\n   * Asserts that `value` is false.\n   *\n   *     var teaServed = false;\n   *     assert.isFalse(teaServed, 'no tea yet? hmm...');\n   *\n   * @name isFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFalse = function (val, msg) {\n    new Assertion(val, msg, assert.isFalse, true).is['false'];\n  };\n\n  /**\n   * ### .isNotFalse(value, [message])\n   *\n   * Asserts that `value` is not false.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotFalse(tea, 'great, time for tea!');\n   *\n   * @name isNotFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFalse = function (val, msg) {\n    new Assertion(val, msg, assert.isNotFalse, true).to.not.equal(false);\n  };\n\n  /**\n   * ### .isNull(value, [message])\n   *\n   * Asserts that `value` is null.\n   *\n   *     assert.isNull(err, 'there was no error');\n   *\n   * @name isNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNull = function (val, msg) {\n    new Assertion(val, msg, assert.isNull, true).to.equal(null);\n  };\n\n  /**\n   * ### .isNotNull(value, [message])\n   *\n   * Asserts that `value` is not null.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotNull(tea, 'great, time for tea!');\n   *\n   * @name isNotNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNull = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNull, true).to.not.equal(null);\n  };\n\n  /**\n   * ### .isNaN\n   *\n   * Asserts that value is NaN.\n   *\n   *     assert.isNaN(NaN, 'NaN is NaN');\n   *\n   * @name isNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNaN = function (val, msg) {\n    new Assertion(val, msg, assert.isNaN, true).to.be.NaN;\n  };\n\n  /**\n   * ### .isNotNaN\n   *\n   * Asserts that value is not NaN.\n   *\n   *     assert.isNotNaN(4, '4 is not NaN');\n   *\n   * @name isNotNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n  assert.isNotNaN = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNaN, true).not.to.be.NaN;\n  };\n\n  /**\n   * ### .exists\n   *\n   * Asserts that the target is neither `null` nor `undefined`.\n   *\n   *     var foo = 'hi';\n   *\n   *     assert.exists(foo, 'foo is neither `null` nor `undefined`');\n   *\n   * @name exists\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.exists = function (val, msg) {\n    new Assertion(val, msg, assert.exists, true).to.exist;\n  };\n\n  /**\n   * ### .notExists\n   *\n   * Asserts that the target is either `null` or `undefined`.\n   *\n   *     var bar = null\n   *       , baz;\n   *\n   *     assert.notExists(bar);\n   *     assert.notExists(baz, 'baz is either null or undefined');\n   *\n   * @name notExists\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notExists = function (val, msg) {\n    new Assertion(val, msg, assert.notExists, true).to.not.exist;\n  };\n\n  /**\n   * ### .isUndefined(value, [message])\n   *\n   * Asserts that `value` is `undefined`.\n   *\n   *     var tea;\n   *     assert.isUndefined(tea, 'no tea defined');\n   *\n   * @name isUndefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isUndefined = function (val, msg) {\n    new Assertion(val, msg, assert.isUndefined, true).to.equal(undefined);\n  };\n\n  /**\n   * ### .isDefined(value, [message])\n   *\n   * Asserts that `value` is not `undefined`.\n   *\n   *     var tea = 'cup of chai';\n   *     assert.isDefined(tea, 'tea has been defined');\n   *\n   * @name isDefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isDefined = function (val, msg) {\n    new Assertion(val, msg, assert.isDefined, true).to.not.equal(undefined);\n  };\n\n  /**\n   * ### .isFunction(value, [message])\n   *\n   * Asserts that `value` is a function.\n   *\n   *     function serveTea() { return 'cup of tea'; };\n   *     assert.isFunction(serveTea, 'great, we can have tea now');\n   *\n   * @name isFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFunction = function (val, msg) {\n    new Assertion(val, msg, assert.isFunction, true).to.be.a('function');\n  };\n\n  /**\n   * ### .isNotFunction(value, [message])\n   *\n   * Asserts that `value` is _not_ a function.\n   *\n   *     var serveTea = [ 'heat', 'pour', 'sip' ];\n   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');\n   *\n   * @name isNotFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFunction = function (val, msg) {\n    new Assertion(val, msg, assert.isNotFunction, true).to.not.be.a('function');\n  };\n\n  /**\n   * ### .isObject(value, [message])\n   *\n   * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   * _The assertion does not match subclassed objects._\n   *\n   *     var selection = { name: 'Chai', serve: 'with spices' };\n   *     assert.isObject(selection, 'tea selection is an object');\n   *\n   * @name isObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isObject = function (val, msg) {\n    new Assertion(val, msg, assert.isObject, true).to.be.a('object');\n  };\n\n  /**\n   * ### .isNotObject(value, [message])\n   *\n   * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   *\n   *     var selection = 'chai'\n   *     assert.isNotObject(selection, 'tea selection is not an object');\n   *     assert.isNotObject(null, 'null is not an object');\n   *\n   * @name isNotObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotObject = function (val, msg) {\n    new Assertion(val, msg, assert.isNotObject, true).to.not.be.a('object');\n  };\n\n  /**\n   * ### .isArray(value, [message])\n   *\n   * Asserts that `value` is an array.\n   *\n   *     var menu = [ 'green', 'chai', 'oolong' ];\n   *     assert.isArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isArray = function (val, msg) {\n    new Assertion(val, msg, assert.isArray, true).to.be.an('array');\n  };\n\n  /**\n   * ### .isNotArray(value, [message])\n   *\n   * Asserts that `value` is _not_ an array.\n   *\n   *     var menu = 'green|chai|oolong';\n   *     assert.isNotArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isNotArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotArray = function (val, msg) {\n    new Assertion(val, msg, assert.isNotArray, true).to.not.be.an('array');\n  };\n\n  /**\n   * ### .isString(value, [message])\n   *\n   * Asserts that `value` is a string.\n   *\n   *     var teaOrder = 'chai';\n   *     assert.isString(teaOrder, 'order placed');\n   *\n   * @name isString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isString = function (val, msg) {\n    new Assertion(val, msg, assert.isString, true).to.be.a('string');\n  };\n\n  /**\n   * ### .isNotString(value, [message])\n   *\n   * Asserts that `value` is _not_ a string.\n   *\n   *     var teaOrder = 4;\n   *     assert.isNotString(teaOrder, 'order placed');\n   *\n   * @name isNotString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotString = function (val, msg) {\n    new Assertion(val, msg, assert.isNotString, true).to.not.be.a('string');\n  };\n\n  /**\n   * ### .isNumber(value, [message])\n   *\n   * Asserts that `value` is a number.\n   *\n   *     var cups = 2;\n   *     assert.isNumber(cups, 'how many cups');\n   *\n   * @name isNumber\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNumber = function (val, msg) {\n    new Assertion(val, msg, assert.isNumber, true).to.be.a('number');\n  };\n\n  /**\n   * ### .isNotNumber(value, [message])\n   *\n   * Asserts that `value` is _not_ a number.\n   *\n   *     var cups = '2 cups please';\n   *     assert.isNotNumber(cups, 'how many cups');\n   *\n   * @name isNotNumber\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNumber = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNumber, true).to.not.be.a('number');\n  };\n\n   /**\n   * ### .isFinite(value, [message])\n   *\n   * Asserts that `value` is a finite number. Unlike `.isNumber`, this will fail for `NaN` and `Infinity`.\n   *\n   *     var cups = 2;\n   *     assert.isFinite(cups, 'how many cups');\n   *\n   *     assert.isFinite(NaN); // throws\n   *\n   * @name isFinite\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFinite = function (val, msg) {\n    new Assertion(val, msg, assert.isFinite, true).to.be.finite;\n  };\n\n  /**\n   * ### .isBoolean(value, [message])\n   *\n   * Asserts that `value` is a boolean.\n   *\n   *     var teaReady = true\n   *       , teaServed = false;\n   *\n   *     assert.isBoolean(teaReady, 'is the tea ready');\n   *     assert.isBoolean(teaServed, 'has tea been served');\n   *\n   * @name isBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBoolean = function (val, msg) {\n    new Assertion(val, msg, assert.isBoolean, true).to.be.a('boolean');\n  };\n\n  /**\n   * ### .isNotBoolean(value, [message])\n   *\n   * Asserts that `value` is _not_ a boolean.\n   *\n   *     var teaReady = 'yep'\n   *       , teaServed = 'nope';\n   *\n   *     assert.isNotBoolean(teaReady, 'is the tea ready');\n   *     assert.isNotBoolean(teaServed, 'has tea been served');\n   *\n   * @name isNotBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotBoolean = function (val, msg) {\n    new Assertion(val, msg, assert.isNotBoolean, true).to.not.be.a('boolean');\n  };\n\n  /**\n   * ### .typeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');\n   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');\n   *     assert.typeOf('tea', 'string', 'we have a string');\n   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');\n   *     assert.typeOf(null, 'null', 'we have a null');\n   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');\n   *\n   * @name typeOf\n   * @param {Mixed} value\n   * @param {String} name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.typeOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.typeOf, true).to.be.a(type);\n  };\n\n  /**\n   * ### .notTypeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is _not_ `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');\n   *\n   * @name notTypeOf\n   * @param {Mixed} value\n   * @param {String} typeof name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notTypeOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.notTypeOf, true).to.not.be.a(type);\n  };\n\n  /**\n   * ### .instanceOf(object, constructor, [message])\n   *\n   * Asserts that `value` is an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new Tea('chai');\n   *\n   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');\n   *\n   * @name instanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.instanceOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.instanceOf, true).to.be.instanceOf(type);\n  };\n\n  /**\n   * ### .notInstanceOf(object, constructor, [message])\n   *\n   * Asserts `value` is not an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new String('chai');\n   *\n   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');\n   *\n   * @name notInstanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInstanceOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.notInstanceOf, true)\n      .to.not.be.instanceOf(type);\n  };\n\n  /**\n   * ### .include(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Can be used to assert the\n   * inclusion of a value in an array, a substring in a string, or a subset of\n   * properties in an object.\n   *\n   *     assert.include([1,2,3], 2, 'array contains value');\n   *     assert.include('foobar', 'foo', 'string contains substring');\n   *     assert.include({ foo: 'bar', hello: 'universe' }, { foo: 'bar' }, 'object contains property');\n   *\n   * Strict equality (===) is used. When asserting the inclusion of a value in\n   * an array, the array is searched for an element that's strictly equal to the\n   * given value. When asserting a subset of properties in an object, the object\n   * is searched for the given property keys, checking that each one is present\n   * and strictly equal to the given property value. For instance:\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.include([obj1, obj2], obj1);\n   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1});\n   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1, bar: obj2});\n   *\n   * @name include\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.include = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.include, true).include(inc);\n  };\n\n  /**\n   * ### .notInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Can be used to assert\n   * the absence of a value in an array, a substring in a string, or a subset of\n   * properties in an object.\n   *\n   *     assert.notInclude([1,2,3], 4, \"array doesn't contain value\");\n   *     assert.notInclude('foobar', 'baz', \"string doesn't contain substring\");\n   *     assert.notInclude({ foo: 'bar', hello: 'universe' }, { foo: 'baz' }, 'object doesn't contain property');\n   *\n   * Strict equality (===) is used. When asserting the absence of a value in an\n   * array, the array is searched to confirm the absence of an element that's\n   * strictly equal to the given value. When asserting a subset of properties in\n   * an object, the object is searched to confirm that at least one of the given\n   * property keys is either not present or not strictly equal to the given\n   * property value. For instance:\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.notInclude([obj1, obj2], {a: 1});\n   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: obj1, bar: {b: 2}});\n   *\n   * @name notInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notInclude, true).not.include(inc);\n  };\n\n  /**\n   * ### .deepInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Can be used to assert the\n   * inclusion of a value in an array or a subset of properties in an object.\n   * Deep equality is used.\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.deepInclude([obj1, obj2], {a: 1});\n   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 2}});\n   *\n   * @name deepInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepInclude, true).deep.include(inc);\n  };\n\n  /**\n   * ### .notDeepInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Can be used to assert\n   * the absence of a value in an array or a subset of properties in an object.\n   * Deep equality is used.\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.notDeepInclude([obj1, obj2], {a: 9});\n   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 9}});\n   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 9}});\n   *\n   * @name notDeepInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepInclude, true).not.deep.include(inc);\n  };\n\n  /**\n   * ### .nestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.nestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.[b]': 'x'});\n   *     assert.nestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'x'});\n   *\n   * @name nestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.nestedInclude, true).nested.include(inc);\n  };\n\n  /**\n   * ### .notNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' does not include 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.notNestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.b': 'y'});\n   *     assert.notNestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'y'});\n   *\n   * @name notNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notNestedInclude, true)\n      .not.nested.include(inc);\n  };\n\n  /**\n   * ### .deepNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while checking for deep equality.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.deepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {x: 1}});\n   *     assert.deepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {x: 1}});\n   *\n   * @name deepNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepNestedInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepNestedInclude, true)\n      .deep.nested.include(inc);\n  };\n\n  /**\n   * ### .notDeepNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' does not include 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while checking for deep equality.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.notDeepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {y: 1}})\n   *     assert.notDeepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {y: 2}});\n   *\n   * @name notDeepNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepNestedInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepNestedInclude, true)\n      .not.deep.nested.include(inc);\n  };\n\n  /**\n   * ### .ownInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while ignoring inherited properties.\n   *\n   *     assert.ownInclude({ a: 1 }, { a: 1 });\n   *\n   * @name ownInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.ownInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.ownInclude, true).own.include(inc);\n  };\n\n  /**\n   * ### .notOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while ignoring inherited properties.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     assert.notOwnInclude({ a: 1 }, { b: 2 });\n   *\n   * @name notOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notOwnInclude, true).not.own.include(inc);\n  };\n\n  /**\n   * ### .deepOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while ignoring inherited properties and checking for deep equality.\n   *\n   *      assert.deepOwnInclude({a: {b: 2}}, {a: {b: 2}});\n   *\n   * @name deepOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepOwnInclude, true)\n      .deep.own.include(inc);\n  };\n\n   /**\n   * ### .notDeepOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while ignoring inherited properties and checking for deep equality.\n   *\n   *      assert.notDeepOwnInclude({a: {b: 2}}, {a: {c: 3}});\n   *\n   * @name notDeepOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepOwnInclude, true)\n      .not.deep.own.include(inc);\n  };\n\n  /**\n   * ### .match(value, regexp, [message])\n   *\n   * Asserts that `value` matches the regular expression `regexp`.\n   *\n   *     assert.match('foobar', /^foo/, 'regexp matches');\n   *\n   * @name match\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.match = function (exp, re, msg) {\n    new Assertion(exp, msg, assert.match, true).to.match(re);\n  };\n\n  /**\n   * ### .notMatch(value, regexp, [message])\n   *\n   * Asserts that `value` does not match the regular expression `regexp`.\n   *\n   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');\n   *\n   * @name notMatch\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notMatch = function (exp, re, msg) {\n    new Assertion(exp, msg, assert.notMatch, true).to.not.match(re);\n  };\n\n  /**\n   * ### .property(object, property, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property`.\n   *\n   *     assert.property({ tea: { green: 'matcha' }}, 'tea');\n   *     assert.property({ tea: { green: 'matcha' }}, 'toString');\n   *\n   * @name property\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.property = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.property, true).to.have.property(prop);\n  };\n\n  /**\n   * ### .notProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property`.\n   *\n   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *\n   * @name notProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notProperty, true)\n      .to.not.have.property(prop);\n  };\n\n  /**\n   * ### .propertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property` with a value given by `value`. Uses a strict equality check\n   * (===).\n   *\n   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');\n   *\n   * @name propertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.propertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.propertyVal, true)\n      .to.have.property(prop, val);\n  };\n\n  /**\n   * ### .notPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property` with value given by `value`. Uses a strict equality check\n   * (===).\n   *\n   *     assert.notPropertyVal({ tea: 'is good' }, 'tea', 'is bad');\n   *     assert.notPropertyVal({ tea: 'is good' }, 'coffee', 'is good');\n   *\n   * @name notPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notPropertyVal, true)\n      .to.not.have.property(prop, val);\n  };\n\n  /**\n   * ### .deepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property` with a value given by `value`. Uses a deep equality check.\n   *\n   *     assert.deepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });\n   *\n   * @name deepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.deepPropertyVal, true)\n      .to.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .notDeepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property` with value given by `value`. Uses a deep equality check.\n   *\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });\n   *\n   * @name notDeepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notDeepPropertyVal, true)\n      .to.not.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .ownProperty(object, property, [message])\n   *\n   * Asserts that `object` has a direct property named by `property`. Inherited\n   * properties aren't checked.\n   *\n   *     assert.ownProperty({ tea: { green: 'matcha' }}, 'tea');\n   *\n   * @name ownProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @api public\n   */\n\n  assert.ownProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.ownProperty, true)\n      .to.have.own.property(prop);\n  };\n\n  /**\n   * ### .notOwnProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by\n   * `property`. Inherited properties aren't checked.\n   *\n   *     assert.notOwnProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *     assert.notOwnProperty({}, 'toString');\n   *\n   * @name notOwnProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notOwnProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notOwnProperty, true)\n      .to.not.have.own.property(prop);\n  };\n\n  /**\n   * ### .ownPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct property named by `property` and a value\n   * equal to the provided `value`. Uses a strict equality check (===).\n   * Inherited properties aren't checked.\n   *\n   *     assert.ownPropertyVal({ coffee: 'is good'}, 'coffee', 'is good');\n   *\n   * @name ownPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.ownPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.ownPropertyVal, true)\n      .to.have.own.property(prop, value);\n  };\n\n  /**\n   * ### .notOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by `property`\n   * with a value equal to the provided `value`. Uses a strict equality check\n   * (===). Inherited properties aren't checked.\n   *\n   *     assert.notOwnPropertyVal({ tea: 'is better'}, 'tea', 'is worse');\n   *     assert.notOwnPropertyVal({}, 'toString', Object.prototype.toString);\n   *\n   * @name notOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.notOwnPropertyVal, true)\n      .to.not.have.own.property(prop, value);\n  };\n\n  /**\n   * ### .deepOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct property named by `property` and a value\n   * equal to the provided `value`. Uses a deep equality check. Inherited\n   * properties aren't checked.\n   *\n   *     assert.deepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });\n   *\n   * @name deepOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.deepOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.deepOwnPropertyVal, true)\n      .to.have.deep.own.property(prop, value);\n  };\n\n  /**\n   * ### .notDeepOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by `property`\n   * with a value equal to the provided `value`. Uses a deep equality check.\n   * Inherited properties aren't checked.\n   *\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });\n   *     assert.notDeepOwnPropertyVal({}, 'toString', Object.prototype.toString);\n   *\n   * @name notDeepOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notDeepOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.notDeepOwnPropertyVal, true)\n      .to.not.have.deep.own.property(prop, value);\n  };\n\n  /**\n   * ### .nestedProperty(object, property, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property`, which can be a string using dot- and bracket-notation for\n   * nested reference.\n   *\n   *     assert.nestedProperty({ tea: { green: 'matcha' }}, 'tea.green');\n   *\n   * @name nestedProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.nestedProperty, true)\n      .to.have.nested.property(prop);\n  };\n\n  /**\n   * ### .notNestedProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property`, which\n   * can be a string using dot- and bracket-notation for nested reference. The\n   * property cannot exist on the object nor anywhere in its prototype chain.\n   *\n   *     assert.notNestedProperty({ tea: { green: 'matcha' }}, 'tea.oolong');\n   *\n   * @name notNestedProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notNestedProperty, true)\n      .to.not.have.nested.property(prop);\n  };\n\n  /**\n   * ### .nestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with value given\n   * by `value`. `property` can use dot- and bracket-notation for nested\n   * reference. Uses a strict equality check (===).\n   *\n   *     assert.nestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');\n   *\n   * @name nestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.nestedPropertyVal, true)\n      .to.have.nested.property(prop, val);\n  };\n\n  /**\n   * ### .notNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property` with\n   * value given by `value`. `property` can use dot- and bracket-notation for\n   * nested reference. Uses a strict equality check (===).\n   *\n   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');\n   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'coffee.green', 'matcha');\n   *\n   * @name notNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notNestedPropertyVal, true)\n      .to.not.have.nested.property(prop, val);\n  };\n\n  /**\n   * ### .deepNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with a value given\n   * by `value`. `property` can use dot- and bracket-notation for nested\n   * reference. Uses a deep equality check.\n   *\n   *     assert.deepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yum' });\n   *\n   * @name deepNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.deepNestedPropertyVal, true)\n      .to.have.deep.nested.property(prop, val);\n  };\n\n  /**\n   * ### .notDeepNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property` with\n   * value given by `value`. `property` can use dot- and bracket-notation for\n   * nested reference. Uses a deep equality check.\n   *\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { oolong: 'yum' });\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yuck' });\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.black', { matcha: 'yum' });\n   *\n   * @name notDeepNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notDeepNestedPropertyVal, true)\n      .to.not.have.deep.nested.property(prop, val);\n  }\n\n  /**\n   * ### .lengthOf(object, length, [message])\n   *\n   * Asserts that `object` has a `length` or `size` with the expected value.\n   *\n   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');\n   *     assert.lengthOf('foobar', 6, 'string has length of 6');\n   *     assert.lengthOf(new Set([1,2,3]), 3, 'set has size of 3');\n   *     assert.lengthOf(new Map([['a',1],['b',2],['c',3]]), 3, 'map has size of 3');\n   *\n   * @name lengthOf\n   * @param {Mixed} object\n   * @param {Number} length\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.lengthOf = function (exp, len, msg) {\n    new Assertion(exp, msg, assert.lengthOf, true).to.have.lengthOf(len);\n  };\n\n  /**\n   * ### .hasAnyKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has at least one of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'iDontExist', 'baz']);\n   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, iDontExist: 99, baz: 1337});\n   *     assert.hasAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.hasAnyKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name hasAnyKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAnyKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAnyKeys, true).to.have.any.keys(keys);\n  }\n\n  /**\n   * ### .hasAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all and only all of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337]);\n   *     assert.hasAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.hasAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name hasAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAllKeys, true).to.have.all.keys(keys);\n  }\n\n  /**\n   * ### .containsAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all of the `keys` provided but may have more keys not listed.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'baz']);\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, baz: 1337});\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337});\n   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}]);\n   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}]);\n   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name containsAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.containsAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.containsAllKeys, true)\n      .to.contain.all.keys(keys);\n  }\n\n  /**\n   * ### .doesNotHaveAnyKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has none of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n   *     assert.doesNotHaveAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n   *     assert.doesNotHaveAnyKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);\n   *\n   * @name doesNotHaveAnyKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAnyKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAnyKeys, true)\n      .to.not.have.any.keys(keys);\n  }\n\n  /**\n   * ### .doesNotHaveAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` does not have at least one of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n   *     assert.doesNotHaveAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n   *     assert.doesNotHaveAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);\n   *\n   * @name doesNotHaveAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAllKeys, true)\n      .to.not.have.all.keys(keys);\n  }\n\n  /**\n   * ### .hasAnyDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has at least one of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {three: 'three'}]);\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name doesNotHaveAllKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAnyDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAnyDeepKeys, true)\n      .to.have.any.deep.keys(keys);\n  }\n\n /**\n   * ### .hasAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all and only all of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne']]), {one: 'one'});\n   *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAllDeepKeys(new Set([{one: 'one'}]), {one: 'one'});\n   *     assert.hasAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name hasAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAllDeepKeys, true)\n      .to.have.all.deep.keys(keys);\n  }\n\n /**\n   * ### .containsAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` contains all of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n   *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n   *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name containsAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.containsAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.containsAllDeepKeys, true)\n      .to.contain.all.deep.keys(keys);\n  }\n\n /**\n   * ### .doesNotHaveAnyDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has none of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n   *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);\n   *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n   *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);\n   *\n   * @name doesNotHaveAnyDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAnyDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAnyDeepKeys, true)\n      .to.not.have.any.deep.keys(keys);\n  }\n\n /**\n   * ### .doesNotHaveAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` does not have at least one of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n   *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {one: 'one'}]);\n   *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n   *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {fifty: 'fifty'}]);\n   *\n   * @name doesNotHaveAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAllDeepKeys, true)\n      .to.not.have.all.deep.keys(keys);\n  }\n\n /**\n   * ### .throws(fn, [errorLike/string/regexp], [string/regexp], [message])\n   *\n   * If `errorLike` is an `Error` constructor, asserts that `fn` will throw an error that is an\n   * instance of `errorLike`.\n   * If `errorLike` is an `Error` instance, asserts that the error thrown is the same\n   * instance as `errorLike`.\n   * If `errMsgMatcher` is provided, it also asserts that the error thrown will have a\n   * message matching `errMsgMatcher`.\n   *\n   *     assert.throws(fn, 'Error thrown must have this msg');\n   *     assert.throws(fn, /Error thrown must have a msg that matches this/);\n   *     assert.throws(fn, ReferenceError);\n   *     assert.throws(fn, errorInstance);\n   *     assert.throws(fn, ReferenceError, 'Error thrown must be a ReferenceError and have this msg');\n   *     assert.throws(fn, errorInstance, 'Error thrown must be the same errorInstance and have this msg');\n   *     assert.throws(fn, ReferenceError, /Error thrown must be a ReferenceError and match this/);\n   *     assert.throws(fn, errorInstance, /Error thrown must be the same errorInstance and match this/);\n   *\n   * @name throws\n   * @alias throw\n   * @alias Throw\n   * @param {Function} fn\n   * @param {ErrorConstructor|Error} errorLike\n   * @param {RegExp|String} errMsgMatcher\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.throws = function (fn, errorLike, errMsgMatcher, msg) {\n    if ('string' === typeof errorLike || errorLike instanceof RegExp) {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    var assertErr = new Assertion(fn, msg, assert.throws, true)\n      .to.throw(errorLike, errMsgMatcher);\n    return flag(assertErr, 'object');\n  };\n\n  /**\n   * ### .doesNotThrow(fn, [errorLike/string/regexp], [string/regexp], [message])\n   *\n   * If `errorLike` is an `Error` constructor, asserts that `fn` will _not_ throw an error that is an\n   * instance of `errorLike`.\n   * If `errorLike` is an `Error` instance, asserts that the error thrown is _not_ the same\n   * instance as `errorLike`.\n   * If `errMsgMatcher` is provided, it also asserts that the error thrown will _not_ have a\n   * message matching `errMsgMatcher`.\n   *\n   *     assert.doesNotThrow(fn, 'Any Error thrown must not have this message');\n   *     assert.doesNotThrow(fn, /Any Error thrown must not match this/);\n   *     assert.doesNotThrow(fn, Error);\n   *     assert.doesNotThrow(fn, errorInstance);\n   *     assert.doesNotThrow(fn, Error, 'Error must not have this message');\n   *     assert.doesNotThrow(fn, errorInstance, 'Error must not have this message');\n   *     assert.doesNotThrow(fn, Error, /Error must not match this/);\n   *     assert.doesNotThrow(fn, errorInstance, /Error must not match this/);\n   *\n   * @name doesNotThrow\n   * @param {Function} fn\n   * @param {ErrorConstructor} errorLike\n   * @param {RegExp|String} errMsgMatcher\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotThrow = function (fn, errorLike, errMsgMatcher, msg) {\n    if ('string' === typeof errorLike || errorLike instanceof RegExp) {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    new Assertion(fn, msg, assert.doesNotThrow, true)\n      .to.not.throw(errorLike, errMsgMatcher);\n  };\n\n  /**\n   * ### .operator(val1, operator, val2, [message])\n   *\n   * Compares two values using `operator`.\n   *\n   *     assert.operator(1, '<', 2, 'everything is ok');\n   *     assert.operator(1, '>', 2, 'this will fail');\n   *\n   * @name operator\n   * @param {Mixed} val1\n   * @param {String} operator\n   * @param {Mixed} val2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.operator = function (val, operator, val2, msg) {\n    var ok;\n    switch(operator) {\n      case '==':\n        ok = val == val2;\n        break;\n      case '===':\n        ok = val === val2;\n        break;\n      case '>':\n        ok = val > val2;\n        break;\n      case '>=':\n        ok = val >= val2;\n        break;\n      case '<':\n        ok = val < val2;\n        break;\n      case '<=':\n        ok = val <= val2;\n        break;\n      case '!=':\n        ok = val != val2;\n        break;\n      case '!==':\n        ok = val !== val2;\n        break;\n      default:\n        msg = msg ? msg + ': ' : msg;\n        throw new chai.AssertionError(\n          msg + 'Invalid operator \"' + operator + '\"',\n          undefined,\n          assert.operator\n        );\n    }\n    var test = new Assertion(ok, msg, assert.operator, true);\n    test.assert(\n        true === flag(test, 'object')\n      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)\n      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );\n  };\n\n  /**\n   * ### .closeTo(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name closeTo\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.closeTo = function (act, exp, delta, msg) {\n    new Assertion(act, msg, assert.closeTo, true).to.be.closeTo(exp, delta);\n  };\n\n  /**\n   * ### .approximately(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.approximately(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name approximately\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.approximately = function (act, exp, delta, msg) {\n    new Assertion(act, msg, assert.approximately, true)\n      .to.be.approximately(exp, delta);\n  };\n\n  /**\n   * ### .sameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in any order. Uses a\n   * strict equality check (===).\n   *\n   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');\n   *\n   * @name sameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameMembers, true)\n      .to.have.same.members(set2);\n  }\n\n  /**\n   * ### .notSameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in any order.\n   * Uses a strict equality check (===).\n   *\n   *     assert.notSameMembers([ 1, 2, 3 ], [ 5, 1, 3 ], 'not same members');\n   *\n   * @name notSameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameMembers, true)\n      .to.not.have.same.members(set2);\n  }\n\n  /**\n   * ### .sameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in any order. Uses a\n   * deep equality check.\n   *\n   *     assert.sameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { c: 3 }], 'same deep members');\n   *\n   * @name sameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameDeepMembers, true)\n      .to.have.same.deep.members(set2);\n  }\n\n  /**\n   * ### .notSameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in any order.\n   * Uses a deep equality check.\n   *\n   *     assert.notSameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { f: 5 }], 'not same deep members');\n   *\n   * @name notSameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameDeepMembers, true)\n      .to.not.have.same.deep.members(set2);\n  }\n\n  /**\n   * ### .sameOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in the same order.\n   * Uses a strict equality check (===).\n   *\n   *     assert.sameOrderedMembers([ 1, 2, 3 ], [ 1, 2, 3 ], 'same ordered members');\n   *\n   * @name sameOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameOrderedMembers, true)\n      .to.have.same.ordered.members(set2);\n  }\n\n  /**\n   * ### .notSameOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in the same\n   * order. Uses a strict equality check (===).\n   *\n   *     assert.notSameOrderedMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'not same ordered members');\n   *\n   * @name notSameOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameOrderedMembers, true)\n      .to.not.have.same.ordered.members(set2);\n  }\n\n  /**\n   * ### .sameDeepOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in the same order.\n   * Uses a deep equality check.\n   *\n   * assert.sameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { c: 3 } ], 'same deep ordered members');\n   *\n   * @name sameDeepOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameDeepOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameDeepOrderedMembers, true)\n      .to.have.same.deep.ordered.members(set2);\n  }\n\n  /**\n   * ### .notSameDeepOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in the same\n   * order. Uses a deep equality check.\n   *\n   * assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { z: 5 } ], 'not same deep ordered members');\n   * assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { c: 3 } ], 'not same deep ordered members');\n   *\n   * @name notSameDeepOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameDeepOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameDeepOrderedMembers, true)\n      .to.not.have.same.deep.ordered.members(set2);\n  }\n\n  /**\n   * ### .includeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in any order. Uses a\n   * strict equality check (===). Duplicates are ignored.\n   *\n   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1, 2 ], 'include members');\n   *\n   * @name includeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeMembers, true)\n      .to.include.members(subset);\n  }\n\n  /**\n   * ### .notIncludeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in any order. Uses a\n   * strict equality check (===). Duplicates are ignored.\n   *\n   *     assert.notIncludeMembers([ 1, 2, 3 ], [ 5, 1 ], 'not include members');\n   *\n   * @name notIncludeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeMembers, true)\n      .to.not.include.members(subset);\n  }\n\n  /**\n   * ### .includeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in any order. Uses a deep\n   * equality check. Duplicates are ignored.\n   *\n   *     assert.includeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { b: 2 } ], 'include deep members');\n   *\n   * @name includeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeDeepMembers, true)\n      .to.include.deep.members(subset);\n  }\n\n  /**\n   * ### .notIncludeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in any order. Uses a\n   * deep equality check. Duplicates are ignored.\n   *\n   *     assert.notIncludeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { f: 5 } ], 'not include deep members');\n   *\n   * @name notIncludeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeDeepMembers, true)\n      .to.not.include.deep.members(subset);\n  }\n\n  /**\n   * ### .includeOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a strict equality\n   * check (===).\n   *\n   *     assert.includeOrderedMembers([ 1, 2, 3 ], [ 1, 2 ], 'include ordered members');\n   *\n   * @name includeOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeOrderedMembers, true)\n      .to.include.ordered.members(subset);\n  }\n\n  /**\n   * ### .notIncludeOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a strict equality\n   * check (===).\n   *\n   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 1 ], 'not include ordered members');\n   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 3 ], 'not include ordered members');\n   *\n   * @name notIncludeOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeOrderedMembers, true)\n      .to.not.include.ordered.members(subset);\n  }\n\n  /**\n   * ### .includeDeepOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a deep equality\n   * check.\n   *\n   *     assert.includeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 } ], 'include deep ordered members');\n   *\n   * @name includeDeepOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeDeepOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeDeepOrderedMembers, true)\n      .to.include.deep.ordered.members(subset);\n  }\n\n  /**\n   * ### .notIncludeDeepOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a deep equality\n   * check.\n   *\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { f: 5 } ], 'not include deep ordered members');\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 } ], 'not include deep ordered members');\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { c: 3 } ], 'not include deep ordered members');\n   *\n   * @name notIncludeDeepOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeDeepOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeDeepOrderedMembers, true)\n      .to.not.include.deep.ordered.members(subset);\n  }\n\n  /**\n   * ### .oneOf(inList, list, [message])\n   *\n   * Asserts that non-object, non-array value `inList` appears in the flat array `list`.\n   *\n   *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');\n   *\n   * @name oneOf\n   * @param {*} inList\n   * @param {Array<*>} list\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.oneOf = function (inList, list, msg) {\n    new Assertion(inList, msg, assert.oneOf, true).to.be.oneOf(list);\n  }\n\n  /**\n   * ### .changes(function, object, property, [message])\n   *\n   * Asserts that a function changes the value of a property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 22 };\n   *     assert.changes(fn, obj, 'val');\n   *\n   * @name changes\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changes = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changes, true).to.change(obj, prop);\n  }\n\n   /**\n   * ### .changesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function changes the value of a property by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 2 };\n   *     assert.changesBy(fn, obj, 'val', 2);\n   *\n   * @name changesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changesBy, true)\n      .to.change(obj, prop).by(delta);\n  }\n\n   /**\n   * ### .doesNotChange(function, object, property, [message])\n   *\n   * Asserts that a function does not change the value of a property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { console.log('foo'); };\n   *     assert.doesNotChange(fn, obj, 'val');\n   *\n   * @name doesNotChange\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotChange = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotChange, true)\n      .to.not.change(obj, prop);\n  }\n\n  /**\n   * ### .changesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not change the value of a property or of a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 10 };\n   *     assert.changesButNotBy(fn, obj, 'val', 5);\n   *\n   * @name changesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changesButNotBy, true)\n      .to.change(obj, prop).but.not.by(delta);\n  }\n\n  /**\n   * ### .increases(function, object, property, [message])\n   *\n   * Asserts that a function increases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 13 };\n   *     assert.increases(fn, obj, 'val');\n   *\n   * @name increases\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increases = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.increases, true)\n      .to.increase(obj, prop);\n  }\n\n  /**\n   * ### .increasesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function increases a numeric object property or a function's return value by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 10 };\n   *     assert.increasesBy(fn, obj, 'val', 10);\n   *\n   * @name increasesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increasesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.increasesBy, true)\n      .to.increase(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .doesNotIncrease(function, object, property, [message])\n   *\n   * Asserts that a function does not increase a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 8 };\n   *     assert.doesNotIncrease(fn, obj, 'val');\n   *\n   * @name doesNotIncrease\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotIncrease = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotIncrease, true)\n      .to.not.increase(obj, prop);\n  }\n\n  /**\n   * ### .increasesButNotBy(function, object, property, [message])\n   *\n   * Asserts that a function does not increase a numeric object property or function's return value by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.increasesButNotBy(fn, obj, 'val', 10);\n   *\n   * @name increasesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increasesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.increasesButNotBy, true)\n      .to.increase(obj, prop).but.not.by(delta);\n  }\n\n  /**\n   * ### .decreases(function, object, property, [message])\n   *\n   * Asserts that a function decreases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreases(fn, obj, 'val');\n   *\n   * @name decreases\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreases = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.decreases, true)\n      .to.decrease(obj, prop);\n  }\n\n  /**\n   * ### .decreasesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val -= 5 };\n   *     assert.decreasesBy(fn, obj, 'val', 5);\n   *\n   * @name decreasesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreasesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.decreasesBy, true)\n      .to.decrease(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .doesNotDecrease(function, object, property, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.doesNotDecrease(fn, obj, 'val');\n   *\n   * @name doesNotDecrease\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotDecrease = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotDecrease, true)\n      .to.not.decrease(obj, prop);\n  }\n\n  /**\n   * ### .doesNotDecreaseBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.doesNotDecreaseBy(fn, obj, 'val', 1);\n   *\n   * @name doesNotDecrease\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotDecreaseBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotDecreaseBy, true)\n      .to.not.decrease(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .decreasesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreasesButNotBy(fn, obj, 'val', 1);\n   *\n   * @name decreasesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreasesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.decreasesButNotBy, true)\n      .to.decrease(obj, prop).but.not.by(delta);\n  }\n\n  /*!\n   * ### .ifError(object)\n   *\n   * Asserts if value is not a false value, and throws if it is a true value.\n   * This is added to allow for chai to be a drop-in replacement for Node's\n   * assert class.\n   *\n   *     var err = new Error('I am a custom error');\n   *     assert.ifError(err); // Rethrows err!\n   *\n   * @name ifError\n   * @param {Object} object\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.ifError = function (val) {\n    if (val) {\n      throw(val);\n    }\n  };\n\n  /**\n   * ### .isExtensible(object)\n   *\n   * Asserts that `object` is extensible (can have new properties added to it).\n   *\n   *     assert.isExtensible({});\n   *\n   * @name isExtensible\n   * @alias extensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isExtensible = function (obj, msg) {\n    new Assertion(obj, msg, assert.isExtensible, true).to.be.extensible;\n  };\n\n  /**\n   * ### .isNotExtensible(object)\n   *\n   * Asserts that `object` is _not_ extensible.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({});\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     assert.isNotExtensible(nonExtensibleObject);\n   *     assert.isNotExtensible(sealedObject);\n   *     assert.isNotExtensible(frozenObject);\n   *\n   * @name isNotExtensible\n   * @alias notExtensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotExtensible = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotExtensible, true).to.not.be.extensible;\n  };\n\n  /**\n   * ### .isSealed(object)\n   *\n   * Asserts that `object` is sealed (cannot have new properties added to it\n   * and its existing properties cannot be removed).\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.seal({});\n   *\n   *     assert.isSealed(sealedObject);\n   *     assert.isSealed(frozenObject);\n   *\n   * @name isSealed\n   * @alias sealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isSealed = function (obj, msg) {\n    new Assertion(obj, msg, assert.isSealed, true).to.be.sealed;\n  };\n\n  /**\n   * ### .isNotSealed(object)\n   *\n   * Asserts that `object` is _not_ sealed.\n   *\n   *     assert.isNotSealed({});\n   *\n   * @name isNotSealed\n   * @alias notSealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotSealed = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotSealed, true).to.not.be.sealed;\n  };\n\n  /**\n   * ### .isFrozen(object)\n   *\n   * Asserts that `object` is frozen (cannot have new properties added to it\n   * and its existing properties cannot be modified).\n   *\n   *     var frozenObject = Object.freeze({});\n   *     assert.frozen(frozenObject);\n   *\n   * @name isFrozen\n   * @alias frozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFrozen = function (obj, msg) {\n    new Assertion(obj, msg, assert.isFrozen, true).to.be.frozen;\n  };\n\n  /**\n   * ### .isNotFrozen(object)\n   *\n   * Asserts that `object` is _not_ frozen.\n   *\n   *     assert.isNotFrozen({});\n   *\n   * @name isNotFrozen\n   * @alias notFrozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFrozen = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotFrozen, true).to.not.be.frozen;\n  };\n\n  /**\n   * ### .isEmpty(target)\n   *\n   * Asserts that the target does not contain any values.\n   * For arrays and strings, it checks the `length` property.\n   * For `Map` and `Set` instances, it checks the `size` property.\n   * For non-function objects, it gets the count of own\n   * enumerable string keys.\n   *\n   *     assert.isEmpty([]);\n   *     assert.isEmpty('');\n   *     assert.isEmpty(new Map);\n   *     assert.isEmpty({});\n   *\n   * @name isEmpty\n   * @alias empty\n   * @param {Object|Array|String|Map|Set} target\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isEmpty = function(val, msg) {\n    new Assertion(val, msg, assert.isEmpty, true).to.be.empty;\n  };\n\n  /**\n   * ### .isNotEmpty(target)\n   *\n   * Asserts that the target contains values.\n   * For arrays and strings, it checks the `length` property.\n   * For `Map` and `Set` instances, it checks the `size` property.\n   * For non-function objects, it gets the count of own\n   * enumerable string keys.\n   *\n   *     assert.isNotEmpty([1, 2]);\n   *     assert.isNotEmpty('34');\n   *     assert.isNotEmpty(new Set([5, 6]));\n   *     assert.isNotEmpty({ key: 7 });\n   *\n   * @name isNotEmpty\n   * @alias notEmpty\n   * @param {Object|Array|String|Map|Set} target\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotEmpty = function(val, msg) {\n    new Assertion(val, msg, assert.isNotEmpty, true).to.not.be.empty;\n  };\n\n  /*!\n   * Aliases.\n   */\n\n  (function alias(name, as){\n    assert[as] = assert[name];\n    return alias;\n  })\n  ('isOk', 'ok')\n  ('isNotOk', 'notOk')\n  ('throws', 'throw')\n  ('throws', 'Throw')\n  ('isExtensible', 'extensible')\n  ('isNotExtensible', 'notExtensible')\n  ('isSealed', 'sealed')\n  ('isNotSealed', 'notSealed')\n  ('isFrozen', 'frozen')\n  ('isNotFrozen', 'notFrozen')\n  ('isEmpty', 'empty')\n  ('isNotEmpty', 'notEmpty');\n};\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  chai.expect = function (val, message) {\n    return new chai.Assertion(val, message);\n  };\n\n  /**\n   * ### .fail([message])\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure.\n   *\n   *     expect.fail();\n   *     expect.fail(\"custom error message\");\n   *     expect.fail(1, 2);\n   *     expect.fail(1, 2, \"custom error message\");\n   *     expect.fail(1, 2, \"custom error message\", \">\");\n   *     expect.fail(1, 2, undefined, \">\");\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace BDD\n   * @api public\n   */\n\n  chai.expect.fail = function (actual, expected, message, operator) {\n    if (arguments.length < 2) {\n        message = actual;\n        actual = undefined;\n    }\n\n    message = message || 'expect.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, chai.expect.fail);\n  };\n};\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  var Assertion = chai.Assertion;\n\n  function loadShould () {\n    // explicitly define this method as function as to have it's name to include as `ssfi`\n    function shouldGetter() {\n      if (this instanceof String\n          || this instanceof Number\n          || this instanceof Boolean\n          || typeof Symbol === 'function' && this instanceof Symbol) {\n        return new Assertion(this.valueOf(), null, shouldGetter);\n      }\n      return new Assertion(this, null, shouldGetter);\n    }\n    function shouldSetter(value) {\n      // See https://github.com/chaijs/chai/issues/86: this makes\n      // `whatever.should = someValue` actually set `someValue`, which is\n      // especially useful for `global.should = require('chai').should()`.\n      //\n      // Note that we have to use [[DefineProperty]] instead of [[Put]]\n      // since otherwise we would trigger this very setter!\n      Object.defineProperty(this, 'should', {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    }\n    // modify Object.prototype to have `should`\n    Object.defineProperty(Object.prototype, 'should', {\n      set: shouldSetter\n      , get: shouldGetter\n      , configurable: true\n    });\n\n    var should = {};\n\n    /**\n     * ### .fail([message])\n     * ### .fail(actual, expected, [message], [operator])\n     *\n     * Throw a failure.\n     *\n     *     should.fail();\n     *     should.fail(\"custom error message\");\n     *     should.fail(1, 2);\n     *     should.fail(1, 2, \"custom error message\");\n     *     should.fail(1, 2, \"custom error message\", \">\");\n     *     should.fail(1, 2, undefined, \">\");\n     *\n     *\n     * @name fail\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @param {String} operator\n     * @namespace BDD\n     * @api public\n     */\n\n    should.fail = function (actual, expected, message, operator) {\n      if (arguments.length < 2) {\n          message = actual;\n          actual = undefined;\n      }\n\n      message = message || 'should.fail()';\n      throw new chai.AssertionError(message, {\n          actual: actual\n        , expected: expected\n        , operator: operator\n      }, should.fail);\n    };\n\n    /**\n     * ### .equal(actual, expected, [message])\n     *\n     * Asserts non-strict equality (`==`) of `actual` and `expected`.\n     *\n     *     should.equal(3, '3', '== coerces values to strings');\n     *\n     * @name equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])\n     *\n     * Asserts that `function` will throw an error that is an instance of\n     * `constructor`, or alternately that it will throw an error with message\n     * matching `regexp`.\n     *\n     *     should.throw(fn, 'function throws a reference error');\n     *     should.throw(fn, /function throws a reference error/);\n     *     should.throw(fn, ReferenceError);\n     *     should.throw(fn, ReferenceError, 'function throws a reference error');\n     *     should.throw(fn, ReferenceError, /function throws a reference error/);\n     *\n     * @name throw\n     * @alias Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.Throw(errt, errs);\n    };\n\n    /**\n     * ### .exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var foo = 'hi';\n     *\n     *     should.exist(foo, 'foo exists');\n     *\n     * @name exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.exist = function (val, msg) {\n      new Assertion(val, msg).to.exist;\n    }\n\n    // negation\n    should.not = {}\n\n    /**\n     * ### .not.equal(actual, expected, [message])\n     *\n     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n     *\n     *     should.not.equal(3, 4, 'these numbers are not equal');\n     *\n     * @name not.equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.not.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/regexp], [message])\n     *\n     * Asserts that `function` will _not_ throw an error that is an instance of\n     * `constructor`, or alternately that it will not throw an error with message\n     * matching `regexp`.\n     *\n     *     should.not.throw(fn, Error, 'function does not throw');\n     *\n     * @name not.throw\n     * @alias not.Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.not.Throw(errt, errs);\n    };\n\n    /**\n     * ### .not.exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var bar = null;\n     *\n     *     should.not.exist(bar, 'bar does not exist');\n     *\n     * @name not.exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.exist = function (val, msg) {\n      new Assertion(val, msg).to.not.exist;\n    }\n\n    should['throw'] = should['Throw'];\n    should.not['throw'] = should.not['Throw'];\n\n    return should;\n  };\n\n  chai.should = loadShould;\n  chai.Should = loadShould;\n};\n","/*!\n * Chai - addChainingMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/*!\n * Module variables\n */\n\n// Check whether `Object.setPrototypeOf` is supported\nvar canSetPrototype = typeof Object.setPrototypeOf === 'function';\n\n// Without `Object.setPrototypeOf` support, this module will need to add properties to a function.\n// However, some of functions' own props are not configurable and should be skipped.\nvar testFn = function() {};\nvar excludeNames = Object.getOwnPropertyNames(testFn).filter(function(name) {\n  var propDesc = Object.getOwnPropertyDescriptor(testFn, name);\n\n  // Note: PhantomJS 1.x includes `callee` as one of `testFn`'s own properties,\n  // but then returns `undefined` as the property descriptor for `callee`. As a\n  // workaround, we perform an otherwise unnecessary type-check for `propDesc`,\n  // and then filter it out if it's not an object as it should be.\n  if (typeof propDesc !== 'object')\n    return true;\n\n  return !propDesc.configurable;\n});\n\n// Cache `Function` properties\nvar call  = Function.prototype.call,\n    apply = Function.prototype.apply;\n\n/**\n * ### .addChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Adds a method to an object, such that the method can also be chained.\n *\n *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n *\n * The result can then be used as both a method assertion, executing both `method` and\n * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\n *\n *     expect(fooStr).to.be.foo('bar');\n *     expect(fooStr).to.be.foo.equal('foo');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for `name`, when called\n * @param {Function} chainingBehavior function to be called every time the property is accessed\n * @namespace Utils\n * @name addChainableMethod\n * @api public\n */\n\nmodule.exports = function addChainableMethod(ctx, name, method, chainingBehavior) {\n  if (typeof chainingBehavior !== 'function') {\n    chainingBehavior = function () { };\n  }\n\n  var chainableBehavior = {\n      method: method\n    , chainingBehavior: chainingBehavior\n  };\n\n  // save the methods so we can overwrite them later, if we need to.\n  if (!ctx.__methods) {\n    ctx.__methods = {};\n  }\n  ctx.__methods[name] = chainableBehavior;\n\n  Object.defineProperty(ctx, name,\n    { get: function chainableMethodGetter() {\n        chainableBehavior.chainingBehavior.call(this);\n\n        var chainableMethodWrapper = function () {\n          // Setting the `ssfi` flag to `chainableMethodWrapper` causes this\n          // function to be the starting point for removing implementation\n          // frames from the stack trace of a failed assertion.\n          //\n          // However, we only want to use this function as the starting point if\n          // the `lockSsfi` flag isn't set.\n          //\n          // If the `lockSsfi` flag is set, then this assertion is being\n          // invoked from inside of another assertion. In this case, the `ssfi`\n          // flag has already been set by the outer assertion.\n          //\n          // Note that overwriting a chainable method merely replaces the saved\n          // methods in `ctx.__methods` instead of completely replacing the\n          // overwritten assertion. Therefore, an overwriting assertion won't\n          // set the `ssfi` or `lockSsfi` flags.\n          if (!flag(this, 'lockSsfi')) {\n            flag(this, 'ssfi', chainableMethodWrapper);\n          }\n\n          var result = chainableBehavior.method.apply(this, arguments);\n          if (result !== undefined) {\n            return result;\n          }\n\n          var newAssertion = new chai.Assertion();\n          transferFlags(this, newAssertion);\n          return newAssertion;\n        };\n\n        addLengthGuard(chainableMethodWrapper, name, true);\n\n        // Use `Object.setPrototypeOf` if available\n        if (canSetPrototype) {\n          // Inherit all properties from the object by replacing the `Function` prototype\n          var prototype = Object.create(this);\n          // Restore the `call` and `apply` methods from `Function`\n          prototype.call = call;\n          prototype.apply = apply;\n          Object.setPrototypeOf(chainableMethodWrapper, prototype);\n        }\n        // Otherwise, redefine all properties (slow!)\n        else {\n          var asserterNames = Object.getOwnPropertyNames(ctx);\n          asserterNames.forEach(function (asserterName) {\n            if (excludeNames.indexOf(asserterName) !== -1) {\n              return;\n            }\n\n            var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);\n            Object.defineProperty(chainableMethodWrapper, asserterName, pd);\n          });\n        }\n\n        transferFlags(this, chainableMethodWrapper);\n        return proxify(chainableMethodWrapper);\n      }\n    , configurable: true\n  });\n};\n","var fnLengthDesc = Object.getOwnPropertyDescriptor(function () {}, 'length');\n\n/*!\n * Chai - addLengthGuard utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .addLengthGuard(fn, assertionName, isChainable)\n *\n * Define `length` as a getter on the given uninvoked method assertion. The\n * getter acts as a guard against chaining `length` directly off of an uninvoked\n * method assertion, which is a problem because it references `function`'s\n * built-in `length` property instead of Chai's `length` assertion. When the\n * getter catches the user making this mistake, it throws an error with a\n * helpful message.\n *\n * There are two ways in which this mistake can be made. The first way is by\n * chaining the `length` assertion directly off of an uninvoked chainable\n * method. In this case, Chai suggests that the user use `lengthOf` instead. The\n * second way is by chaining the `length` assertion directly off of an uninvoked\n * non-chainable method. Non-chainable methods must be invoked prior to\n * chaining. In this case, Chai suggests that the user consult the docs for the\n * given assertion.\n *\n * If the `length` property of functions is unconfigurable, then return `fn`\n * without modification.\n *\n * Note that in ES6, the function's `length` property is configurable, so once\n * support for legacy environments is dropped, Chai's `length` property can\n * replace the built-in function's `length` property, and this length guard will\n * no longer be necessary. In the mean time, maintaining consistency across all\n * environments is the priority.\n *\n * @param {Function} fn\n * @param {String} assertionName\n * @param {Boolean} isChainable\n * @namespace Utils\n * @name addLengthGuard\n */\n\nmodule.exports = function addLengthGuard (fn, assertionName, isChainable) {\n  if (!fnLengthDesc.configurable) return fn;\n\n  Object.defineProperty(fn, 'length', {\n    get: function () {\n      if (isChainable) {\n        throw Error('Invalid Chai property: ' + assertionName + '.length. Due' +\n          ' to a compatibility issue, \"length\" cannot directly follow \"' +\n          assertionName + '\". Use \"' + assertionName + '.lengthOf\" instead.');\n      }\n\n      throw Error('Invalid Chai property: ' + assertionName + '.length. See' +\n        ' docs for proper usage of \"' + assertionName + '\".');\n    }\n  });\n\n  return fn;\n};\n","/*!\n * Chai - addMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .addMethod(ctx, name, method)\n *\n * Adds a method to the prototype of an object.\n *\n *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(fooStr).to.be.foo('bar');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for name\n * @namespace Utils\n * @name addMethod\n * @api public\n */\n\nmodule.exports = function addMethod(ctx, name, method) {\n  var methodWrapper = function () {\n    // Setting the `ssfi` flag to `methodWrapper` causes this function to be the\n    // starting point for removing implementation frames from the stack trace of\n    // a failed assertion.\n    //\n    // However, we only want to use this function as the starting point if the\n    // `lockSsfi` flag isn't set.\n    //\n    // If the `lockSsfi` flag is set, then either this assertion has been\n    // overwritten by another assertion, or this assertion is being invoked from\n    // inside of another assertion. In the first case, the `ssfi` flag has\n    // already been set by the overwriting assertion. In the second case, the\n    // `ssfi` flag has already been set by the outer assertion.\n    if (!flag(this, 'lockSsfi')) {\n      flag(this, 'ssfi', methodWrapper);\n    }\n\n    var result = method.apply(this, arguments);\n    if (result !== undefined)\n      return result;\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n\n  addLengthGuard(methodWrapper, name, false);\n  ctx[name] = proxify(methodWrapper, name);\n};\n","/*!\n * Chai - addProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar isProxyEnabled = require('./isProxyEnabled');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .addProperty(ctx, name, getter)\n *\n * Adds a property to the prototype of an object.\n *\n *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.instanceof(Foo);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.foo;\n *\n * @param {Object} ctx object to which the property is added\n * @param {String} name of property to add\n * @param {Function} getter function to be used for name\n * @namespace Utils\n * @name addProperty\n * @api public\n */\n\nmodule.exports = function addProperty(ctx, name, getter) {\n  getter = getter === undefined ? function () {} : getter;\n\n  Object.defineProperty(ctx, name,\n    { get: function propertyGetter() {\n        // Setting the `ssfi` flag to `propertyGetter` causes this function to\n        // be the starting point for removing implementation frames from the\n        // stack trace of a failed assertion.\n        //\n        // However, we only want to use this function as the starting point if\n        // the `lockSsfi` flag isn't set and proxy protection is disabled.\n        //\n        // If the `lockSsfi` flag is set, then either this assertion has been\n        // overwritten by another assertion, or this assertion is being invoked\n        // from inside of another assertion. In the first case, the `ssfi` flag\n        // has already been set by the overwriting assertion. In the second\n        // case, the `ssfi` flag has already been set by the outer assertion.\n        //\n        // If proxy protection is enabled, then the `ssfi` flag has already been\n        // set by the proxy getter.\n        if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {\n          flag(this, 'ssfi', propertyGetter);\n        }\n\n        var result = getter.call(this);\n        if (result !== undefined)\n          return result;\n\n        var newAssertion = new chai.Assertion();\n        transferFlags(this, newAssertion);\n        return newAssertion;\n      }\n    , configurable: true\n  });\n};\n","/*!\n * Chai - compareByInspect utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar inspect = require('./inspect');\n\n/**\n * ### .compareByInspect(mixed, mixed)\n *\n * To be used as a compareFunction with Array.prototype.sort. Compares elements\n * using inspect instead of default behavior of using toString so that Symbols\n * and objects with irregular/missing toString can still be sorted without a\n * TypeError.\n *\n * @param {Mixed} first element to compare\n * @param {Mixed} second element to compare\n * @returns {Number} -1 if 'a' should come before 'b'; otherwise 1\n * @name compareByInspect\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function compareByInspect(a, b) {\n  return inspect(a) < inspect(b) ? -1 : 1;\n};\n","/*!\n * Chai - expectTypes utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .expectTypes(obj, types)\n *\n * Ensures that the object being tested against is of a valid type.\n *\n *     utils.expectTypes(this, ['array', 'object', 'string']);\n *\n * @param {Mixed} obj constructed Assertion\n * @param {Array} type A list of allowed types for this assertion\n * @namespace Utils\n * @name expectTypes\n * @api public\n */\n\nvar AssertionError = require('assertion-error');\nvar flag = require('./flag');\nvar type = require('type-detect');\n\nmodule.exports = function expectTypes(obj, types) {\n  var flagMsg = flag(obj, 'message');\n  var ssfi = flag(obj, 'ssfi');\n\n  flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n  obj = flag(obj, 'object');\n  types = types.map(function (t) { return t.toLowerCase(); });\n  types.sort();\n\n  // Transforms ['lorem', 'ipsum'] into 'a lorem, or an ipsum'\n  var str = types.map(function (t, index) {\n    var art = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(t.charAt(0)) ? 'an' : 'a';\n    var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';\n    return or + art + ' ' + t;\n  }).join(', ');\n\n  var objType = type(obj).toLowerCase();\n\n  if (!types.some(function (expected) { return objType === expected; })) {\n    throw new AssertionError(\n      flagMsg + 'object tested must be ' + str + ', but ' + objType + ' given',\n      undefined,\n      ssfi\n    );\n  }\n};\n","/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .flag(object, key, [value])\n *\n * Get or set a flag value on an object. If a\n * value is provided it will be set, else it will\n * return the currently set value or `undefined` if\n * the value is not set.\n *\n *     utils.flag(this, 'foo', 'bar'); // setter\n *     utils.flag(this, 'foo'); // getter, returns `bar`\n *\n * @param {Object} object constructed Assertion\n * @param {String} key\n * @param {Mixed} value (optional)\n * @namespace Utils\n * @name flag\n * @api private\n */\n\nmodule.exports = function flag(obj, key, value) {\n  var flags = obj.__flags || (obj.__flags = Object.create(null));\n  if (arguments.length === 3) {\n    flags[key] = value;\n  } else {\n    return flags[key];\n  }\n};\n","/*!\n * Chai - getActual utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getActual(object, [actual])\n *\n * Returns the `actual` value for an Assertion.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getActual\n */\n\nmodule.exports = function getActual(obj, args) {\n  return args.length > 4 ? args[4] : obj._obj;\n};\n","/*!\n * Chai - getEnumerableProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getEnumerableProperties(object)\n *\n * This allows the retrieval of enumerable property names of an object,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getEnumerableProperties\n * @api public\n */\n\nmodule.exports = function getEnumerableProperties(object) {\n  var result = [];\n  for (var name in object) {\n    result.push(name);\n  }\n  return result;\n};\n","/*!\n * Chai - message composition utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar flag = require('./flag')\n  , getActual = require('./getActual')\n  , objDisplay = require('./objDisplay');\n\n/**\n * ### .getMessage(object, message, negateMessage)\n *\n * Construct the error message based on flags\n * and template tags. Template tags will return\n * a stringified inspection of the object referenced.\n *\n * Message template tags:\n * - `#{this}` current asserted object\n * - `#{act}` actual value\n * - `#{exp}` expected value\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getMessage\n * @api public\n */\n\nmodule.exports = function getMessage(obj, args) {\n  var negate = flag(obj, 'negate')\n    , val = flag(obj, 'object')\n    , expected = args[3]\n    , actual = getActual(obj, args)\n    , msg = negate ? args[2] : args[1]\n    , flagMsg = flag(obj, 'message');\n\n  if(typeof msg === \"function\") msg = msg();\n  msg = msg || '';\n  msg = msg\n    .replace(/#\\{this\\}/g, function () { return objDisplay(val); })\n    .replace(/#\\{act\\}/g, function () { return objDisplay(actual); })\n    .replace(/#\\{exp\\}/g, function () { return objDisplay(expected); });\n\n  return flagMsg ? flagMsg + ': ' + msg : msg;\n};\n","/*!\n * Chai - getOwnEnumerableProperties utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar getOwnEnumerablePropertySymbols = require('./getOwnEnumerablePropertySymbols');\n\n/**\n * ### .getOwnEnumerableProperties(object)\n *\n * This allows the retrieval of directly-owned enumerable property names and\n * symbols of an object. This function is necessary because Object.keys only\n * returns enumerable property names, not enumerable property symbols.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getOwnEnumerableProperties\n * @api public\n */\n\nmodule.exports = function getOwnEnumerableProperties(obj) {\n  return Object.keys(obj).concat(getOwnEnumerablePropertySymbols(obj));\n};\n","/*!\n * Chai - getOwnEnumerablePropertySymbols utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getOwnEnumerablePropertySymbols(object)\n *\n * This allows the retrieval of directly-owned enumerable property symbols of an\n * object. This function is necessary because Object.getOwnPropertySymbols\n * returns both enumerable and non-enumerable property symbols.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getOwnEnumerablePropertySymbols\n * @api public\n */\n\nmodule.exports = function getOwnEnumerablePropertySymbols(obj) {\n  if (typeof Object.getOwnPropertySymbols !== 'function') return [];\n\n  return Object.getOwnPropertySymbols(obj).filter(function (sym) {\n    return Object.getOwnPropertyDescriptor(obj, sym).enumerable;\n  });\n};\n","/*!\n * Chai - getProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getProperties(object)\n *\n * This allows the retrieval of property names of an object, enumerable or not,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getProperties\n * @api public\n */\n\nmodule.exports = function getProperties(object) {\n  var result = Object.getOwnPropertyNames(object);\n\n  function addProperty(property) {\n    if (result.indexOf(property) === -1) {\n      result.push(property);\n    }\n  }\n\n  var proto = Object.getPrototypeOf(object);\n  while (proto !== null) {\n    Object.getOwnPropertyNames(proto).forEach(addProperty);\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return result;\n};\n","/*!\n * chai\n * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Dependencies that are used for multiple exports are required here only once\n */\n\nvar pathval = require('pathval');\n\n/*!\n * test utility\n */\n\nexports.test = require('./test');\n\n/*!\n * type utility\n */\n\nexports.type = require('type-detect');\n\n/*!\n * expectTypes utility\n */\nexports.expectTypes = require('./expectTypes');\n\n/*!\n * message utility\n */\n\nexports.getMessage = require('./getMessage');\n\n/*!\n * actual utility\n */\n\nexports.getActual = require('./getActual');\n\n/*!\n * Inspect util\n */\n\nexports.inspect = require('./inspect');\n\n/*!\n * Object Display util\n */\n\nexports.objDisplay = require('./objDisplay');\n\n/*!\n * Flag utility\n */\n\nexports.flag = require('./flag');\n\n/*!\n * Flag transferring utility\n */\n\nexports.transferFlags = require('./transferFlags');\n\n/*!\n * Deep equal utility\n */\n\nexports.eql = require('deep-eql');\n\n/*!\n * Deep path info\n */\n\nexports.getPathInfo = pathval.getPathInfo;\n\n/*!\n * Check if a property exists\n */\n\nexports.hasProperty = pathval.hasProperty;\n\n/*!\n * Function name\n */\n\nexports.getName = require('get-func-name');\n\n/*!\n * add Property\n */\n\nexports.addProperty = require('./addProperty');\n\n/*!\n * add Method\n */\n\nexports.addMethod = require('./addMethod');\n\n/*!\n * overwrite Property\n */\n\nexports.overwriteProperty = require('./overwriteProperty');\n\n/*!\n * overwrite Method\n */\n\nexports.overwriteMethod = require('./overwriteMethod');\n\n/*!\n * Add a chainable method\n */\n\nexports.addChainableMethod = require('./addChainableMethod');\n\n/*!\n * Overwrite chainable method\n */\n\nexports.overwriteChainableMethod = require('./overwriteChainableMethod');\n\n/*!\n * Compare by inspect method\n */\n\nexports.compareByInspect = require('./compareByInspect');\n\n/*!\n * Get own enumerable property symbols method\n */\n\nexports.getOwnEnumerablePropertySymbols = require('./getOwnEnumerablePropertySymbols');\n\n/*!\n * Get own enumerable properties method\n */\n\nexports.getOwnEnumerableProperties = require('./getOwnEnumerableProperties');\n\n/*!\n * Checks error against a given set of criteria\n */\n\nexports.checkError = require('check-error');\n\n/*!\n * Proxify util\n */\n\nexports.proxify = require('./proxify');\n\n/*!\n * addLengthGuard util\n */\n\nexports.addLengthGuard = require('./addLengthGuard');\n\n/*!\n * isProxyEnabled helper\n */\n\nexports.isProxyEnabled = require('./isProxyEnabled');\n\n/*!\n * isNaN method\n */\n\nexports.isNaN = require('./isNaN');\n","// This is (almost) directly from Node.js utils\n// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js\n\nvar getName = require('get-func-name');\nvar getProperties = require('./getProperties');\nvar getEnumerableProperties = require('./getEnumerableProperties');\nvar config = require('../config');\n\nmodule.exports = inspect;\n\n/**\n * ### .inspect(obj, [showHidden], [depth], [colors])\n *\n * Echoes the value of a value. Tries to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Boolean} showHidden Flag that shows hidden (not enumerable)\n *    properties of objects. Default is false.\n * @param {Number} depth Depth in which to descend in object. Default is 2.\n * @param {Boolean} colors Flag to turn on ANSI escape codes to color the\n *    output. Default is false (no coloring).\n * @namespace Utils\n * @name inspect\n */\nfunction inspect(obj, showHidden, depth, colors) {\n  var ctx = {\n    showHidden: showHidden,\n    seen: [],\n    stylize: function (str) { return str; }\n  };\n  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));\n}\n\n// Returns true if object is a DOM element.\nvar isDOMElement = function (object) {\n  if (typeof HTMLElement === 'object') {\n    return object instanceof HTMLElement;\n  } else {\n    return object &&\n      typeof object === 'object' &&\n      'nodeType' in object &&\n      object.nodeType === 1 &&\n      typeof object.nodeName === 'string';\n  }\n};\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (value && typeof value.inspect === 'function' &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (typeof ret !== 'string') {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // If this is a DOM element, try to get the outer HTML.\n  if (isDOMElement(value)) {\n    if ('outerHTML' in value) {\n      return value.outerHTML;\n      // This value does not have an outerHTML attribute,\n      //   it could still be an XML element\n    } else {\n      // Attempt to serialize it\n      try {\n        if (document.xmlVersion) {\n          var xmlSerializer = new XMLSerializer();\n          return xmlSerializer.serializeToString(value);\n        } else {\n          // Firefox 11- do not support outerHTML\n          //   It does, however, support innerHTML\n          //   Use the following to render the element\n          var ns = \"http://www.w3.org/1999/xhtml\";\n          var container = document.createElementNS(ns, '_');\n\n          container.appendChild(value.cloneNode(false));\n          var html = container.innerHTML\n            .replace('><', '>' + value.innerHTML + '<');\n          container.innerHTML = '';\n          return html;\n        }\n      } catch (err) {\n        // This could be a non-native DOM implementation,\n        //   continue with the normal flow:\n        //   printing the element as if it is an object.\n      }\n    }\n  }\n\n  // Look up the keys of the object.\n  var visibleKeys = getEnumerableProperties(value);\n  var keys = ctx.showHidden ? getProperties(value) : visibleKeys;\n\n  var name, nameSuffix;\n\n  // Some type of object without properties can be shortcut.\n  // In IE, errors have a single `stack` property, or if they are vanilla `Error`,\n  // a `stack` plus `description` property; ignore those for consistency.\n  if (keys.length === 0 || (isError(value) && (\n      (keys.length === 1 && keys[0] === 'stack') ||\n      (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')\n     ))) {\n    if (typeof value === 'function') {\n      name = getName(value);\n      nameSuffix = name ? ': ' + name : '';\n      return ctx.stylize('[Function' + nameSuffix + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = ''\n    , array = false\n    , typedArray = false\n    , braces = ['{', '}'];\n\n  if (isTypedArray(value)) {\n    typedArray = true;\n    braces = ['[', ']'];\n  }\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (typeof value === 'function') {\n    name = getName(value);\n    nameSuffix = name ? ': ' + name : '';\n    base = ' [Function' + nameSuffix + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    return formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else if (typedArray) {\n    return formatTypedArray(value);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\nfunction formatPrimitive(ctx, value) {\n  switch (typeof value) {\n    case 'undefined':\n      return ctx.stylize('undefined', 'undefined');\n\n    case 'string':\n      var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                               .replace(/'/g, \"\\\\'\")\n                                               .replace(/\\\\\"/g, '\"') + '\\'';\n      return ctx.stylize(simple, 'string');\n\n    case 'number':\n      if (value === 0 && (1/value) === -Infinity) {\n        return ctx.stylize('-0', 'number');\n      }\n      return ctx.stylize('' + value, 'number');\n\n    case 'boolean':\n      return ctx.stylize('' + value, 'boolean');\n\n    case 'symbol':\n      return ctx.stylize(value.toString(), 'symbol');\n  }\n  // For some reason typeof null is \"object\", so special case here.\n  if (value === null) {\n    return ctx.stylize('null', 'null');\n  }\n}\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (Object.prototype.hasOwnProperty.call(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\nfunction formatTypedArray(value) {\n  var str = '[ ';\n\n  for (var i = 0; i < value.length; ++i) {\n    if (str.length >= config.truncateThreshold - 7) {\n      str += '...';\n      break;\n    }\n    str += value[i] + ', ';\n  }\n  str += ' ]';\n\n  // Removing trailing `, ` if the array was not truncated\n  if (str.indexOf(',  ]') !== -1) {\n    str = str.replace(',  ]', ' ]');\n  }\n\n  return str;\n}\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name;\n  var propDescriptor = Object.getOwnPropertyDescriptor(value, key);\n  var str;\n\n  if (propDescriptor) {\n    if (propDescriptor.get) {\n      if (propDescriptor.set) {\n        str = ctx.stylize('[Getter/Setter]', 'special');\n      } else {\n        str = ctx.stylize('[Getter]', 'special');\n      }\n    } else {\n      if (propDescriptor.set) {\n        str = ctx.stylize('[Setter]', 'special');\n      }\n    }\n  }\n  if (visibleKeys.indexOf(key) < 0) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(value[key]) < 0) {\n      if (recurseTimes === null) {\n        str = formatValue(ctx, value[key], null);\n      } else {\n        str = formatValue(ctx, value[key], recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (typeof name === 'undefined') {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\nfunction reduceToSingleString(output, base, braces) {\n  var length = output.reduce(function(prev, cur) {\n    return prev + cur.length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\nfunction isTypedArray(ar) {\n  // Unfortunately there's no way to check if an object is a TypedArray\n  // We have to check if it's one of these types\n  return (typeof ar === 'object' && /\\w+Array]$/.test(objectToString(ar)));\n}\n\nfunction isArray(ar) {\n  return Array.isArray(ar) ||\n         (typeof ar === 'object' && objectToString(ar) === '[object Array]');\n}\n\nfunction isRegExp(re) {\n  return typeof re === 'object' && objectToString(re) === '[object RegExp]';\n}\n\nfunction isDate(d) {\n  return typeof d === 'object' && objectToString(d) === '[object Date]';\n}\n\nfunction isError(e) {\n  return typeof e === 'object' && objectToString(e) === '[object Error]';\n}\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n","/*!\n * Chai - isNaN utility\n * Copyright(c) 2012-2015 Sakthipriyan Vairamani <thechargingvolcano@gmail.com>\n * MIT Licensed\n */\n\n/**\n * ### .isNaN(value)\n *\n * Checks if the given value is NaN or not.\n *\n *     utils.isNaN(NaN); // true\n *\n * @param {Value} The value which has to be checked if it is NaN\n * @name isNaN\n * @api private\n */\n\nfunction isNaN(value) {\n  // Refer http://www.ecma-international.org/ecma-262/6.0/#sec-isnan-number\n  // section's NOTE.\n  return value !== value;\n}\n\n// If ECMAScript 6's Number.isNaN is present, prefer that.\nmodule.exports = Number.isNaN || isNaN;\n","var config = require('../config');\n\n/*!\n * Chai - isProxyEnabled helper\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .isProxyEnabled()\n *\n * Helper function to check if Chai's proxy protection feature is enabled. If\n * proxies are unsupported or disabled via the user's Chai config, then return\n * false. Otherwise, return true.\n *\n * @namespace Utils\n * @name isProxyEnabled\n */\n\nmodule.exports = function isProxyEnabled() {\n  return config.useProxy &&\n    typeof Proxy !== 'undefined' &&\n    typeof Reflect !== 'undefined';\n};\n","/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar inspect = require('./inspect');\nvar config = require('../config');\n\n/**\n * ### .objDisplay(object)\n *\n * Determines if an object or an array matches\n * criteria to be inspected in-line for error\n * messages or should be truncated.\n *\n * @param {Mixed} javascript object to inspect\n * @name objDisplay\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function objDisplay(obj) {\n  var str = inspect(obj)\n    , type = Object.prototype.toString.call(obj);\n\n  if (config.truncateThreshold && str.length >= config.truncateThreshold) {\n    if (type === '[object Function]') {\n      return !obj.name || obj.name === ''\n        ? '[Function]'\n        : '[Function: ' + obj.name + ']';\n    } else if (type === '[object Array]') {\n      return '[ Array(' + obj.length + ') ]';\n    } else if (type === '[object Object]') {\n      var keys = Object.keys(obj)\n        , kstr = keys.length > 2\n          ? keys.splice(0, 2).join(', ') + ', ...'\n          : keys.join(', ');\n      return '{ Object (' + kstr + ') }';\n    } else {\n      return str;\n    }\n  } else {\n    return str;\n  }\n};\n","/*!\n * Chai - overwriteChainableMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Overwrites an already existing chainable method\n * and provides access to the previous function or\n * property.  Must return functions to be used for\n * name.\n *\n *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'lengthOf',\n *       function (_super) {\n *       }\n *     , function (_super) {\n *       }\n *     );\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.have.lengthOf(3);\n *     expect(myFoo).to.have.lengthOf.above(3);\n *\n * @param {Object} ctx object whose method / property is to be overwritten\n * @param {String} name of method / property to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @param {Function} chainingBehavior function that returns a function to be used for property\n * @namespace Utils\n * @name overwriteChainableMethod\n * @api public\n */\n\nmodule.exports = function overwriteChainableMethod(ctx, name, method, chainingBehavior) {\n  var chainableBehavior = ctx.__methods[name];\n\n  var _chainingBehavior = chainableBehavior.chainingBehavior;\n  chainableBehavior.chainingBehavior = function overwritingChainableMethodGetter() {\n    var result = chainingBehavior(_chainingBehavior).call(this);\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n\n  var _method = chainableBehavior.method;\n  chainableBehavior.method = function overwritingChainableMethodWrapper() {\n    var result = method(_method).apply(this, arguments);\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n};\n","/*!\n * Chai - overwriteMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteMethod(ctx, name, fn)\n *\n * Overwrites an already existing method and provides\n * access to previous function. Must return function\n * to be used for name.\n *\n *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {\n *       return function (str) {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.value).to.equal(str);\n *         } else {\n *           _super.apply(this, arguments);\n *         }\n *       }\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.equal('bar');\n *\n * @param {Object} ctx object whose method is to be overwritten\n * @param {String} name of method to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @namespace Utils\n * @name overwriteMethod\n * @api public\n */\n\nmodule.exports = function overwriteMethod(ctx, name, method) {\n  var _method = ctx[name]\n    , _super = function () {\n      throw new Error(name + ' is not a function');\n    };\n\n  if (_method && 'function' === typeof _method)\n    _super = _method;\n\n  var overwritingMethodWrapper = function () {\n    // Setting the `ssfi` flag to `overwritingMethodWrapper` causes this\n    // function to be the starting point for removing implementation frames from\n    // the stack trace of a failed assertion.\n    //\n    // However, we only want to use this function as the starting point if the\n    // `lockSsfi` flag isn't set.\n    //\n    // If the `lockSsfi` flag is set, then either this assertion has been\n    // overwritten by another assertion, or this assertion is being invoked from\n    // inside of another assertion. In the first case, the `ssfi` flag has\n    // already been set by the overwriting assertion. In the second case, the\n    // `ssfi` flag has already been set by the outer assertion.\n    if (!flag(this, 'lockSsfi')) {\n      flag(this, 'ssfi', overwritingMethodWrapper);\n    }\n\n    // Setting the `lockSsfi` flag to `true` prevents the overwritten assertion\n    // from changing the `ssfi` flag. By this point, the `ssfi` flag is already\n    // set to the correct starting point for this assertion.\n    var origLockSsfi = flag(this, 'lockSsfi');\n    flag(this, 'lockSsfi', true);\n    var result = method(_super).apply(this, arguments);\n    flag(this, 'lockSsfi', origLockSsfi);\n\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  }\n\n  addLengthGuard(overwritingMethodWrapper, name, false);\n  ctx[name] = proxify(overwritingMethodWrapper, name);\n};\n","/*!\n * Chai - overwriteProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar isProxyEnabled = require('./isProxyEnabled');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteProperty(ctx, name, fn)\n *\n * Overwrites an already existing property getter and provides\n * access to previous value. Must return function to use as getter.\n *\n *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n *       return function () {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.name).to.equal('bar');\n *         } else {\n *           _super.call(this);\n *         }\n *       }\n *     });\n *\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.ok;\n *\n * @param {Object} ctx object whose property is to be overwritten\n * @param {String} name of property to overwrite\n * @param {Function} getter function that returns a getter function to be used for name\n * @namespace Utils\n * @name overwriteProperty\n * @api public\n */\n\nmodule.exports = function overwriteProperty(ctx, name, getter) {\n  var _get = Object.getOwnPropertyDescriptor(ctx, name)\n    , _super = function () {};\n\n  if (_get && 'function' === typeof _get.get)\n    _super = _get.get\n\n  Object.defineProperty(ctx, name,\n    { get: function overwritingPropertyGetter() {\n        // Setting the `ssfi` flag to `overwritingPropertyGetter` causes this\n        // function to be the starting point for removing implementation frames\n        // from the stack trace of a failed assertion.\n        //\n        // However, we only want to use this function as the starting point if\n        // the `lockSsfi` flag isn't set and proxy protection is disabled.\n        //\n        // If the `lockSsfi` flag is set, then either this assertion has been\n        // overwritten by another assertion, or this assertion is being invoked\n        // from inside of another assertion. In the first case, the `ssfi` flag\n        // has already been set by the overwriting assertion. In the second\n        // case, the `ssfi` flag has already been set by the outer assertion.\n        //\n        // If proxy protection is enabled, then the `ssfi` flag has already been\n        // set by the proxy getter.\n        if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {\n          flag(this, 'ssfi', overwritingPropertyGetter);\n        }\n\n        // Setting the `lockSsfi` flag to `true` prevents the overwritten\n        // assertion from changing the `ssfi` flag. By this point, the `ssfi`\n        // flag is already set to the correct starting point for this assertion.\n        var origLockSsfi = flag(this, 'lockSsfi');\n        flag(this, 'lockSsfi', true);\n        var result = getter(_super).call(this);\n        flag(this, 'lockSsfi', origLockSsfi);\n\n        if (result !== undefined) {\n          return result;\n        }\n\n        var newAssertion = new chai.Assertion();\n        transferFlags(this, newAssertion);\n        return newAssertion;\n      }\n    , configurable: true\n  });\n};\n","var config = require('../config');\nvar flag = require('./flag');\nvar getProperties = require('./getProperties');\nvar isProxyEnabled = require('./isProxyEnabled');\n\n/*!\n * Chai - proxify utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .proxify(object)\n *\n * Return a proxy of given object that throws an error when a non-existent\n * property is read. By default, the root cause is assumed to be a misspelled\n * property, and thus an attempt is made to offer a reasonable suggestion from\n * the list of existing properties. However, if a nonChainableMethodName is\n * provided, then the root cause is instead a failure to invoke a non-chainable\n * method prior to reading the non-existent property.\n *\n * If proxies are unsupported or disabled via the user's Chai config, then\n * return object without modification.\n *\n * @param {Object} obj\n * @param {String} nonChainableMethodName\n * @namespace Utils\n * @name proxify\n */\n\nvar builtins = ['__flags', '__methods', '_obj', 'assert'];\n\nmodule.exports = function proxify(obj, nonChainableMethodName) {\n  if (!isProxyEnabled()) return obj;\n\n  return new Proxy(obj, {\n    get: function proxyGetter(target, property) {\n      // This check is here because we should not throw errors on Symbol properties\n      // such as `Symbol.toStringTag`.\n      // The values for which an error should be thrown can be configured using\n      // the `config.proxyExcludedKeys` setting.\n      if (typeof property === 'string' &&\n          config.proxyExcludedKeys.indexOf(property) === -1 &&\n          !Reflect.has(target, property)) {\n        // Special message for invalid property access of non-chainable methods.\n        if (nonChainableMethodName) {\n          throw Error('Invalid Chai property: ' + nonChainableMethodName + '.' +\n            property + '. See docs for proper usage of \"' +\n            nonChainableMethodName + '\".');\n        }\n\n        // If the property is reasonably close to an existing Chai property,\n        // suggest that property to the user. Only suggest properties with a\n        // distance less than 4.\n        var suggestion = null;\n        var suggestionDistance = 4;\n        getProperties(target).forEach(function(prop) {\n          if (\n            !Object.prototype.hasOwnProperty(prop) &&\n            builtins.indexOf(prop) === -1\n          ) {\n            var dist = stringDistanceCapped(\n              property,\n              prop,\n              suggestionDistance\n            );\n            if (dist < suggestionDistance) {\n              suggestion = prop;\n              suggestionDistance = dist;\n            }\n          }\n        });\n\n        if (suggestion !== null) {\n          throw Error('Invalid Chai property: ' + property +\n            '. Did you mean \"' + suggestion + '\"?');\n        } else {\n          throw Error('Invalid Chai property: ' + property);\n        }\n      }\n\n      // Use this proxy getter as the starting point for removing implementation\n      // frames from the stack trace of a failed assertion. For property\n      // assertions, this prevents the proxy getter from showing up in the stack\n      // trace since it's invoked before the property getter. For method and\n      // chainable method assertions, this flag will end up getting changed to\n      // the method wrapper, which is good since this frame will no longer be in\n      // the stack once the method is invoked. Note that Chai builtin assertion\n      // properties such as `__flags` are skipped since this is only meant to\n      // capture the starting point of an assertion. This step is also skipped\n      // if the `lockSsfi` flag is set, thus indicating that this assertion is\n      // being called from within another assertion. In that case, the `ssfi`\n      // flag is already set to the outer assertion's starting point.\n      if (builtins.indexOf(property) === -1 && !flag(target, 'lockSsfi')) {\n        flag(target, 'ssfi', proxyGetter);\n      }\n\n      return Reflect.get(target, property);\n    }\n  });\n};\n\n/**\n * # stringDistanceCapped(strA, strB, cap)\n * Return the Levenshtein distance between two strings, but no more than cap.\n * @param {string} strA\n * @param {string} strB\n * @param {number} number\n * @return {number} min(string distance between strA and strB, cap)\n * @api private\n */\n\nfunction stringDistanceCapped(strA, strB, cap) {\n  if (Math.abs(strA.length - strB.length) >= cap) {\n    return cap;\n  }\n\n  var memo = [];\n  // `memo` is a two-dimensional array containing distances.\n  // memo[i][j] is the distance between strA.slice(0, i) and\n  // strB.slice(0, j).\n  for (var i = 0; i <= strA.length; i++) {\n    memo[i] = Array(strB.length + 1).fill(0);\n    memo[i][0] = i;\n  }\n  for (var j = 0; j < strB.length; j++) {\n    memo[0][j] = j;\n  }\n\n  for (var i = 1; i <= strA.length; i++) {\n    var ch = strA.charCodeAt(i - 1);\n    for (var j = 1; j <= strB.length; j++) {\n      if (Math.abs(i - j) >= cap) {\n        memo[i][j] = cap;\n        continue;\n      }\n      memo[i][j] = Math.min(\n        memo[i - 1][j] + 1,\n        memo[i][j - 1] + 1,\n        memo[i - 1][j - 1] +\n          (ch === strB.charCodeAt(j - 1) ? 0 : 1)\n      );\n    }\n  }\n\n  return memo[strA.length][strB.length];\n}\n","/*!\n * Chai - test utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar flag = require('./flag');\n\n/**\n * ### .test(object, expression)\n *\n * Test and object for expression.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name test\n */\n\nmodule.exports = function test(obj, args) {\n  var negate = flag(obj, 'negate')\n    , expr = args[0];\n  return negate ? !expr : expr;\n};\n","/*!\n * Chai - transferFlags utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .transferFlags(assertion, object, includeAll = true)\n *\n * Transfer all the flags for `assertion` to `object`. If\n * `includeAll` is set to `false`, then the base Chai\n * assertion flags (namely `object`, `ssfi`, `lockSsfi`,\n * and `message`) will not be transferred.\n *\n *\n *     var newAssertion = new Assertion();\n *     utils.transferFlags(assertion, newAssertion);\n *\n *     var anotherAssertion = new Assertion(myObj);\n *     utils.transferFlags(assertion, anotherAssertion, false);\n *\n * @param {Assertion} assertion the assertion to transfer the flags from\n * @param {Object} object the object to transfer the flags to; usually a new assertion\n * @param {Boolean} includeAll\n * @namespace Utils\n * @name transferFlags\n * @api private\n */\n\nmodule.exports = function transferFlags(assertion, object, includeAll) {\n  var flags = assertion.__flags || (assertion.__flags = Object.create(null));\n\n  if (!object.__flags) {\n    object.__flags = Object.create(null);\n  }\n\n  includeAll = arguments.length === 3 ? includeAll : true;\n\n  for (var flag in flags) {\n    if (includeAll ||\n        (flag !== 'object' && flag !== 'ssfi' && flag !== 'lockSsfi' && flag != 'message')) {\n      object.__flags[flag] = flags[flag];\n    }\n  }\n};\n","'use strict';\n\n/* !\n * Chai - checkError utility\n * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .checkError\n *\n * Checks that an error conforms to a given set of criteria and/or retrieves information about it.\n *\n * @api public\n */\n\n/**\n * ### .compatibleInstance(thrown, errorLike)\n *\n * Checks if two instances are compatible (strict equal).\n * Returns false if errorLike is not an instance of Error, because instances\n * can only be compatible if they're both error instances.\n *\n * @name compatibleInstance\n * @param {Error} thrown error\n * @param {Error|ErrorConstructor} errorLike object to compare against\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleInstance(thrown, errorLike) {\n  return errorLike instanceof Error && thrown === errorLike;\n}\n\n/**\n * ### .compatibleConstructor(thrown, errorLike)\n *\n * Checks if two constructors are compatible.\n * This function can receive either an error constructor or\n * an error instance as the `errorLike` argument.\n * Constructors are compatible if they're the same or if one is\n * an instance of another.\n *\n * @name compatibleConstructor\n * @param {Error} thrown error\n * @param {Error|ErrorConstructor} errorLike object to compare against\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleConstructor(thrown, errorLike) {\n  if (errorLike instanceof Error) {\n    // If `errorLike` is an instance of any error we compare their constructors\n    return thrown.constructor === errorLike.constructor || thrown instanceof errorLike.constructor;\n  } else if (errorLike.prototype instanceof Error || errorLike === Error) {\n    // If `errorLike` is a constructor that inherits from Error, we compare `thrown` to `errorLike` directly\n    return thrown.constructor === errorLike || thrown instanceof errorLike;\n  }\n\n  return false;\n}\n\n/**\n * ### .compatibleMessage(thrown, errMatcher)\n *\n * Checks if an error's message is compatible with a matcher (String or RegExp).\n * If the message contains the String or passes the RegExp test,\n * it is considered compatible.\n *\n * @name compatibleMessage\n * @param {Error} thrown error\n * @param {String|RegExp} errMatcher to look for into the message\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleMessage(thrown, errMatcher) {\n  var comparisonString = typeof thrown === 'string' ? thrown : thrown.message;\n  if (errMatcher instanceof RegExp) {\n    return errMatcher.test(comparisonString);\n  } else if (typeof errMatcher === 'string') {\n    return comparisonString.indexOf(errMatcher) !== -1; // eslint-disable-line no-magic-numbers\n  }\n\n  return false;\n}\n\n/**\n * ### .getFunctionName(constructorFn)\n *\n * Returns the name of a function.\n * This also includes a polyfill function if `constructorFn.name` is not defined.\n *\n * @name getFunctionName\n * @param {Function} constructorFn\n * @namespace Utils\n * @api private\n */\n\nvar functionNameMatch = /\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\(\\/]+)/;\nfunction getFunctionName(constructorFn) {\n  var name = '';\n  if (typeof constructorFn.name === 'undefined') {\n    // Here we run a polyfill if constructorFn.name is not defined\n    var match = String(constructorFn).match(functionNameMatch);\n    if (match) {\n      name = match[1];\n    }\n  } else {\n    name = constructorFn.name;\n  }\n\n  return name;\n}\n\n/**\n * ### .getConstructorName(errorLike)\n *\n * Gets the constructor name for an Error instance or constructor itself.\n *\n * @name getConstructorName\n * @param {Error|ErrorConstructor} errorLike\n * @namespace Utils\n * @api public\n */\n\nfunction getConstructorName(errorLike) {\n  var constructorName = errorLike;\n  if (errorLike instanceof Error) {\n    constructorName = getFunctionName(errorLike.constructor);\n  } else if (typeof errorLike === 'function') {\n    // If `err` is not an instance of Error it is an error constructor itself or another function.\n    // If we've got a common function we get its name, otherwise we may need to create a new instance\n    // of the error just in case it's a poorly-constructed error. Please see chaijs/chai/issues/45 to know more.\n    constructorName = getFunctionName(errorLike).trim() ||\n        getFunctionName(new errorLike()); // eslint-disable-line new-cap\n  }\n\n  return constructorName;\n}\n\n/**\n * ### .getMessage(errorLike)\n *\n * Gets the error message from an error.\n * If `err` is a String itself, we return it.\n * If the error has no message, we return an empty string.\n *\n * @name getMessage\n * @param {Error|String} errorLike\n * @namespace Utils\n * @api public\n */\n\nfunction getMessage(errorLike) {\n  var msg = '';\n  if (errorLike && errorLike.message) {\n    msg = errorLike.message;\n  } else if (typeof errorLike === 'string') {\n    msg = errorLike;\n  }\n\n  return msg;\n}\n\nmodule.exports = {\n  compatibleInstance: compatibleInstance,\n  compatibleConstructor: compatibleConstructor,\n  compatibleMessage: compatibleMessage,\n  getMessage: getMessage,\n  getConstructorName: getConstructorName,\n};\n","'use strict';\n/* globals Symbol: false, Uint8Array: false, WeakMap: false */\n/*!\n * deep-eql\n * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar type = require('type-detect');\nfunction FakeMap() {\n  this._key = 'chai/deep-eql__' + Math.random() + Date.now();\n}\n\nFakeMap.prototype = {\n  get: function getMap(key) {\n    return key[this._key];\n  },\n  set: function setMap(key, value) {\n    if (Object.isExtensible(key)) {\n      Object.defineProperty(key, this._key, {\n        value: value,\n        configurable: true,\n      });\n    }\n  },\n};\n\nvar MemoizeMap = typeof WeakMap === 'function' ? WeakMap : FakeMap;\n/*!\n * Check to see if the MemoizeMap has recorded a result of the two operands\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {MemoizeMap} memoizeMap\n * @returns {Boolean|null} result\n*/\nfunction memoizeCompare(leftHandOperand, rightHandOperand, memoizeMap) {\n  // Technically, WeakMap keys can *only* be objects, not primitives.\n  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    return null;\n  }\n  var leftHandMap = memoizeMap.get(leftHandOperand);\n  if (leftHandMap) {\n    var result = leftHandMap.get(rightHandOperand);\n    if (typeof result === 'boolean') {\n      return result;\n    }\n  }\n  return null;\n}\n\n/*!\n * Set the result of the equality into the MemoizeMap\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {MemoizeMap} memoizeMap\n * @param {Boolean} result\n*/\nfunction memoizeSet(leftHandOperand, rightHandOperand, memoizeMap, result) {\n  // Technically, WeakMap keys can *only* be objects, not primitives.\n  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    return;\n  }\n  var leftHandMap = memoizeMap.get(leftHandOperand);\n  if (leftHandMap) {\n    leftHandMap.set(rightHandOperand, result);\n  } else {\n    leftHandMap = new MemoizeMap();\n    leftHandMap.set(rightHandOperand, result);\n    memoizeMap.set(leftHandOperand, leftHandMap);\n  }\n}\n\n/*!\n * Primary Export\n */\n\nmodule.exports = deepEqual;\nmodule.exports.MemoizeMap = MemoizeMap;\n\n/**\n * Assert deeply nested sameValue equality between two objects of any type.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (optional) Additional options\n * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.\n * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of\n    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular\n    references to blow the stack.\n * @return {Boolean} equal match\n */\nfunction deepEqual(leftHandOperand, rightHandOperand, options) {\n  // If we have a comparator, we can't assume anything; so bail to its check first.\n  if (options && options.comparator) {\n    return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);\n  }\n\n  var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);\n  if (simpleResult !== null) {\n    return simpleResult;\n  }\n\n  // Deeper comparisons are pushed through to a larger function\n  return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);\n}\n\n/**\n * Many comparisons can be canceled out early via simple equality or primitive checks.\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @return {Boolean|null} equal match\n */\nfunction simpleEqual(leftHandOperand, rightHandOperand) {\n  // Equal references (except for Numbers) can be returned early\n  if (leftHandOperand === rightHandOperand) {\n    // Handle +-0 cases\n    return leftHandOperand !== 0 || 1 / leftHandOperand === 1 / rightHandOperand;\n  }\n\n  // handle NaN cases\n  if (\n    leftHandOperand !== leftHandOperand && // eslint-disable-line no-self-compare\n    rightHandOperand !== rightHandOperand // eslint-disable-line no-self-compare\n  ) {\n    return true;\n  }\n\n  // Anything that is not an 'object', i.e. symbols, functions, booleans, numbers,\n  // strings, and undefined, can be compared by reference.\n  if (isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    // Easy out b/c it would have passed the first equality check\n    return false;\n  }\n  return null;\n}\n\n/*!\n * The main logic of the `deepEqual` function.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (optional) Additional options\n * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.\n * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of\n    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular\n    references to blow the stack.\n * @return {Boolean} equal match\n*/\nfunction extensiveDeepEqual(leftHandOperand, rightHandOperand, options) {\n  options = options || {};\n  options.memoize = options.memoize === false ? false : options.memoize || new MemoizeMap();\n  var comparator = options && options.comparator;\n\n  // Check if a memoized result exists.\n  var memoizeResultLeft = memoizeCompare(leftHandOperand, rightHandOperand, options.memoize);\n  if (memoizeResultLeft !== null) {\n    return memoizeResultLeft;\n  }\n  var memoizeResultRight = memoizeCompare(rightHandOperand, leftHandOperand, options.memoize);\n  if (memoizeResultRight !== null) {\n    return memoizeResultRight;\n  }\n\n  // If a comparator is present, use it.\n  if (comparator) {\n    var comparatorResult = comparator(leftHandOperand, rightHandOperand);\n    // Comparators may return null, in which case we want to go back to default behavior.\n    if (comparatorResult === false || comparatorResult === true) {\n      memoizeSet(leftHandOperand, rightHandOperand, options.memoize, comparatorResult);\n      return comparatorResult;\n    }\n    // To allow comparators to override *any* behavior, we ran them first. Since it didn't decide\n    // what to do, we need to make sure to return the basic tests first before we move on.\n    var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);\n    if (simpleResult !== null) {\n      // Don't memoize this, it takes longer to set/retrieve than to just compare.\n      return simpleResult;\n    }\n  }\n\n  var leftHandType = type(leftHandOperand);\n  if (leftHandType !== type(rightHandOperand)) {\n    memoizeSet(leftHandOperand, rightHandOperand, options.memoize, false);\n    return false;\n  }\n\n  // Temporarily set the operands in the memoize object to prevent blowing the stack\n  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, true);\n\n  var result = extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options);\n  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, result);\n  return result;\n}\n\nfunction extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options) {\n  switch (leftHandType) {\n    case 'String':\n    case 'Number':\n    case 'Boolean':\n    case 'Date':\n      // If these types are their instance types (e.g. `new Number`) then re-deepEqual against their values\n      return deepEqual(leftHandOperand.valueOf(), rightHandOperand.valueOf());\n    case 'Promise':\n    case 'Symbol':\n    case 'function':\n    case 'WeakMap':\n    case 'WeakSet':\n    case 'Error':\n      return leftHandOperand === rightHandOperand;\n    case 'Arguments':\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n    case 'Array':\n      return iterableEqual(leftHandOperand, rightHandOperand, options);\n    case 'RegExp':\n      return regexpEqual(leftHandOperand, rightHandOperand);\n    case 'Generator':\n      return generatorEqual(leftHandOperand, rightHandOperand, options);\n    case 'DataView':\n      return iterableEqual(new Uint8Array(leftHandOperand.buffer), new Uint8Array(rightHandOperand.buffer), options);\n    case 'ArrayBuffer':\n      return iterableEqual(new Uint8Array(leftHandOperand), new Uint8Array(rightHandOperand), options);\n    case 'Set':\n      return entriesEqual(leftHandOperand, rightHandOperand, options);\n    case 'Map':\n      return entriesEqual(leftHandOperand, rightHandOperand, options);\n    default:\n      return objectEqual(leftHandOperand, rightHandOperand, options);\n  }\n}\n\n/*!\n * Compare two Regular Expressions for equality.\n *\n * @param {RegExp} leftHandOperand\n * @param {RegExp} rightHandOperand\n * @return {Boolean} result\n */\n\nfunction regexpEqual(leftHandOperand, rightHandOperand) {\n  return leftHandOperand.toString() === rightHandOperand.toString();\n}\n\n/*!\n * Compare two Sets/Maps for equality. Faster than other equality functions.\n *\n * @param {Set} leftHandOperand\n * @param {Set} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction entriesEqual(leftHandOperand, rightHandOperand, options) {\n  // IE11 doesn't support Set#entries or Set#@@iterator, so we need manually populate using Set#forEach\n  if (leftHandOperand.size !== rightHandOperand.size) {\n    return false;\n  }\n  if (leftHandOperand.size === 0) {\n    return true;\n  }\n  var leftHandItems = [];\n  var rightHandItems = [];\n  leftHandOperand.forEach(function gatherEntries(key, value) {\n    leftHandItems.push([ key, value ]);\n  });\n  rightHandOperand.forEach(function gatherEntries(key, value) {\n    rightHandItems.push([ key, value ]);\n  });\n  return iterableEqual(leftHandItems.sort(), rightHandItems.sort(), options);\n}\n\n/*!\n * Simple equality for flat iterable objects such as Arrays, TypedArrays or Node.js buffers.\n *\n * @param {Iterable} leftHandOperand\n * @param {Iterable} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction iterableEqual(leftHandOperand, rightHandOperand, options) {\n  var length = leftHandOperand.length;\n  if (length !== rightHandOperand.length) {\n    return false;\n  }\n  if (length === 0) {\n    return true;\n  }\n  var index = -1;\n  while (++index < length) {\n    if (deepEqual(leftHandOperand[index], rightHandOperand[index], options) === false) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*!\n * Simple equality for generator objects such as those returned by generator functions.\n *\n * @param {Iterable} leftHandOperand\n * @param {Iterable} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction generatorEqual(leftHandOperand, rightHandOperand, options) {\n  return iterableEqual(getGeneratorEntries(leftHandOperand), getGeneratorEntries(rightHandOperand), options);\n}\n\n/*!\n * Determine if the given object has an @@iterator function.\n *\n * @param {Object} target\n * @return {Boolean} `true` if the object has an @@iterator function.\n */\nfunction hasIteratorFunction(target) {\n  return typeof Symbol !== 'undefined' &&\n    typeof target === 'object' &&\n    typeof Symbol.iterator !== 'undefined' &&\n    typeof target[Symbol.iterator] === 'function';\n}\n\n/*!\n * Gets all iterator entries from the given Object. If the Object has no @@iterator function, returns an empty array.\n * This will consume the iterator - which could have side effects depending on the @@iterator implementation.\n *\n * @param {Object} target\n * @returns {Array} an array of entries from the @@iterator function\n */\nfunction getIteratorEntries(target) {\n  if (hasIteratorFunction(target)) {\n    try {\n      return getGeneratorEntries(target[Symbol.iterator]());\n    } catch (iteratorError) {\n      return [];\n    }\n  }\n  return [];\n}\n\n/*!\n * Gets all entries from a Generator. This will consume the generator - which could have side effects.\n *\n * @param {Generator} target\n * @returns {Array} an array of entries from the Generator.\n */\nfunction getGeneratorEntries(generator) {\n  var generatorResult = generator.next();\n  var accumulator = [ generatorResult.value ];\n  while (generatorResult.done === false) {\n    generatorResult = generator.next();\n    accumulator.push(generatorResult.value);\n  }\n  return accumulator;\n}\n\n/*!\n * Gets all own and inherited enumerable keys from a target.\n *\n * @param {Object} target\n * @returns {Array} an array of own and inherited enumerable keys from the target.\n */\nfunction getEnumerableKeys(target) {\n  var keys = [];\n  for (var key in target) {\n    keys.push(key);\n  }\n  return keys;\n}\n\n/*!\n * Determines if two objects have matching values, given a set of keys. Defers to deepEqual for the equality check of\n * each key. If any value of the given key is not equal, the function will return false (early).\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Array} keys An array of keys to compare the values of leftHandOperand and rightHandOperand against\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\nfunction keysEqual(leftHandOperand, rightHandOperand, keys, options) {\n  var length = keys.length;\n  if (length === 0) {\n    return true;\n  }\n  for (var i = 0; i < length; i += 1) {\n    if (deepEqual(leftHandOperand[keys[i]], rightHandOperand[keys[i]], options) === false) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*!\n * Recursively check the equality of two Objects. Once basic sameness has been established it will defer to `deepEqual`\n * for each enumerable key in the object.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction objectEqual(leftHandOperand, rightHandOperand, options) {\n  var leftHandKeys = getEnumerableKeys(leftHandOperand);\n  var rightHandKeys = getEnumerableKeys(rightHandOperand);\n  if (leftHandKeys.length && leftHandKeys.length === rightHandKeys.length) {\n    leftHandKeys.sort();\n    rightHandKeys.sort();\n    if (iterableEqual(leftHandKeys, rightHandKeys) === false) {\n      return false;\n    }\n    return keysEqual(leftHandOperand, rightHandOperand, leftHandKeys, options);\n  }\n\n  var leftHandEntries = getIteratorEntries(leftHandOperand);\n  var rightHandEntries = getIteratorEntries(rightHandOperand);\n  if (leftHandEntries.length && leftHandEntries.length === rightHandEntries.length) {\n    leftHandEntries.sort();\n    rightHandEntries.sort();\n    return iterableEqual(leftHandEntries, rightHandEntries, options);\n  }\n\n  if (leftHandKeys.length === 0 &&\n      leftHandEntries.length === 0 &&\n      rightHandKeys.length === 0 &&\n      rightHandEntries.length === 0) {\n    return true;\n  }\n\n  return false;\n}\n\n/*!\n * Returns true if the argument is a primitive.\n *\n * This intentionally returns true for all objects that can be compared by reference,\n * including functions and symbols.\n *\n * @param {Mixed} value\n * @return {Boolean} result\n */\nfunction isPrimitive(value) {\n  return value === null || typeof value !== 'object';\n}\n","'use strict';\n\n/* !\n * Chai - getFuncName utility\n * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getFuncName(constructorFn)\n *\n * Returns the name of a function.\n * When a non-function instance is passed, returns `null`.\n * This also includes a polyfill function if `aFunc.name` is not defined.\n *\n * @name getFuncName\n * @param {Function} funct\n * @namespace Utils\n * @api public\n */\n\nvar toString = Function.prototype.toString;\nvar functionNameMatch = /\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\s\\(\\/]+)/;\nfunction getFuncName(aFunc) {\n  if (typeof aFunc !== 'function') {\n    return null;\n  }\n\n  var name = '';\n  if (typeof Function.prototype.name === 'undefined' && typeof aFunc.name === 'undefined') {\n    // Here we run a polyfill if Function does not support the `name` property and if aFunc.name is not defined\n    var match = toString.call(aFunc).match(functionNameMatch);\n    if (match) {\n      name = match[1];\n    }\n  } else {\n    // If we've got a `name` property we just use it\n    name = aFunc.name;\n  }\n\n  return name;\n}\n\nmodule.exports = getFuncName;\n","'use strict';\n\n/* !\n * Chai - pathval utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * @see https://github.com/logicalparadox/filtr\n * MIT Licensed\n */\n\n/**\n * ### .hasProperty(object, name)\n *\n * This allows checking whether an object has own\n * or inherited from prototype chain named property.\n *\n * Basically does the same thing as the `in`\n * operator but works properly with null/undefined values\n * and other primitives.\n *\n *     var obj = {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *\n * The following would be the results.\n *\n *     hasProperty(obj, 'str');  // true\n *     hasProperty(obj, 'constructor');  // true\n *     hasProperty(obj, 'bar');  // false\n *\n *     hasProperty(obj.str, 'length'); // true\n *     hasProperty(obj.str, 1);  // true\n *     hasProperty(obj.str, 5);  // false\n *\n *     hasProperty(obj.arr, 'length');  // true\n *     hasProperty(obj.arr, 2);  // true\n *     hasProperty(obj.arr, 3);  // false\n *\n * @param {Object} object\n * @param {String|Symbol} name\n * @returns {Boolean} whether it exists\n * @namespace Utils\n * @name hasProperty\n * @api public\n */\n\nfunction hasProperty(obj, name) {\n  if (typeof obj === 'undefined' || obj === null) {\n    return false;\n  }\n\n  // The `in` operator does not work with primitives.\n  return name in Object(obj);\n}\n\n/* !\n * ## parsePath(path)\n *\n * Helper function used to parse string object\n * paths. Use in conjunction with `internalGetPathValue`.\n *\n *      var parsed = parsePath('myobject.property.subprop');\n *\n * ### Paths:\n *\n * * Can be infinitely deep and nested.\n * * Arrays are also valid using the formal `myobject.document[3].property`.\n * * Literal dots and brackets (not delimiter) must be backslash-escaped.\n *\n * @param {String} path\n * @returns {Object} parsed\n * @api private\n */\n\nfunction parsePath(path) {\n  var str = path.replace(/([^\\\\])\\[/g, '$1.[');\n  var parts = str.match(/(\\\\\\.|[^.]+?)+/g);\n  return parts.map(function mapMatches(value) {\n    var regexp = /^\\[(\\d+)\\]$/;\n    var mArr = regexp.exec(value);\n    var parsed = null;\n    if (mArr) {\n      parsed = { i: parseFloat(mArr[1]) };\n    } else {\n      parsed = { p: value.replace(/\\\\([.\\[\\]])/g, '$1') };\n    }\n\n    return parsed;\n  });\n}\n\n/* !\n * ## internalGetPathValue(obj, parsed[, pathDepth])\n *\n * Helper companion function for `.parsePath` that returns\n * the value located at the parsed address.\n *\n *      var value = getPathValue(obj, parsed);\n *\n * @param {Object} object to search against\n * @param {Object} parsed definition from `parsePath`.\n * @param {Number} depth (nesting level) of the property we want to retrieve\n * @returns {Object|Undefined} value\n * @api private\n */\n\nfunction internalGetPathValue(obj, parsed, pathDepth) {\n  var temporaryValue = obj;\n  var res = null;\n  pathDepth = (typeof pathDepth === 'undefined' ? parsed.length : pathDepth);\n\n  for (var i = 0; i < pathDepth; i++) {\n    var part = parsed[i];\n    if (temporaryValue) {\n      if (typeof part.p === 'undefined') {\n        temporaryValue = temporaryValue[part.i];\n      } else {\n        temporaryValue = temporaryValue[part.p];\n      }\n\n      if (i === (pathDepth - 1)) {\n        res = temporaryValue;\n      }\n    }\n  }\n\n  return res;\n}\n\n/* !\n * ## internalSetPathValue(obj, value, parsed)\n *\n * Companion function for `parsePath` that sets\n * the value located at a parsed address.\n *\n *  internalSetPathValue(obj, 'value', parsed);\n *\n * @param {Object} object to search and define on\n * @param {*} value to use upon set\n * @param {Object} parsed definition from `parsePath`\n * @api private\n */\n\nfunction internalSetPathValue(obj, val, parsed) {\n  var tempObj = obj;\n  var pathDepth = parsed.length;\n  var part = null;\n  // Here we iterate through every part of the path\n  for (var i = 0; i < pathDepth; i++) {\n    var propName = null;\n    var propVal = null;\n    part = parsed[i];\n\n    // If it's the last part of the path, we set the 'propName' value with the property name\n    if (i === (pathDepth - 1)) {\n      propName = typeof part.p === 'undefined' ? part.i : part.p;\n      // Now we set the property with the name held by 'propName' on object with the desired val\n      tempObj[propName] = val;\n    } else if (typeof part.p !== 'undefined' && tempObj[part.p]) {\n      tempObj = tempObj[part.p];\n    } else if (typeof part.i !== 'undefined' && tempObj[part.i]) {\n      tempObj = tempObj[part.i];\n    } else {\n      // If the obj doesn't have the property we create one with that name to define it\n      var next = parsed[i + 1];\n      // Here we set the name of the property which will be defined\n      propName = typeof part.p === 'undefined' ? part.i : part.p;\n      // Here we decide if this property will be an array or a new object\n      propVal = typeof next.p === 'undefined' ? [] : {};\n      tempObj[propName] = propVal;\n      tempObj = tempObj[propName];\n    }\n  }\n}\n\n/**\n * ### .getPathInfo(object, path)\n *\n * This allows the retrieval of property info in an\n * object given a string path.\n *\n * The path info consists of an object with the\n * following properties:\n *\n * * parent - The parent object of the property referenced by `path`\n * * name - The name of the final property, a number if it was an array indexer\n * * value - The value of the property, if it exists, otherwise `undefined`\n * * exists - Whether the property exists or not\n *\n * @param {Object} object\n * @param {String} path\n * @returns {Object} info\n * @namespace Utils\n * @name getPathInfo\n * @api public\n */\n\nfunction getPathInfo(obj, path) {\n  var parsed = parsePath(path);\n  var last = parsed[parsed.length - 1];\n  var info = {\n    parent: parsed.length > 1 ? internalGetPathValue(obj, parsed, parsed.length - 1) : obj,\n    name: last.p || last.i,\n    value: internalGetPathValue(obj, parsed),\n  };\n  info.exists = hasProperty(info.parent, info.name);\n\n  return info;\n}\n\n/**\n * ### .getPathValue(object, path)\n *\n * This allows the retrieval of values in an\n * object given a string path.\n *\n *     var obj = {\n *         prop1: {\n *             arr: ['a', 'b', 'c']\n *           , str: 'Hello'\n *         }\n *       , prop2: {\n *             arr: [ { nested: 'Universe' } ]\n *           , str: 'Hello again!'\n *         }\n *     }\n *\n * The following would be the results.\n *\n *     getPathValue(obj, 'prop1.str'); // Hello\n *     getPathValue(obj, 'prop1.att[2]'); // b\n *     getPathValue(obj, 'prop2.arr[0].nested'); // Universe\n *\n * @param {Object} object\n * @param {String} path\n * @returns {Object} value or `undefined`\n * @namespace Utils\n * @name getPathValue\n * @api public\n */\n\nfunction getPathValue(obj, path) {\n  var info = getPathInfo(obj, path);\n  return info.value;\n}\n\n/**\n * ### .setPathValue(object, path, value)\n *\n * Define the value in an object at a given string path.\n *\n * ```js\n * var obj = {\n *     prop1: {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *   , prop2: {\n *         arr: [ { nested: 'Universe' } ]\n *       , str: 'Hello again!'\n *     }\n * };\n * ```\n *\n * The following would be acceptable.\n *\n * ```js\n * var properties = require('tea-properties');\n * properties.set(obj, 'prop1.str', 'Hello Universe!');\n * properties.set(obj, 'prop1.arr[2]', 'B');\n * properties.set(obj, 'prop2.arr[0].nested.value', { hello: 'universe' });\n * ```\n *\n * @param {Object} object\n * @param {String} path\n * @param {Mixed} value\n * @api private\n */\n\nfunction setPathValue(obj, path, val) {\n  var parsed = parsePath(path);\n  internalSetPathValue(obj, val, parsed);\n  return obj;\n}\n\nmodule.exports = {\n  hasProperty: hasProperty,\n  getPathInfo: getPathInfo,\n  getPathValue: getPathValue,\n  setPathValue: setPathValue,\n};\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.typeDetect = factory());\n}(this, (function () { 'use strict';\n\n/* !\n * type-detect\n * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nvar promiseExists = typeof Promise === 'function';\n\n/* eslint-disable no-undef */\nvar globalObject = typeof self === 'object' ? self : global; // eslint-disable-line id-blacklist\n\nvar symbolExists = typeof Symbol !== 'undefined';\nvar mapExists = typeof Map !== 'undefined';\nvar setExists = typeof Set !== 'undefined';\nvar weakMapExists = typeof WeakMap !== 'undefined';\nvar weakSetExists = typeof WeakSet !== 'undefined';\nvar dataViewExists = typeof DataView !== 'undefined';\nvar symbolIteratorExists = symbolExists && typeof Symbol.iterator !== 'undefined';\nvar symbolToStringTagExists = symbolExists && typeof Symbol.toStringTag !== 'undefined';\nvar setEntriesExists = setExists && typeof Set.prototype.entries === 'function';\nvar mapEntriesExists = mapExists && typeof Map.prototype.entries === 'function';\nvar setIteratorPrototype = setEntriesExists && Object.getPrototypeOf(new Set().entries());\nvar mapIteratorPrototype = mapEntriesExists && Object.getPrototypeOf(new Map().entries());\nvar arrayIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] === 'function';\nvar arrayIteratorPrototype = arrayIteratorExists && Object.getPrototypeOf([][Symbol.iterator]());\nvar stringIteratorExists = symbolIteratorExists && typeof String.prototype[Symbol.iterator] === 'function';\nvar stringIteratorPrototype = stringIteratorExists && Object.getPrototypeOf(''[Symbol.iterator]());\nvar toStringLeftSliceLength = 8;\nvar toStringRightSliceLength = -1;\n/**\n * ### typeOf (obj)\n *\n * Uses `Object.prototype.toString` to determine the type of an object,\n * normalising behaviour across engine versions & well optimised.\n *\n * @param {Mixed} object\n * @return {String} object type\n * @api public\n */\nfunction typeDetect(obj) {\n  /* ! Speed optimisation\n   * Pre:\n   *   string literal     x 3,039,035 ops/sec ±1.62% (78 runs sampled)\n   *   boolean literal    x 1,424,138 ops/sec ±4.54% (75 runs sampled)\n   *   number literal     x 1,653,153 ops/sec ±1.91% (82 runs sampled)\n   *   undefined          x 9,978,660 ops/sec ±1.92% (75 runs sampled)\n   *   function           x 2,556,769 ops/sec ±1.73% (77 runs sampled)\n   * Post:\n   *   string literal     x 38,564,796 ops/sec ±1.15% (79 runs sampled)\n   *   boolean literal    x 31,148,940 ops/sec ±1.10% (79 runs sampled)\n   *   number literal     x 32,679,330 ops/sec ±1.90% (78 runs sampled)\n   *   undefined          x 32,363,368 ops/sec ±1.07% (82 runs sampled)\n   *   function           x 31,296,870 ops/sec ±0.96% (83 runs sampled)\n   */\n  var typeofObj = typeof obj;\n  if (typeofObj !== 'object') {\n    return typeofObj;\n  }\n\n  /* ! Speed optimisation\n   * Pre:\n   *   null               x 28,645,765 ops/sec ±1.17% (82 runs sampled)\n   * Post:\n   *   null               x 36,428,962 ops/sec ±1.37% (84 runs sampled)\n   */\n  if (obj === null) {\n    return 'null';\n  }\n\n  /* ! Spec Conformance\n   * Test: `Object.prototype.toString.call(window)``\n   *  - Node === \"[object global]\"\n   *  - Chrome === \"[object global]\"\n   *  - Firefox === \"[object Window]\"\n   *  - PhantomJS === \"[object Window]\"\n   *  - Safari === \"[object Window]\"\n   *  - IE 11 === \"[object Window]\"\n   *  - IE Edge === \"[object Window]\"\n   * Test: `Object.prototype.toString.call(this)``\n   *  - Chrome Worker === \"[object global]\"\n   *  - Firefox Worker === \"[object DedicatedWorkerGlobalScope]\"\n   *  - Safari Worker === \"[object DedicatedWorkerGlobalScope]\"\n   *  - IE 11 Worker === \"[object WorkerGlobalScope]\"\n   *  - IE Edge Worker === \"[object WorkerGlobalScope]\"\n   */\n  if (obj === globalObject) {\n    return 'global';\n  }\n\n  /* ! Speed optimisation\n   * Pre:\n   *   array literal      x 2,888,352 ops/sec ±0.67% (82 runs sampled)\n   * Post:\n   *   array literal      x 22,479,650 ops/sec ±0.96% (81 runs sampled)\n   */\n  if (\n    Array.isArray(obj) &&\n    (symbolToStringTagExists === false || !(Symbol.toStringTag in obj))\n  ) {\n    return 'Array';\n  }\n\n  // Not caching existence of `window` and related properties due to potential\n  // for `window` to be unset before tests in quasi-browser environments.\n  if (typeof window === 'object' && window !== null) {\n    /* ! Spec Conformance\n     * (https://html.spec.whatwg.org/multipage/browsers.html#location)\n     * WhatWG HTML$7.7.3 - The `Location` interface\n     * Test: `Object.prototype.toString.call(window.location)``\n     *  - IE <=11 === \"[object Object]\"\n     *  - IE Edge <=13 === \"[object Object]\"\n     */\n    if (typeof window.location === 'object' && obj === window.location) {\n      return 'Location';\n    }\n\n    /* ! Spec Conformance\n     * (https://html.spec.whatwg.org/#document)\n     * WhatWG HTML$3.1.1 - The `Document` object\n     * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n     *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-26809268)\n     *       which suggests that browsers should use HTMLTableCellElement for\n     *       both TD and TH elements. WhatWG separates these.\n     *       WhatWG HTML states:\n     *         > For historical reasons, Window objects must also have a\n     *         > writable, configurable, non-enumerable property named\n     *         > HTMLDocument whose value is the Document interface object.\n     * Test: `Object.prototype.toString.call(document)``\n     *  - Chrome === \"[object HTMLDocument]\"\n     *  - Firefox === \"[object HTMLDocument]\"\n     *  - Safari === \"[object HTMLDocument]\"\n     *  - IE <=10 === \"[object Document]\"\n     *  - IE 11 === \"[object HTMLDocument]\"\n     *  - IE Edge <=13 === \"[object HTMLDocument]\"\n     */\n    if (typeof window.document === 'object' && obj === window.document) {\n      return 'Document';\n    }\n\n    if (typeof window.navigator === 'object') {\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/multipage/webappapis.html#mimetypearray)\n       * WhatWG HTML$8.6.1.5 - Plugins - Interface MimeTypeArray\n       * Test: `Object.prototype.toString.call(navigator.mimeTypes)``\n       *  - IE <=10 === \"[object MSMimeTypesCollection]\"\n       */\n      if (typeof window.navigator.mimeTypes === 'object' &&\n          obj === window.navigator.mimeTypes) {\n        return 'MimeTypeArray';\n      }\n\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)\n       * WhatWG HTML$8.6.1.5 - Plugins - Interface PluginArray\n       * Test: `Object.prototype.toString.call(navigator.plugins)``\n       *  - IE <=10 === \"[object MSPluginsCollection]\"\n       */\n      if (typeof window.navigator.plugins === 'object' &&\n          obj === window.navigator.plugins) {\n        return 'PluginArray';\n      }\n    }\n\n    if ((typeof window.HTMLElement === 'function' ||\n        typeof window.HTMLElement === 'object') &&\n        obj instanceof window.HTMLElement) {\n      /* ! Spec Conformance\n      * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)\n      * WhatWG HTML$4.4.4 - The `blockquote` element - Interface `HTMLQuoteElement`\n      * Test: `Object.prototype.toString.call(document.createElement('blockquote'))``\n      *  - IE <=10 === \"[object HTMLBlockElement]\"\n      */\n      if (obj.tagName === 'BLOCKQUOTE') {\n        return 'HTMLQuoteElement';\n      }\n\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/#htmltabledatacellelement)\n       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableDataCellElement`\n       * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)\n       *       which suggests that browsers should use HTMLTableCellElement for\n       *       both TD and TH elements. WhatWG separates these.\n       * Test: Object.prototype.toString.call(document.createElement('td'))\n       *  - Chrome === \"[object HTMLTableCellElement]\"\n       *  - Firefox === \"[object HTMLTableCellElement]\"\n       *  - Safari === \"[object HTMLTableCellElement]\"\n       */\n      if (obj.tagName === 'TD') {\n        return 'HTMLTableDataCellElement';\n      }\n\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/#htmltableheadercellelement)\n       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableHeaderCellElement`\n       * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)\n       *       which suggests that browsers should use HTMLTableCellElement for\n       *       both TD and TH elements. WhatWG separates these.\n       * Test: Object.prototype.toString.call(document.createElement('th'))\n       *  - Chrome === \"[object HTMLTableCellElement]\"\n       *  - Firefox === \"[object HTMLTableCellElement]\"\n       *  - Safari === \"[object HTMLTableCellElement]\"\n       */\n      if (obj.tagName === 'TH') {\n        return 'HTMLTableHeaderCellElement';\n      }\n    }\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   Float64Array       x 625,644 ops/sec ±1.58% (80 runs sampled)\n  *   Float32Array       x 1,279,852 ops/sec ±2.91% (77 runs sampled)\n  *   Uint32Array        x 1,178,185 ops/sec ±1.95% (83 runs sampled)\n  *   Uint16Array        x 1,008,380 ops/sec ±2.25% (80 runs sampled)\n  *   Uint8Array         x 1,128,040 ops/sec ±2.11% (81 runs sampled)\n  *   Int32Array         x 1,170,119 ops/sec ±2.88% (80 runs sampled)\n  *   Int16Array         x 1,176,348 ops/sec ±5.79% (86 runs sampled)\n  *   Int8Array          x 1,058,707 ops/sec ±4.94% (77 runs sampled)\n  *   Uint8ClampedArray  x 1,110,633 ops/sec ±4.20% (80 runs sampled)\n  * Post:\n  *   Float64Array       x 7,105,671 ops/sec ±13.47% (64 runs sampled)\n  *   Float32Array       x 5,887,912 ops/sec ±1.46% (82 runs sampled)\n  *   Uint32Array        x 6,491,661 ops/sec ±1.76% (79 runs sampled)\n  *   Uint16Array        x 6,559,795 ops/sec ±1.67% (82 runs sampled)\n  *   Uint8Array         x 6,463,966 ops/sec ±1.43% (85 runs sampled)\n  *   Int32Array         x 5,641,841 ops/sec ±3.49% (81 runs sampled)\n  *   Int16Array         x 6,583,511 ops/sec ±1.98% (80 runs sampled)\n  *   Int8Array          x 6,606,078 ops/sec ±1.74% (81 runs sampled)\n  *   Uint8ClampedArray  x 6,602,224 ops/sec ±1.77% (83 runs sampled)\n  */\n  var stringTag = (symbolToStringTagExists && obj[Symbol.toStringTag]);\n  if (typeof stringTag === 'string') {\n    return stringTag;\n  }\n\n  var objPrototype = Object.getPrototypeOf(obj);\n  /* ! Speed optimisation\n  * Pre:\n  *   regex literal      x 1,772,385 ops/sec ±1.85% (77 runs sampled)\n  *   regex constructor  x 2,143,634 ops/sec ±2.46% (78 runs sampled)\n  * Post:\n  *   regex literal      x 3,928,009 ops/sec ±0.65% (78 runs sampled)\n  *   regex constructor  x 3,931,108 ops/sec ±0.58% (84 runs sampled)\n  */\n  if (objPrototype === RegExp.prototype) {\n    return 'RegExp';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   date               x 2,130,074 ops/sec ±4.42% (68 runs sampled)\n  * Post:\n  *   date               x 3,953,779 ops/sec ±1.35% (77 runs sampled)\n  */\n  if (objPrototype === Date.prototype) {\n    return 'Date';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-promise.prototype-@@tostringtag)\n   * ES6$25.4.5.4 - Promise.prototype[@@toStringTag] should be \"Promise\":\n   * Test: `Object.prototype.toString.call(Promise.resolve())``\n   *  - Chrome <=47 === \"[object Object]\"\n   *  - Edge <=20 === \"[object Object]\"\n   *  - Firefox 29-Latest === \"[object Promise]\"\n   *  - Safari 7.1-Latest === \"[object Promise]\"\n   */\n  if (promiseExists && objPrototype === Promise.prototype) {\n    return 'Promise';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   set                x 2,222,186 ops/sec ±1.31% (82 runs sampled)\n  * Post:\n  *   set                x 4,545,879 ops/sec ±1.13% (83 runs sampled)\n  */\n  if (setExists && objPrototype === Set.prototype) {\n    return 'Set';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   map                x 2,396,842 ops/sec ±1.59% (81 runs sampled)\n  * Post:\n  *   map                x 4,183,945 ops/sec ±6.59% (82 runs sampled)\n  */\n  if (mapExists && objPrototype === Map.prototype) {\n    return 'Map';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   weakset            x 1,323,220 ops/sec ±2.17% (76 runs sampled)\n  * Post:\n  *   weakset            x 4,237,510 ops/sec ±2.01% (77 runs sampled)\n  */\n  if (weakSetExists && objPrototype === WeakSet.prototype) {\n    return 'WeakSet';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   weakmap            x 1,500,260 ops/sec ±2.02% (78 runs sampled)\n  * Post:\n  *   weakmap            x 3,881,384 ops/sec ±1.45% (82 runs sampled)\n  */\n  if (weakMapExists && objPrototype === WeakMap.prototype) {\n    return 'WeakMap';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-dataview.prototype-@@tostringtag)\n   * ES6$24.2.4.21 - DataView.prototype[@@toStringTag] should be \"DataView\":\n   * Test: `Object.prototype.toString.call(new DataView(new ArrayBuffer(1)))``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (dataViewExists && objPrototype === DataView.prototype) {\n    return 'DataView';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%mapiteratorprototype%-@@tostringtag)\n   * ES6$23.1.5.2.2 - %MapIteratorPrototype%[@@toStringTag] should be \"Map Iterator\":\n   * Test: `Object.prototype.toString.call(new Map().entries())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (mapExists && objPrototype === mapIteratorPrototype) {\n    return 'Map Iterator';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%setiteratorprototype%-@@tostringtag)\n   * ES6$23.2.5.2.2 - %SetIteratorPrototype%[@@toStringTag] should be \"Set Iterator\":\n   * Test: `Object.prototype.toString.call(new Set().entries())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (setExists && objPrototype === setIteratorPrototype) {\n    return 'Set Iterator';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%arrayiteratorprototype%-@@tostringtag)\n   * ES6$22.1.5.2.2 - %ArrayIteratorPrototype%[@@toStringTag] should be \"Array Iterator\":\n   * Test: `Object.prototype.toString.call([][Symbol.iterator]())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (arrayIteratorExists && objPrototype === arrayIteratorPrototype) {\n    return 'Array Iterator';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%stringiteratorprototype%-@@tostringtag)\n   * ES6$21.1.5.2.2 - %StringIteratorPrototype%[@@toStringTag] should be \"String Iterator\":\n   * Test: `Object.prototype.toString.call(''[Symbol.iterator]())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (stringIteratorExists && objPrototype === stringIteratorPrototype) {\n    return 'String Iterator';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   object from null   x 2,424,320 ops/sec ±1.67% (76 runs sampled)\n  * Post:\n  *   object from null   x 5,838,000 ops/sec ±0.99% (84 runs sampled)\n  */\n  if (objPrototype === null) {\n    return 'Object';\n  }\n\n  return Object\n    .prototype\n    .toString\n    .call(obj)\n    .slice(toStringLeftSliceLength, toStringRightSliceLength);\n}\n\nreturn typeDetect;\n\n})));\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n"],"sourceRoot":""}